
EEE 158 USART Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  08002f20  08002f20  00003f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f4  080037f4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037fc  080037fc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003804  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000005c  08003860  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08003860  0000550c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000344d  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cdc  00000000  00000000  000084d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  000091b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c2  00000000  00000000  00009410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101b9  00000000  00000000  000095d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ca3  00000000  00000000  0001978b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056718  00000000  00000000  0001d42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00073b46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000109c  00000000  00000000  00073b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00074c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002f08 	.word	0x08002f08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002f08 	.word	0x08002f08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000294:	f3bf 8f4f 	dsb	sy
}
 8000298:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <__NVIC_SystemReset+0x24>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002a2:	4904      	ldr	r1, [pc, #16]	@ (80002b4 <__NVIC_SystemReset+0x24>)
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <__NVIC_SystemReset+0x28>)
 80002a6:	4313      	orrs	r3, r2
 80002a8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80002aa:	f3bf 8f4f 	dsb	sy
}
 80002ae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002b0:	bf00      	nop
 80002b2:	e7fd      	b.n	80002b0 <__NVIC_SystemReset+0x20>
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	05fa0004 	.word	0x05fa0004

080002bc <EXTI15_10_IRQHandler>:
 * This function name is special -- this name is used by the startup code (*.s)
 * to indicate the handler for this interrupt vector.
 */
void delay(int);
void EXTI15_10_IRQHandler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	/*
	 * The hardware setup has PC13 being active-low. This must be taken
	 * into consideration to maintain logical consistency with the
	 * rest of the code.
	 */
	if (!(GPIOC->IDR & 0x2000))
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <EXTI15_10_IRQHandler+0x28>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d102      	bne.n	80002d2 <EXTI15_10_IRQHandler+0x16>
		irq_data.pressed = 1;
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <EXTI15_10_IRQHandler+0x2c>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]

	// Re-enable reception of interrupts on this line.
	EXTI->PR = (1 << 13);
 80002d2:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <EXTI15_10_IRQHandler+0x30>)
 80002d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002d8:	615a      	str	r2, [r3, #20]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40020800 	.word	0x40020800
 80002e8:	20000078 	.word	0x20000078
 80002ec:	40013c00 	.word	0x40013c00

080002f0 <SysTick_Handler>:

// Handler for the system tick
void SysTick_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	irq_data.nr_tick += 1;
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <SysTick_Handler+0x20>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	3301      	adds	r3, #1
 80002fa:	4a05      	ldr	r2, [pc, #20]	@ (8000310 <SysTick_Handler+0x20>)
 80002fc:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80002fe:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <SysTick_Handler+0x24>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000078 	.word	0x20000078
 8000314:	e000e010 	.word	0xe000e010

08000318 <do_sys_config>:

////////////////////////////////////////////////////////////////////////////

// Function to initialize the system; called only once on device reset
static void do_sys_config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	////////////////////////////////////////////////////////////////////

	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA
 800031c:	4b76      	ldr	r3, [pc, #472]	@ (80004f8 <do_sys_config+0x1e0>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000320:	4a75      	ldr	r2, [pc, #468]	@ (80004f8 <do_sys_config+0x1e0>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(0b11 << 10);	// Set PA5 as input...
 8000328:	4b74      	ldr	r3, [pc, #464]	@ (80004fc <do_sys_config+0x1e4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a73      	ldr	r2, [pc, #460]	@ (80004fc <do_sys_config+0x1e4>)
 800032e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 10);	// ... then set it as alternate function.
 8000334:	4b71      	ldr	r3, [pc, #452]	@ (80004fc <do_sys_config+0x1e4>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a70      	ldr	r2, [pc, #448]	@ (80004fc <do_sys_config+0x1e4>)
 800033a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800033e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 5);	// PA5 = push-pull output
 8000340:	4b6e      	ldr	r3, [pc, #440]	@ (80004fc <do_sys_config+0x1e4>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a6d      	ldr	r2, [pc, #436]	@ (80004fc <do_sys_config+0x1e4>)
 8000346:	f023 0320 	bic.w	r3, r3, #32
 800034a:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(0b11 << 10);	// Fast mode (needed for PWM)
 800034c:	4b6b      	ldr	r3, [pc, #428]	@ (80004fc <do_sys_config+0x1e4>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a6a      	ldr	r2, [pc, #424]	@ (80004fc <do_sys_config+0x1e4>)
 8000352:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000356:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=  (0b10 << 10);
 8000358:	4b68      	ldr	r3, [pc, #416]	@ (80004fc <do_sys_config+0x1e4>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a67      	ldr	r2, [pc, #412]	@ (80004fc <do_sys_config+0x1e4>)
 800035e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000362:	6093      	str	r3, [r2, #8]
	/*
	 * For PA5 -- where the LED on the Nucleo board is -- only TIM2_CH1
	 * is PWM-capable, per the *device* datasheet. This corresponds to
	 * AF01.
	 */
	GPIOA->AFR[0] &= ~(0x00F00000);	// TIM2_CH1 on PA5 is AF01
 8000364:	4b65      	ldr	r3, [pc, #404]	@ (80004fc <do_sys_config+0x1e4>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a64      	ldr	r2, [pc, #400]	@ (80004fc <do_sys_config+0x1e4>)
 800036a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800036e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0x00100000);
 8000370:	4b62      	ldr	r3, [pc, #392]	@ (80004fc <do_sys_config+0x1e4>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a61      	ldr	r2, [pc, #388]	@ (80004fc <do_sys_config+0x1e4>)
 8000376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800037a:	6213      	str	r3, [r2, #32]
	 * (~16 MHz).
	 *
	 * TIM1, on the other hand, uses the APB2 clock; in turn, no prescaling
	 * is done here, which also yields the same value as HSI (~16 MHz).
	 */
	RCC->APB1ENR	|= (1 << 0);	// Enable TIM2
 800037c:	4b5e      	ldr	r3, [pc, #376]	@ (80004f8 <do_sys_config+0x1e0>)
 800037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000380:	4a5d      	ldr	r2, [pc, #372]	@ (80004f8 <do_sys_config+0x1e0>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB2ENR	|= (1 << 0);	// Enable TIM1
 8000388:	4b5b      	ldr	r3, [pc, #364]	@ (80004f8 <do_sys_config+0x1e0>)
 800038a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800038c:	4a5a      	ldr	r2, [pc, #360]	@ (80004f8 <do_sys_config+0x1e0>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6453      	str	r3, [r2, #68]	@ 0x44
	 *	- Repetitive	(OPM  = CR1[3:3] = 0)
	 * 	- PWM Mode #1	(CCxS[1:0] = 0b00, OCMx = 0b110)
	 * 		- These are in CCMRy; y=1 for CH1 & CH2, and y=2 for
	 * 		  CH3 & CH4.
	 */
	TIM2->CR1 &= ~(0b1111 << 0);
 8000394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800039e:	f023 030f 	bic.w	r3, r3, #15
 80003a2:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(1 << 0);		// Make sure the timer is off
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ae:	f023 0301 	bic.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |=  (1 << 7);		// Preload ARR (required for PWM)
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003c2:	6013      	str	r3, [r2, #0]
	TIM2->CCMR1 = 0x0068;		// Channel 1 (TIM2_CH1)
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c8:	2268      	movs	r2, #104	@ 0x68
 80003ca:	619a      	str	r2, [r3, #24]
	 * (f_clk) / (ARR*(PSC+1))
	 *
	 * since each period must be able to span all values on the interval
	 * [0, ARR). For obvious reasons, ARR must be at least equal to one.
	 */
	TIM2->ARR	= 100;		// Integer percentages; interval = [0,100]
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d0:	2264      	movs	r2, #100	@ 0x64
 80003d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC	= (320 - 1);	// (16MHz) / (ARR*(TIM2_PSC + 1)) = 500 Hz
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d8:	f240 123f 	movw	r2, #319	@ 0x13f
 80003dc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Let main() set the duty cycle. We initialize at zero.
	TIM2->CCR1	= 0;
 80003de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e2:	2200      	movs	r2, #0
 80003e4:	635a      	str	r2, [r3, #52]	@ 0x34
	/*
	 * The LED is active-HI; thus, its polarity bit must be cleared. Also,
	 * the OCEN bit must be enabled to actually output the PWM signal onto
	 * the port pin.
	 */
	TIM2->CCER	= 0x0001;
 80003e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ea:	2201      	movs	r2, #1
 80003ec:	621a      	str	r2, [r3, #32]

	////////////////////////////////////////////////////////////////////

	// Pushbutton configuration
	RCC->AHB1ENR |= (1 << 2);	// Enable GPIOC
 80003ee:	4b42      	ldr	r3, [pc, #264]	@ (80004f8 <do_sys_config+0x1e0>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a41      	ldr	r2, [pc, #260]	@ (80004f8 <do_sys_config+0x1e0>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOC->MODER &= ~(0b11 << 26);	// Set PC13 as input...
 80003fa:	4b41      	ldr	r3, [pc, #260]	@ (8000500 <do_sys_config+0x1e8>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a40      	ldr	r2, [pc, #256]	@ (8000500 <do_sys_config+0x1e8>)
 8000400:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000404:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(0b11 << 26);	// ... without any pull-up/pull-down (provided externally).
 8000406:	4b3e      	ldr	r3, [pc, #248]	@ (8000500 <do_sys_config+0x1e8>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	4a3d      	ldr	r2, [pc, #244]	@ (8000500 <do_sys_config+0x1e8>)
 800040c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000410:	60d3      	str	r3, [r2, #12]

	/*
	 * Enable the system-configuration controller. If disabled, interrupt
	 * settings cannot be configured.
	 */
	RCC->APB2ENR |= (1 << 14);
 8000412:	4b39      	ldr	r3, [pc, #228]	@ (80004f8 <do_sys_config+0x1e0>)
 8000414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000416:	4a38      	ldr	r2, [pc, #224]	@ (80004f8 <do_sys_config+0x1e0>)
 8000418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800041c:	6453      	str	r3, [r2, #68]	@ 0x44
	 *
	 * For this system, PC13 would end up on Line 13; thus, the
	 * corresponding setting is EXTICR4[7:4] == 0b0010. Before we set it,
	 * mask the corresponding interrupt line.
	 */
	EXTI->IMR &= ~(1 << 13);		// Mask the interrupt
 800041e:	4b39      	ldr	r3, [pc, #228]	@ (8000504 <do_sys_config+0x1ec>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a38      	ldr	r2, [pc, #224]	@ (8000504 <do_sys_config+0x1ec>)
 8000424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000428:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[3] &= (0b1111 << 4);	// Select PC13 for Line 13
 800042a:	4b37      	ldr	r3, [pc, #220]	@ (8000508 <do_sys_config+0x1f0>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a36      	ldr	r2, [pc, #216]	@ (8000508 <do_sys_config+0x1f0>)
 8000430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000434:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= (0b0010 << 4);
 8000436:	4b34      	ldr	r3, [pc, #208]	@ (8000508 <do_sys_config+0x1f0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a33      	ldr	r2, [pc, #204]	@ (8000508 <do_sys_config+0x1f0>)
 800043c:	f043 0320 	orr.w	r3, r3, #32
 8000440:	6153      	str	r3, [r2, #20]
	 * Per the hardware configuration, pressing the button causes a
	 * falling-edge event to be triggered, and a rising-edge on release.
	 * Since we are only concerned with presses, just don't trigger on
	 * releases.
	 */
	EXTI->RTSR &= ~(1 << 13);
 8000442:	4b30      	ldr	r3, [pc, #192]	@ (8000504 <do_sys_config+0x1ec>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	4a2f      	ldr	r2, [pc, #188]	@ (8000504 <do_sys_config+0x1ec>)
 8000448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800044c:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1 << 13);
 800044e:	4b2d      	ldr	r3, [pc, #180]	@ (8000504 <do_sys_config+0x1ec>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	4a2c      	ldr	r2, [pc, #176]	@ (8000504 <do_sys_config+0x1ec>)
 8000454:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000458:	60d3      	str	r3, [r2, #12]

	/*
	 * Nothing more from the SCC, disable it to prevent accidental
	 * remapping of the interrupt lines.
	 */
	RCC->APB2ENR &= ~(1 << 14);
 800045a:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <do_sys_config+0x1e0>)
 800045c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800045e:	4a26      	ldr	r2, [pc, #152]	@ (80004f8 <do_sys_config+0x1e0>)
 8000460:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000464:	6453      	str	r3, [r2, #68]	@ 0x44
	 * 4 bits; lower number = higher priority.
	 *
	 * Position 40 in the NVIC table would be at IPR[10][7:0]; or,
	 * alternatively, just IP[40].
	 */
	NVIC->IP[40] = (1 << 4);
 8000466:	4b29      	ldr	r3, [pc, #164]	@ (800050c <do_sys_config+0x1f4>)
 8000468:	2210      	movs	r2, #16
 800046a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
	NVIC->IP[6]  = (0b1111 << 4);	// SysTick; make it least-priority
 800046e:	4b27      	ldr	r3, [pc, #156]	@ (800050c <do_sys_config+0x1f4>)
 8000470:	22f0      	movs	r2, #240	@ 0xf0
 8000472:	f883 2306 	strb.w	r2, [r3, #774]	@ 0x306
	 * effect.
	 *
	 * Position 25 in the NVIC table would be at I{S/C}ER[0][25:25]; while
	 * position 27 would be at I{S/C}ER[0][27:27].
	 */
	NVIC->ISER[0] = (1 << 6);	// Note: Writing '0' is a no-op
 8000476:	4b25      	ldr	r3, [pc, #148]	@ (800050c <do_sys_config+0x1f4>)
 8000478:	2240      	movs	r2, #64	@ 0x40
 800047a:	601a      	str	r2, [r3, #0]
	NVIC->ISER[1] = (1 << 8);	// Note: Writing '0' is a no-op
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <do_sys_config+0x1f4>)
 800047e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000482:	605a      	str	r2, [r3, #4]
	EXTI->IMR |= (1 << 13);		// Unmask the interrupt on Line 13
 8000484:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <do_sys_config+0x1ec>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1e      	ldr	r2, [pc, #120]	@ (8000504 <do_sys_config+0x1ec>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048e:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= (1 << 0);		// Trigger an update on TIM2
 8000490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= (1 << 0);		// Activate both timers
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	6013      	str	r3, [r2, #0]
	irq_data.pressed = 0;
 80004b0:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <do_sys_config+0x1f8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]

	/*
	 * Enable tick counting; the idea is to allow main() to perform
	 * periodic tasks.
	 */
	SysTick->LOAD = (20000-1);	// Target is 100 Hz with 2MHz clock
 80004b6:	4b17      	ldr	r3, [pc, #92]	@ (8000514 <do_sys_config+0x1fc>)
 80004b8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80004bc:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = 0;
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <do_sys_config+0x1fc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(1 << 2);	// Clock base = 16MHz / 8 = 2MHz
 80004c4:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <do_sys_config+0x1fc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <do_sys_config+0x1fc>)
 80004ca:	f023 0304 	bic.w	r3, r3, #4
 80004ce:	6013      	str	r3, [r2, #0]
	SysTick->CTRL &= ~(1 << 16);
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <do_sys_config+0x1fc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000514 <do_sys_config+0x1fc>)
 80004d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004da:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= (0b11 << 0);	// Enable the tick
 80004dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <do_sys_config+0x1fc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <do_sys_config+0x1fc>)
 80004e2:	f043 0303 	orr.w	r3, r3, #3
 80004e6:	6013      	str	r3, [r2, #0]
	
	// Do the initialization of USART last.
	usart1_init();
 80004e8:	f001 f80c 	bl	8001504 <usart1_init>
	usart2_init();
 80004ec:	f000 fe9a 	bl	8001224 <usart2_init>
	usart6_init();
 80004f0:	f001 f9a8 	bl	8001844 <usart6_init>

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40020000 	.word	0x40020000
 8000500:	40020800 	.word	0x40020800
 8000504:	40013c00 	.word	0x40013c00
 8000508:	40013800 	.word	0x40013800
 800050c:	e000e100 	.word	0xe000e100
 8000510:	20000078 	.word	0x20000078
 8000514:	e000e010 	.word	0xe000e010

08000518 <computeCoordinateString>:


/////////////////////////////////////////////////////////////////////////////

char* computeCoordinateString(uint8_t low_byte, uint8_t high_byte) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
    // Combine low and high bytes to form a 16-bit unsigned integer
    uint16_t coordinate = low_byte + (high_byte * 256);
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	b29a      	uxth	r2, r3
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	b29b      	uxth	r3, r3
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	b29b      	uxth	r3, r3
 8000534:	4413      	add	r3, r2
 8000536:	81bb      	strh	r3, [r7, #12]
    // Declare mm as int16_t to hold signed 16-bit integer value
    int16_t mm;
    // Convert to signed 16-bit integer
    // Check if coordinate is greater than or equal to 32768
    if (coordinate >= 32768) {
 8000538:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800053c:	2b00      	cmp	r3, #0
 800053e:	da05      	bge.n	800054c <computeCoordinateString+0x34>
        // Convert to signed 16-bit integer by subtracting 32768
        mm = (int16_t)coordinate - 32768;
 8000540:	89bb      	ldrh	r3, [r7, #12]
 8000542:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000546:	b29b      	uxth	r3, r3
 8000548:	81fb      	strh	r3, [r7, #14]
 800054a:	e003      	b.n	8000554 <computeCoordinateString+0x3c>
    } else {
        // Convert to signed 16-bit integer by negating the value
        mm = -1 * coordinate;
 800054c:	89bb      	ldrh	r3, [r7, #12]
 800054e:	425b      	negs	r3, r3
 8000550:	b29b      	uxth	r3, r3
 8000552:	81fb      	strh	r3, [r7, #14]
    }
    // Allocate memory for the string
        char* result = (char*)malloc(50 * sizeof(char));
 8000554:	2032      	movs	r0, #50	@ 0x32
 8000556:	f001 fae7 	bl	8001b28 <malloc>
 800055a:	4603      	mov	r3, r0
 800055c:	60bb      	str	r3, [r7, #8]
        if (result == NULL) {
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d105      	bne.n	8000570 <computeCoordinateString+0x58>
            perror("Memory allocation failed");
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <computeCoordinateString+0x70>)
 8000566:	f001 fd69 	bl	800203c <perror>
            exit(EXIT_FAILURE);
 800056a:	2001      	movs	r0, #1
 800056c:	f001 faca 	bl	8001b04 <exit>
    }
    // Format the coordinate into a stringaq
    sprintf(result, "%d mm", mm);
 8000570:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000574:	461a      	mov	r2, r3
 8000576:	4905      	ldr	r1, [pc, #20]	@ (800058c <computeCoordinateString+0x74>)
 8000578:	68b8      	ldr	r0, [r7, #8]
 800057a:	f001 fd67 	bl	800204c <siprintf>
    return result;
 800057e:	68bb      	ldr	r3, [r7, #8]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	08002f20 	.word	0x08002f20
 800058c:	08002f3c 	.word	0x08002f3c

08000590 <computeSpeedString>:

char* computeSpeedString(uint8_t low_byte, uint8_t high_byte) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
    // Combine low and high bytes to form a 16-bit unsigned integer
    uint16_t coordinate = low_byte + (high_byte * 256);
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4413      	add	r3, r2
 80005ae:	81bb      	strh	r3, [r7, #12]
    // Declare mm as int16_t to hold signed 16-bit integer value
    int16_t mm;
    // Convert to signed 16-bit integer
    // Check if coordinate is greater than or equal to 32768
    if (coordinate >= 32768) {
 80005b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da05      	bge.n	80005c4 <computeSpeedString+0x34>
        // Convert to signed 16-bit integer by subtracting 32768
        mm = (int16_t)coordinate - 32768;
 80005b8:	89bb      	ldrh	r3, [r7, #12]
 80005ba:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80005be:	b29b      	uxth	r3, r3
 80005c0:	81fb      	strh	r3, [r7, #14]
 80005c2:	e003      	b.n	80005cc <computeSpeedString+0x3c>
    } else {
        // Convert to signed 16-bit integer by negating the value
        mm = -1 * coordinate;
 80005c4:	89bb      	ldrh	r3, [r7, #12]
 80005c6:	425b      	negs	r3, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	81fb      	strh	r3, [r7, #14]
    }
    // Allocate memory for the string
        char* result = (char*)malloc(50 * sizeof(char));
 80005cc:	2032      	movs	r0, #50	@ 0x32
 80005ce:	f001 faab 	bl	8001b28 <malloc>
 80005d2:	4603      	mov	r3, r0
 80005d4:	60bb      	str	r3, [r7, #8]
        if (result == NULL) {
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <computeSpeedString+0x58>
            perror("Memory allocation failed");
 80005dc:	4808      	ldr	r0, [pc, #32]	@ (8000600 <computeSpeedString+0x70>)
 80005de:	f001 fd2d 	bl	800203c <perror>
            exit(EXIT_FAILURE);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f001 fa8e 	bl	8001b04 <exit>
    }
    // Format the coordinate into a string
    sprintf(result, "%d cm/s", mm);
 80005e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4905      	ldr	r1, [pc, #20]	@ (8000604 <computeSpeedString+0x74>)
 80005f0:	68b8      	ldr	r0, [r7, #8]
 80005f2:	f001 fd2b 	bl	800204c <siprintf>
    return result;
 80005f6:	68bb      	ldr	r3, [r7, #8]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	08002f20 	.word	0x08002f20
 8000604:	08002f44 	.word	0x08002f44

08000608 <bufclr>:
    const char* escape_seq = "\x1B[2J\x1B[H"; // ANSI escape sequence to clear screen
    usart2_tx_send(escape_seq, strlen(escape_seq));
    while (usart2_tx_is_busy());
}

void bufclr (char *buf){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fde5 	bl	80001e0 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e007      	b.n	8000630 <bufclr+0x28>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3301      	adds	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf3      	blt.n	8000620 <bufclr+0x18>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <main>:

// The heart of the program
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0f0      	sub	sp, #448	@ 0x1c0
 8000648:	af00      	add	r7, sp, #0
	/*
	 * Buffer for storing data from the USART; necessary to properly parse
	 * multi-byte datagrams (eg. ANSI escape sequences).
	 */
	char		rxb_data[30];
	unsigned int	rxb_idx  = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
	unsigned int	rxb_size = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint8_t	count = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
	unsigned int	population = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	char		rxb6_data[100];
	unsigned int	rxb6_idx  = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	unsigned int	rxb6_size = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	char *s = NULL;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
//	unsigned int	wifi_status = 0;
	uint8_t wifi_status = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
	uint8_t wifi_setup = 0; //make this into 1 if the wifi has been setup already
 800067a:	2300      	movs	r3, #0
 800067c:	f887 31ae 	strb.w	r3, [r7, #430]	@ 0x1ae
	char local_buf1[100] = {0};
 8000680:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000684:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	3304      	adds	r3, #4
 800068e:	2260      	movs	r2, #96	@ 0x60
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fd3d 	bl	8002112 <memset>
	char local_buf2[30] = {0};
 8000698:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800069c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	831a      	strh	r2, [r3, #24]
	char wifi_buf[30] = {0}; //for debugging
 80006b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80006ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	3304      	adds	r3, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	831a      	strh	r2, [r3, #24]

	// Define a global variable to store the time of the last population count
	volatile uint32_t last_population_count_time = 0;
 80006d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80006d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
	volatile uint32_t last_wifi_count_time = 0; // For Wifi setup, resending after time elapsed and have failed to receive "OK"
 80006e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80006e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
	volatile uint32_t last_send_data_time = 0; // For sending of data, the delay between sends
 80006ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80006f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
	volatile uint32_t wifi_status_time = 0; // For sending of data, the delay between sends
 80006f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80006fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]

	// Define the delay (in milliseconds) between population counts
	const uint32_t POPULATION_COUNT_DELAY_MS = 1000;
 8000704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000708:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
	const uint32_t WIFI_COUNT_DELAY_MS = 5000; // For Wifi setup, resending after time elapsed and have failed to receive "OK"
 800070c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000710:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
	const uint32_t SEND_DATA_DELAY = 50000; //Delay for sending the data -- makes use of internal clock
 8000714:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8000718:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	// Additional delay for wifi_status 5 and 7
	const uint32_t ADDITIONAL_WIFI_DELAY_MS = 2000;
 800071c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000720:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	const uint32_t WIFI_STATUS_TIMEOUT = 100000;
 8000724:	4bcb      	ldr	r3, [pc, #812]	@ (8000a54 <main+0x410>)
 8000726:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184

	// Configure the system
	do_sys_config();
 800072a:	f7ff fdf5 	bl	8000318 <do_sys_config>

	// Wifi Reset
	if (!usart6_tx_is_busy()) {
 800072e:	f001 f979 	bl	8001a24 <usart6_tx_is_busy>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10d      	bne.n	8000754 <main+0x110>
		usart6_tx_send("AT+RST\r\n", strlen("AT+RST\r\n"));
 8000738:	2108      	movs	r1, #8
 800073a:	48c7      	ldr	r0, [pc, #796]	@ (8000a58 <main+0x414>)
 800073c:	f001 f98c 	bl	8001a58 <usart6_tx_send>
		while (usart6_tx_is_busy());
 8000740:	bf00      	nop
 8000742:	f001 f96f 	bl	8001a24 <usart6_tx_is_busy>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1fa      	bne.n	8000742 <main+0xfe>
		delay(5000);
 800074c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000750:	f000 fbe6 	bl	8000f20 <delay>
	 */
	for (;;) {

		/////////////////////////////////////////////////////////////
		// Get the current time
		uint32_t current_time = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 8000754:	4bc1      	ldr	r3, [pc, #772]	@ (8000a5c <main+0x418>)
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
		uint32_t current_time_wifi = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 8000764:	4bbd      	ldr	r3, [pc, #756]	@ (8000a5c <main+0x418>)
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
		uint32_t current_send_data_time = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 8000774:	4bb9      	ldr	r3, [pc, #740]	@ (8000a5c <main+0x418>)
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

		// When Nearing to the limit of uint32_t reset everything to zero to fix wrap-around
		if (current_time >= 4000000000){
 8000784:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000788:	4ab5      	ldr	r2, [pc, #724]	@ (8000a60 <main+0x41c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d901      	bls.n	8000792 <main+0x14e>
			// reseting when time reaches at this point
			NVIC_SystemReset();
 800078e:	f7ff fd7f 	bl	8000290 <__NVIC_SystemReset>
//			wifi_status_time = 0; // For sending of data, the delay between sends
		}

		//---------------------------- ESP8266 Configuration -------------------------------------//
		//configuring the esp8266 here
		uint32_t delay_time = WIFI_COUNT_DELAY_MS;
 8000792:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000796:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
		if (wifi_status == 5 || wifi_status == 7) {
 800079a:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d003      	beq.n	80007aa <main+0x166>
 80007a2:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	d106      	bne.n	80007b8 <main+0x174>
			delay_time += ADDITIONAL_WIFI_DELAY_MS;
 80007aa:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80007ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80007b2:	4413      	add	r3, r2
 80007b4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
		}
		if (current_time_wifi - last_wifi_count_time >= delay_time && wifi_status < 8) {
 80007b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80007bc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80007cc:	429a      	cmp	r2, r3
 80007ce:	f200 8118 	bhi.w	8000a02 <main+0x3be>
 80007d2:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	f200 8113 	bhi.w	8000a02 <main+0x3be>
			// Clear the buffer
//			memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
			rxb6_size = rxb6_idx = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80007e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80007e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
			if (wifi_status == 0){
 80007ea:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d115      	bne.n	800081e <main+0x1da>
				if (!usart6_tx_is_busy()) {
 80007f2:	f001 f917 	bl	8001a24 <usart6_tx_is_busy>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d110      	bne.n	800081e <main+0x1da>
					usart6_tx_send("AT\r\n", strlen("AT\r\n"));
 80007fc:	2104      	movs	r1, #4
 80007fe:	4899      	ldr	r0, [pc, #612]	@ (8000a64 <main+0x420>)
 8000800:	f001 f92a 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000804:	bf00      	nop
 8000806:	f001 f90d 	bl	8001a24 <usart6_tx_is_busy>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1fa      	bne.n	8000806 <main+0x1c2>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000810:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000814:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000818:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800081c:	601a      	str	r2, [r3, #0]
				}
			}

			//Set to client mode
			if (wifi_status == 1){
 800081e:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000822:	2b01      	cmp	r3, #1
 8000824:	d115      	bne.n	8000852 <main+0x20e>
				if (!usart6_tx_is_busy()) {
 8000826:	f001 f8fd 	bl	8001a24 <usart6_tx_is_busy>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d110      	bne.n	8000852 <main+0x20e>
					usart6_tx_send("AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"));
 8000830:	210d      	movs	r1, #13
 8000832:	488d      	ldr	r0, [pc, #564]	@ (8000a68 <main+0x424>)
 8000834:	f001 f910 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000838:	bf00      	nop
 800083a:	f001 f8f3 	bl	8001a24 <usart6_tx_is_busy>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1fa      	bne.n	800083a <main+0x1f6>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000844:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000848:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800084c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000850:	601a      	str	r2, [r3, #0]
				}
			}
			// join network
			if (wifi_status == 2){
 8000852:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000856:	2b02      	cmp	r3, #2
 8000858:	d115      	bne.n	8000886 <main+0x242>
				if (!usart6_tx_is_busy()) {
 800085a:	f001 f8e3 	bl	8001a24 <usart6_tx_is_busy>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d110      	bne.n	8000886 <main+0x242>
//					usart6_tx_send("AT+CWJAP=\"EEE192-429\",\"EEE192_Room429\"\r\n", strlen("AT+CWJAP=\"EEE192-429\",\"EEE192_Room429\"\r\n"));
//					while (usart6_tx_is_busy());
					usart6_tx_send("AT+CWJAP=\"Lyle\",\"selenium\"\r\n", strlen("AT+CWJAP=\"Lyle\",\"selenium\"\r\n"));
 8000864:	211c      	movs	r1, #28
 8000866:	4881      	ldr	r0, [pc, #516]	@ (8000a6c <main+0x428>)
 8000868:	f001 f8f6 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 800086c:	bf00      	nop
 800086e:	f001 f8d9 	bl	8001a24 <usart6_tx_is_busy>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1fa      	bne.n	800086e <main+0x22a>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000878:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800087c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000880:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000884:	601a      	str	r2, [r3, #0]
				}
			}

			// TCP/UDP connection to single
			if (wifi_status == 3){
 8000886:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 800088a:	2b03      	cmp	r3, #3
 800088c:	d115      	bne.n	80008ba <main+0x276>
				if (!usart6_tx_is_busy()) {
 800088e:	f001 f8c9 	bl	8001a24 <usart6_tx_is_busy>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d110      	bne.n	80008ba <main+0x276>

					usart6_tx_send("AT+CIPMUX=0\r\n", strlen("AT+CIPMUX=0\r\n"));
 8000898:	210d      	movs	r1, #13
 800089a:	4875      	ldr	r0, [pc, #468]	@ (8000a70 <main+0x42c>)
 800089c:	f001 f8dc 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80008a0:	bf00      	nop
 80008a2:	f001 f8bf 	bl	8001a24 <usart6_tx_is_busy>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1fa      	bne.n	80008a2 <main+0x25e>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 80008ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80008b0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80008b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80008b8:	601a      	str	r2, [r3, #0]
				}
			}

			// TCP setting
			if (wifi_status == 4){
 80008ba:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d121      	bne.n	8000906 <main+0x2c2>
				if (!usart6_tx_is_busy()) {
 80008c2:	f001 f8af 	bl	8001a24 <usart6_tx_is_busy>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d11c      	bne.n	8000906 <main+0x2c2>
					usart6_tx_send("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", strlen("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"));
 80008cc:	2128      	movs	r1, #40	@ 0x28
 80008ce:	4869      	ldr	r0, [pc, #420]	@ (8000a74 <main+0x430>)
 80008d0:	f001 f8c2 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80008d4:	bf00      	nop
 80008d6:	f001 f8a5 	bl	8001a24 <usart6_tx_is_busy>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1fa      	bne.n	80008d6 <main+0x292>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 80008e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80008e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80008e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80008ec:	601a      	str	r2, [r3, #0]
					wifi_setup = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f887 31ae 	strb.w	r3, [r7, #430]	@ 0x1ae
					wifi_status += 1;
 80008f4:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80008f8:	3301      	adds	r3, #1
 80008fa:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
					delay(1500);
 80008fe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000902:	f000 fb0d 	bl	8000f20 <delay>
				}
			}

			//================== Sending Data Portion ====================//
			// Preparing the sensor that we will send
			if (wifi_status == 5){
 8000906:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 800090a:	2b05      	cmp	r3, #5
 800090c:	d146      	bne.n	800099c <main+0x358>
				// Clear the buffer
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 800090e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000912:	2264      	movs	r2, #100	@ 0x64
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fbfb 	bl	8002112 <memset>
				rxb6_size = rxb6_idx = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8000922:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000926:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
//				sprintf (local_buf1, "GET /update?api_key=DOMEQU194VW41HBN&field2=%d\r\n", population);
				sprintf (local_buf1, "GET /update?api_key=HPSO01RYLJ4EC7VD&field1=%d\r\n", population);
 800092a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800092e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000932:	4951      	ldr	r1, [pc, #324]	@ (8000a78 <main+0x434>)
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fb89 	bl	800204c <siprintf>
				int len = strlen (local_buf1);
 800093a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc4e 	bl	80001e0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
				sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 800094a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000952:	494a      	ldr	r1, [pc, #296]	@ (8000a7c <main+0x438>)
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fb79 	bl	800204c <siprintf>
				if (!usart6_tx_is_busy()) {
 800095a:	f001 f863 	bl	8001a24 <usart6_tx_is_busy>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11b      	bne.n	800099c <main+0x358>
					usart6_tx_send(local_buf2, sizeof(local_buf2));
 8000964:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000968:	211e      	movs	r1, #30
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f874 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000970:	bf00      	nop
 8000972:	f001 f857 	bl	8001a24 <usart6_tx_is_busy>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1fa      	bne.n	8000972 <main+0x32e>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 800097c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000980:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000984:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000988:	601a      	str	r2, [r3, #0]
					wifi_status += 2;
 800098a:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 800098e:	3302      	adds	r3, #2
 8000990:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
					delay(1500);
 8000994:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000998:	f000 fac2 	bl	8000f20 <delay>
				}
			}
			// sending API key
			if (wifi_status == 7 ){
 800099c:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d12e      	bne.n	8000a02 <main+0x3be>

				if (!usart6_tx_is_busy()) {
 80009a4:	f001 f83e 	bl	8001a24 <usart6_tx_is_busy>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d129      	bne.n	8000a02 <main+0x3be>
					// Clear the buffer
					memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 80009ae:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80009b2:	2264      	movs	r2, #100	@ 0x64
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fbab 	bl	8002112 <memset>
					rxb6_size = rxb6_idx = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80009c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80009c6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					usart6_tx_send(local_buf1, sizeof(local_buf1));
 80009ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009ce:	2164      	movs	r1, #100	@ 0x64
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f841 	bl	8001a58 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80009d6:	bf00      	nop
 80009d8:	f001 f824 	bl	8001a24 <usart6_tx_is_busy>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1fa      	bne.n	80009d8 <main+0x394>
					last_wifi_count_time = current_time_wifi;
 80009e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80009e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80009ea:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80009ee:	601a      	str	r2, [r3, #0]
					wifi_status += 1;
 80009f0:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80009f4:	3301      	adds	r3, #1
 80009f6:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
					delay(1500);
 80009fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80009fe:	f000 fa8f 	bl	8000f20 <delay>

		}
		//------------------------------------------------------------------------------------//

		//Checker if it has been staying in a single status for a long time
		if ((current_time_wifi - wifi_status_time) >= WIFI_STATUS_TIMEOUT) {
 8000a02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000a06:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d801      	bhi.n	8000a1e <main+0x3da>
//			sendEscapeSeq();
//			if (!usart2_tx_is_busy()) {
//				usart2_tx_send("RESETING NOW", strlen("RESETING NOW"));
//				while (usart2_tx_is_busy());
//			}
			NVIC_SystemReset();
 8000a1a:	f7ff fc39 	bl	8000290 <__NVIC_SystemReset>
		}
		// Check for any data received via USART1. [USART 1 IS USED FOR RECEIVING FROM LD2450]
		do {
			if (!usart1_rx_get_event(&usart1_evt))
 8000a1e:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fe2e 	bl	8001684 <usart1_rx_get_event>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d051      	beq.n	8000ad2 <main+0x48e>
				// Nothing to do here
				break;
			else if (!usart1_evt.valid)
 8000a2e:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d04c      	beq.n	8000ad6 <main+0x492>
			/*
			 * [1] If an IDLE is detected, update the size.
			 *
			 * [2] If no data is present, we're done.
			 */
			if (usart1_evt.is_idle) {
 8000a3c:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01a      	beq.n	8000a80 <main+0x43c>
				rxb_size = rxb_idx;
 8000a4a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
				break;
 8000a52:	e043      	b.n	8000adc <main+0x498>
 8000a54:	000186a0 	.word	0x000186a0
 8000a58:	08002f54 	.word	0x08002f54
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	ee6b27ff 	.word	0xee6b27ff
 8000a64:	08002f60 	.word	0x08002f60
 8000a68:	08002f68 	.word	0x08002f68
 8000a6c:	08002f78 	.word	0x08002f78
 8000a70:	08002f98 	.word	0x08002f98
 8000a74:	08002fa8 	.word	0x08002fa8
 8000a78:	08002fd4 	.word	0x08002fd4
 8000a7c:	08003008 	.word	0x08003008
			} else if (!usart1_evt.has_data) {
 8000a80:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d025      	beq.n	8000ada <main+0x496>
				break;
			}

			// Store the data
			if (rxb_idx >= sizeof(rxb_data)) {
 8000a8e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000a92:	2b1d      	cmp	r3, #29
 8000a94:	d904      	bls.n	8000aa0 <main+0x45c>
				rxb_size = rxb_idx;
 8000a96:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000a9a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
				break;
 8000a9e:	e01d      	b.n	8000adc <main+0x498>
			}
			rxb_data[rxb_idx++] = usart1_evt.c;
 8000aa0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000aaa:	f897 213c 	ldrb.w	r2, [r7, #316]	@ 0x13c
 8000aae:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8000ab2:	443b      	add	r3, r7
 8000ab4:	f803 2ca8 	strb.w	r2, [r3, #-168]
			count += 1;
 8000ab8:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8000abc:	3301      	adds	r3, #1
 8000abe:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
			rxb_data[rxb_idx] = '\0';
 8000ac2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000ac6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
			break;
 8000ad0:	e004      	b.n	8000adc <main+0x498>
				break;
 8000ad2:	bf00      	nop
 8000ad4:	e002      	b.n	8000adc <main+0x498>
				break;
 8000ad6:	bf00      	nop
 8000ad8:	e000      	b.n	8000adc <main+0x498>
				break;
 8000ada:	bf00      	nop



		//----------------------- Portion where receiving "OK" in my code ------------------------//

		if (wifi_status <= 8) {//will turn this off when not supposed to be receiving from esp8266
 8000adc:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	f200 80e2 	bhi.w	8000caa <main+0x666>
		// Check for any data received via USART6. This is for the ESP8266
			do {
				if (!usart6_rx_get_event(&usart6_evt))
 8000ae6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 ff6a 	bl	80019c4 <usart6_rx_get_event>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d038      	beq.n	8000b68 <main+0x524>
					// Nothing to do here
					break;
				else if (!usart6_evt.valid)
 8000af6:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d033      	beq.n	8000b6c <main+0x528>
				/*
				 * [1] If an IDLE is detected, update the size.
				 *
				 * [2] If no data is present, we're done.
				 */
				if (usart6_evt.is_idle) {
 8000b04:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d004      	beq.n	8000b1c <main+0x4d8>
					rxb6_size = rxb6_idx;
 8000b12:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000b16:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					break;
 8000b1a:	e02a      	b.n	8000b72 <main+0x52e>
				} else if (!usart6_evt.has_data) {
 8000b1c:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d022      	beq.n	8000b70 <main+0x52c>
					break;
				}

				// Store the data
				if (rxb6_idx >= sizeof(rxb6_data)) {
 8000b2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000b2e:	2b63      	cmp	r3, #99	@ 0x63
 8000b30:	d904      	bls.n	8000b3c <main+0x4f8>
					rxb6_size = rxb6_idx;
 8000b32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000b36:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					break;
 8000b3a:	e01a      	b.n	8000b72 <main+0x52e>
				}
				rxb6_data[rxb6_idx++] = usart6_evt.c;
 8000b3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8000b46:	f897 1138 	ldrb.w	r1, [r7, #312]	@ 0x138
 8000b4a:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8000b4e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000b52:	54d1      	strb	r1, [r2, r3]
				rxb6_data[rxb6_idx] = '\0';
 8000b54:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000b58:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8000b5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000b60:	4413      	add	r3, r2
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
				break;
 8000b66:	e004      	b.n	8000b72 <main+0x52e>
					break;
 8000b68:	bf00      	nop
 8000b6a:	e002      	b.n	8000b72 <main+0x52e>
					break;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <main+0x52e>
					break;
 8000b70:	bf00      	nop
			}while (0);


			// Checking if "OK" is received
			if (wifi_status < 4) {
 8000b72:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d860      	bhi.n	8000c3c <main+0x5f8>
				if ((s = strstr(rxb6_data, "OK")) && (wifi_status != 5)) {
 8000b7a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000b7e:	49e5      	ldr	r1, [pc, #916]	@ (8000f14 <main+0x8d0>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fcc1 	bl	8002508 <strstr>
 8000b86:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
 8000b8a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d027      	beq.n	8000be2 <main+0x59e>
 8000b92:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d023      	beq.n	8000be2 <main+0x59e>
					// Clear the buffer and increment wifi_status
					memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 8000b9a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000b9e:	2264      	movs	r2, #100	@ 0x64
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fab5 	bl	8002112 <memset>
					rxb6_size = rxb6_idx = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8000bae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000bb2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					wifi_status += 1;
 8000bb6:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000bba:	3301      	adds	r3, #1
 8000bbc:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
					s = NULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
					last_send_data_time = current_send_data_time;
 8000bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8000bce:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000bd2:	601a      	str	r2, [r3, #0]
					wifi_status_time = current_time_wifi;
 8000bd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000bd8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000bdc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000be0:	601a      	str	r2, [r3, #0]
				}
				if ((wifi_status == 5) && (s = strstr(rxb6_data, ">"))) {
 8000be2:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	d128      	bne.n	8000c3c <main+0x5f8>
 8000bea:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000bee:	213e      	movs	r1, #62	@ 0x3e
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fa96 	bl	8002122 <strchr>
 8000bf6:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
 8000bfa:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d01c      	beq.n	8000c3c <main+0x5f8>
					// Clear the buffer and increment wifi_status
					memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 8000c02:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c06:	2264      	movs	r2, #100	@ 0x64
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fa81 	bl	8002112 <memset>
					rxb6_size = rxb6_idx = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8000c16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000c1a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					wifi_status += 2;
 8000c1e:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000c22:	3302      	adds	r3, #2
 8000c24:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
					s = NULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
					wifi_status_time = current_time_wifi;
 8000c2e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000c32:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000c36:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000c3a:	601a      	str	r2, [r3, #0]
				}
			}
			// after naging 8 ng wifi_status no need to check if okay was received
			if ((wifi_status == 8) && (s = strstr(rxb6_data, "CLOSED"))) {
 8000c3c:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d132      	bne.n	8000caa <main+0x666>
 8000c44:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c48:	49b3      	ldr	r1, [pc, #716]	@ (8000f18 <main+0x8d4>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fc5c 	bl	8002508 <strstr>
 8000c50:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
 8000c54:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d026      	beq.n	8000caa <main+0x666>
				// Clear the buffer and increment wifi_status
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 8000c5c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c60:	2264      	movs	r2, #100	@ 0x64
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fa54 	bl	8002112 <memset>
				rxb6_size = rxb6_idx = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8000c70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000c74:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
				wifi_status += 1;
 8000c78:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
				s = NULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
				wifi_status_time = current_time_wifi;
 8000c88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000c8c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000c90:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000c94:	601a      	str	r2, [r3, #0]
				bufclr(local_buf1);
 8000c96:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fcb4 	bl	8000608 <bufclr>
				bufclr(local_buf2);
 8000ca0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fcaf 	bl	8000608 <bufclr>
			}

		}

		// ---------------------------------- LD2450 Portion of the code ---------------------------//
		if (count == 30 && wifi_setup == 1) {// since my UART is sending 30 bytes of data I have a counter above and after the counter has been filled I will send out yung data ko to the uart to display
 8000caa:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8000cae:	2b1e      	cmp	r3, #30
 8000cb0:	f47f ad50 	bne.w	8000754 <main+0x110>
 8000cb4:	f897 31ae 	ldrb.w	r3, [r7, #430]	@ 0x1ae
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	f47f ad4b 	bne.w	8000754 <main+0x110>
			//introduced a checker for the header and footer to verify that I am getting the data values in between
			if (rxb_data[0] == 170 && rxb_data[1] == 255 && rxb_data[2] == 3 && rxb_data[3] == 0 && rxb_data[28] == 85 && rxb_data[29] == 204) {
 8000cbe:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 8000cc2:	2baa      	cmp	r3, #170	@ 0xaa
 8000cc4:	f040 80fe 	bne.w	8000ec4 <main+0x880>
 8000cc8:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8000ccc:	2bff      	cmp	r3, #255	@ 0xff
 8000cce:	f040 80f9 	bne.w	8000ec4 <main+0x880>
 8000cd2:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	f040 80f4 	bne.w	8000ec4 <main+0x880>
 8000cdc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 80ef 	bne.w	8000ec4 <main+0x880>
 8000ce6:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8000cea:	2b55      	cmp	r3, #85	@ 0x55
 8000cec:	f040 80ea 	bne.w	8000ec4 <main+0x880>
 8000cf0:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8000cf4:	2bcc      	cmp	r3, #204	@ 0xcc
 8000cf6:	f040 80e5 	bne.w	8000ec4 <main+0x880>
				//Object 1
				char* pos1x = computeCoordinateString(rxb_data[4], rxb_data[5]);
 8000cfa:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000cfe:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fc07 	bl	8000518 <computeCoordinateString>
 8000d0a:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
				char* pos1y = computeCoordinateString(rxb_data[6], rxb_data[7]);
 8000d0e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000d12:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fbfd 	bl	8000518 <computeCoordinateString>
 8000d1e:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
				char* speed1 = computeSpeedString(rxb_data[8], rxb_data[9]);
 8000d22:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 8000d26:	f897 2121 	ldrb.w	r2, [r7, #289]	@ 0x121
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc2f 	bl	8000590 <computeSpeedString>
 8000d32:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
				int pos1y_counter = atoi(pos1y); // Convert string to integer
 8000d36:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8000d3a:	f000 fede 	bl	8001afa <atoi>
 8000d3e:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164
				int pos1x_counter = atoi(pos1x); // Convert string to integer
 8000d42:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8000d46:	f000 fed8 	bl	8001afa <atoi>
 8000d4a:	f8c7 0160 	str.w	r0, [r7, #352]	@ 0x160
				int speed1_counter = atoi(speed1);
 8000d4e:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8000d52:	f000 fed2 	bl	8001afa <atoi>
 8000d56:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
				if (pos1x_counter >= 800 && pos1x_counter <= 1300){
 8000d5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000d5e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000d62:	db30      	blt.n	8000dc6 <main+0x782>
 8000d64:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000d68:	f240 5214 	movw	r2, #1300	@ 0x514
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	dc2a      	bgt.n	8000dc6 <main+0x782>
					if (pos1y_counter > 800) {
 8000d70:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000d74:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000d78:	dd25      	ble.n	8000dc6 <main+0x782>
						if (current_time - last_population_count_time >= POPULATION_COUNT_DELAY_MS) {
 8000d7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000d7e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d819      	bhi.n	8000dc6 <main+0x782>
						// Record the current time
							last_population_count_time = current_time;
 8000d92:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000d96:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8000d9a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8000d9e:	601a      	str	r2, [r3, #0]
							if (speed1_counter > 0){
 8000da0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dd05      	ble.n	8000db4 <main+0x770>
								population -= 1;
 8000da8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000dac:	3b01      	subs	r3, #1
 8000dae:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000db2:	e008      	b.n	8000dc6 <main+0x782>
							} else if (speed1_counter < 0) {
 8000db4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da04      	bge.n	8000dc6 <main+0x782>
								population += 1;
 8000dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
							}
						}
					}
				}
				// Allocate memory for the string
				char* population_str = (char*)malloc(50 * sizeof(char));
 8000dc6:	2032      	movs	r0, #50	@ 0x32
 8000dc8:	f000 feae 	bl	8001b28 <malloc>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
				if (population_str == NULL) {
 8000dd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d105      	bne.n	8000de6 <main+0x7a2>
					perror("Memory allocation failed");
 8000dda:	4850      	ldr	r0, [pc, #320]	@ (8000f1c <main+0x8d8>)
 8000ddc:	f001 f92e 	bl	800203c <perror>
					exit(EXIT_FAILURE);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 fe8f 	bl	8001b04 <exit>
//					usart2_tx_send("\r\n", 2); // Carriage return and newline characters to move to the next line
//			        while (usart2_tx_is_busy());
//				}

				//Object 2
				char* pos2x = computeCoordinateString(rxb_data[12], rxb_data[13]);
 8000de6:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8000dea:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb91 	bl	8000518 <computeCoordinateString>
 8000df6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
				char* pos2y = computeCoordinateString(rxb_data[14], rxb_data[15]);
 8000dfa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8000dfe:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fb87 	bl	8000518 <computeCoordinateString>
 8000e0a:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
				char* speed2 = computeSpeedString(rxb_data[16], rxb_data[17]);
 8000e0e:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8000e12:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbb9 	bl	8000590 <computeSpeedString>
 8000e1e:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
//					usart2_tx_send("\r\n", 2); // Carriage return and newline characters to move to the next line
//					while (usart2_tx_is_busy());
//				}

				//Object 3
				char* pos3x = computeCoordinateString(rxb_data[20], rxb_data[21]);
 8000e22:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8000e26:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb73 	bl	8000518 <computeCoordinateString>
 8000e32:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
				char* pos3y = computeCoordinateString(rxb_data[22], rxb_data[23]);
 8000e36:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000e3a:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb69 	bl	8000518 <computeCoordinateString>
 8000e46:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
				char* speed3 = computeSpeedString(rxb_data[24], rxb_data[25]);
 8000e4a:	f897 3130 	ldrb.w	r3, [r7, #304]	@ 0x130
 8000e4e:	f897 2131 	ldrb.w	r2, [r7, #305]	@ 0x131
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb9b 	bl	8000590 <computeSpeedString>
 8000e5a:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
//				if (!usart2_tx_is_busy()) {
//					usart2_tx_send(speed3, strlen(speed3));
//					while (usart2_tx_is_busy());
//				}

				rxb_size = rxb_idx = 0;  // Reset the index to clear the contents
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e64:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000e68:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
				count = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
				// Free memory allocated for pos1x and pos1y
				free(pos1x);
 8000e72:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8000e76:	f000 fe5f 	bl	8001b38 <free>
				free(pos1y);
 8000e7a:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8000e7e:	f000 fe5b 	bl	8001b38 <free>
				free(pos2x);
 8000e82:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8000e86:	f000 fe57 	bl	8001b38 <free>
				free(pos2y);
 8000e8a:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000e8e:	f000 fe53 	bl	8001b38 <free>
				free(pos3x);
 8000e92:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8000e96:	f000 fe4f 	bl	8001b38 <free>
				free(pos3y);
 8000e9a:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8000e9e:	f000 fe4b 	bl	8001b38 <free>
				free(speed1);
 8000ea2:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8000ea6:	f000 fe47 	bl	8001b38 <free>
				free(speed2);
 8000eaa:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8000eae:	f000 fe43 	bl	8001b38 <free>
				free(speed3);
 8000eb2:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8000eb6:	f000 fe3f 	bl	8001b38 <free>
				free(population_str);
 8000eba:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8000ebe:	f000 fe3b 	bl	8001b38 <free>
			if (rxb_data[0] == 170 && rxb_data[1] == 255 && rxb_data[2] == 3 && rxb_data[3] == 0 && rxb_data[28] == 85 && rxb_data[29] == 204) {
 8000ec2:	e025      	b.n	8000f10 <main+0x8cc>
				}else {
			        // Shift the data in the array to the left by one position
					//doing this to shift sensor data back incase nagmove from wifi delays
			        for (int i = 0; i < 29; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000eca:	e013      	b.n	8000ef4 <main+0x8b0>
			            rxb_data[i] = rxb_data[i + 1];
 8000ecc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8000ed6:	443b      	add	r3, r7
 8000ed8:	f813 1ca8 	ldrb.w	r1, [r3, #-168]
 8000edc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000ee0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
			        for (int i = 0; i < 29; i++) {
 8000eea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ef4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000ef8:	2b1c      	cmp	r3, #28
 8000efa:	dde7      	ble.n	8000ecc <main+0x888>
			        }
			        rxb_idx--;
 8000efc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000f00:	3b01      	subs	r3, #1
 8000f02:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
			        count--;
 8000f06:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
	for (;;) {
 8000f10:	e420      	b.n	8000754 <main+0x110>
 8000f12:	bf00      	nop
 8000f14:	08003018 	.word	0x08003018
 8000f18:	0800301c 	.word	0x0800301c
 8000f1c:	08002f20 	.word	0x08002f20

08000f20 <delay>:
	// This line is supposed to never be reached.
	return 1;
}

//delay; but do not use!! this messes up the time it receives data in UART
void delay(int d){
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	int i;
	for(; d>0 ;d--){
 8000f28:	e00c      	b.n	8000f44 <delay+0x24>
		for(i =0; i<2657;i++);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e002      	b.n	8000f36 <delay+0x16>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f5b3 6f26 	cmp.w	r3, #2656	@ 0xa60
 8000f3c:	ddf8      	ble.n	8000f30 <delay+0x10>
	for(; d>0 ;d--){
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	dcef      	bgt.n	8000f2a <delay+0xa>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f62:	f001 fb3f 	bl	80025e4 <__errno>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2216      	movs	r2, #22
 8000f6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_exit>:

void _exit (int status)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffe7 	bl	8000f58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f8a:	bf00      	nop
 8000f8c:	e7fd      	b.n	8000f8a <_exit+0x12>

08000f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e00a      	b.n	8000fb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fa0:	f3af 8000 	nop.w
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	b2ca      	uxtb	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dbf0      	blt.n	8000fa0 <_read+0x12>
	}

return len;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e009      	b.n	8000fee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60ba      	str	r2, [r7, #8]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbf1      	blt.n	8000fda <_write+0x12>
	}
	return len;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_close>:

int _close(int file)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	return -1;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f001 fabe 	bl	80025e4 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20020000 	.word	0x20020000
 8001094:	00000400 	.word	0x00000400
 8001098:	20000080 	.word	0x20000080
 800109c:	20000510 	.word	0x20000510

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <USART2_IRQHandler>:
static volatile unsigned int idx_rxf_1 = 0;
static volatile unsigned int idx_rxf_2 = 0;
static volatile unsigned int ctr_rxf = 0;
static volatile struct usart_rx_event fifo_rx[RXFIFO_LEN];
void USART2_IRQHandler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
	 * Notes:
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */
	unsigned int val_sr = USART2->SR;
 80010ca:	4b50      	ldr	r3, [pc, #320]	@ (800120c <USART2_IRQHandler+0x148>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr = USART2->DR;
 80010d0:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <USART2_IRQHandler+0x148>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	60bb      	str	r3, [r7, #8]
	struct usart_rx_event evt = {
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]

	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */
	if (val_sr & (1 << 5)) {
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d036      	beq.n	8001152 <USART2_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr & 0xff);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	717b      	strb	r3, [r7, #5]
		
		// Parity errors can only be detected here.
		if (val_sr & (1 << 1)) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d015      	beq.n	8001130 <USART2_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr == 0) {
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <USART2_IRQHandler+0x64>
				evt.is_break = 1;
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 8001112:	797b      	ldrb	r3, [r7, #5]
 8001114:	f36f 03c3 	bfc	r3, #3, #1
 8001118:	717b      	strb	r3, [r7, #5]
				USART2->CR1 &= ~(1 << 5);
 800111a:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <USART2_IRQHandler+0x148>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a3b      	ldr	r2, [pc, #236]	@ (800120c <USART2_IRQHandler+0x148>)
 8001120:	f023 0320 	bic.w	r3, r3, #32
 8001124:	60d3      	str	r3, [r2, #12]
 8001126:	e003      	b.n	8001130 <USART2_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	717b      	strb	r3, [r7, #5]
			}
		}
		if (val_sr & (1 << 0)) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <USART2_IRQHandler+0x8e>
			// Parity error detected (PE bit is set)
			evt.err_parity = 1;
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	f36f 03c3 	bfc	r3, #3, #1
 8001150:	717b      	strb	r3, [r7, #5]
	
	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr & (1 << 4)) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00d      	beq.n	8001178 <USART2_IRQHandler+0xb4>
		/*
		 * IDLE line
		 * 
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 800115c:	797b      	ldrb	r3, [r7, #5]
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	717b      	strb	r3, [r7, #5]
		USART2->CR1 |= (1 << 5);
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <USART2_IRQHandler+0x148>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4a26      	ldr	r2, [pc, #152]	@ (800120c <USART2_IRQHandler+0x148>)
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	60d3      	str	r3, [r2, #12]
	}
	
	// Put it into the RX FIFO queue
	if (evt.valid) {
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d018      	beq.n	80011b6 <USART2_IRQHandler+0xf2>
		fifo_rx[idx_rxf_1++] = evt;
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <USART2_IRQHandler+0x14c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	4921      	ldr	r1, [pc, #132]	@ (8001210 <USART2_IRQHandler+0x14c>)
 800118c:	600a      	str	r2, [r1, #0]
 800118e:	4921      	ldr	r1, [pc, #132]	@ (8001214 <USART2_IRQHandler+0x150>)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_1 >= RXFIFO_LEN)
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <USART2_IRQHandler+0x14c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b3f      	cmp	r3, #63	@ 0x3f
 800119c:	d902      	bls.n	80011a4 <USART2_IRQHandler+0xe0>
			idx_rxf_1 = 0;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <USART2_IRQHandler+0x14c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
		if (ctr_rxf < RXFIFO_LEN)
 80011a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <USART2_IRQHandler+0x154>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80011aa:	d804      	bhi.n	80011b6 <USART2_IRQHandler+0xf2>
			++ctr_rxf;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <USART2_IRQHandler+0x154>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <USART2_IRQHandler+0x154>)
 80011b4:	6013      	str	r3, [r2, #0]
	
	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr & (1 << 7)) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01e      	beq.n	80011fe <USART2_IRQHandler+0x13a>
		 * Because TXE is only cleared by writing to the USART2_DR
		 * register, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len > 0) {
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <USART2_IRQHandler+0x158>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00e      	beq.n	80011e6 <USART2_IRQHandler+0x122>
			// Queue not empty
			USART2->DR = *(fifo_tx_buf++);
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <USART2_IRQHandler+0x15c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	4914      	ldr	r1, [pc, #80]	@ (8001220 <USART2_IRQHandler+0x15c>)
 80011d0:	600a      	str	r2, [r1, #0]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <USART2_IRQHandler+0x148>)
 80011d8:	605a      	str	r2, [r3, #4]
			--fifo_tx_len;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <USART2_IRQHandler+0x158>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3b01      	subs	r3, #1
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <USART2_IRQHandler+0x158>)
 80011e2:	6013      	str	r3, [r2, #0]
			USART2->CR1 &= ~(1 << 7);
			fifo_tx_len = 0;
			fifo_tx_buf = 0;
		}
	}
}
 80011e4:	e00b      	b.n	80011fe <USART2_IRQHandler+0x13a>
			USART2->CR1 &= ~(1 << 7);
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <USART2_IRQHandler+0x148>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	4a08      	ldr	r2, [pc, #32]	@ (800120c <USART2_IRQHandler+0x148>)
 80011ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011f0:	60d3      	str	r3, [r2, #12]
			fifo_tx_len = 0;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <USART2_IRQHandler+0x158>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
			fifo_tx_buf = 0;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <USART2_IRQHandler+0x15c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40004400 	.word	0x40004400
 8001210:	2000008c 	.word	0x2000008c
 8001214:	20000098 	.word	0x20000098
 8001218:	20000094 	.word	0x20000094
 800121c:	20000088 	.word	0x20000088
 8001220:	20000084 	.word	0x20000084

08001224 <usart2_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART2
void usart2_init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_1 = 0;
 8001228:	4b56      	ldr	r3, [pc, #344]	@ (8001384 <usart2_init+0x160>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	idx_rxf_2 = 0;
 800122e:	4b56      	ldr	r3, [pc, #344]	@ (8001388 <usart2_init+0x164>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
	ctr_rxf = 0;
 8001234:	4b55      	ldr	r3, [pc, #340]	@ (800138c <usart2_init+0x168>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
	memset(fifo_rx, 0, sizeof(fifo_rx));
 800123a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800123e:	2100      	movs	r1, #0
 8001240:	4853      	ldr	r0, [pc, #332]	@ (8001390 <usart2_init+0x16c>)
 8001242:	f000 ff66 	bl	8002112 <memset>
	
	// Configure the GPIO first before configuring the USART.
	
	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA2 & PA3
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <usart2_init+0x170>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a52      	ldr	r2, [pc, #328]	@ (8001394 <usart2_init+0x170>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
	
	GPIOA->MODER &= ~(0b11 << 4);	// Set PA2 as input...
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <usart2_init+0x174>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a50      	ldr	r2, [pc, #320]	@ (8001398 <usart2_init+0x174>)
 8001258:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800125c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 4);	// ... then set it as alternate function.
 800125e:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <usart2_init+0x174>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <usart2_init+0x174>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 6);	// Set PA3 as input...
 800126a:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <usart2_init+0x174>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <usart2_init+0x174>)
 8001270:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001274:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 6);	// ... then set it as alternate function.
 8001276:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <usart2_init+0x174>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a47      	ldr	r2, [pc, #284]	@ (8001398 <usart2_init+0x174>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001280:	6013      	str	r3, [r2, #0]
	 * 
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 2);	// PA2 = push-pull output
 8001282:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <usart2_init+0x174>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a44      	ldr	r2, [pc, #272]	@ (8001398 <usart2_init+0x174>)
 8001288:	f023 0304 	bic.w	r3, r3, #4
 800128c:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 4);	// High-speed mode
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <usart2_init+0x174>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4a41      	ldr	r2, [pc, #260]	@ (8001398 <usart2_init+0x174>)
 8001294:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001298:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 * 
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 6);
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <usart2_init+0x174>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	4a3e      	ldr	r2, [pc, #248]	@ (8001398 <usart2_init+0x174>)
 80012a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80012a4:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 6);
 80012a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <usart2_init+0x174>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <usart2_init+0x174>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 * 
	 * USART2_TX = AF07 @ PA2
	 * USART2_RX = AF07 @ PA3
	 */
	GPIOA->AFR[0] &= ~(0x0000FF00);
 80012b2:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <usart2_init+0x174>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a38      	ldr	r2, [pc, #224]	@ (8001398 <usart2_init+0x174>)
 80012b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80012bc:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0x00007700);
 80012be:	4b36      	ldr	r3, [pc, #216]	@ (8001398 <usart2_init+0x174>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <usart2_init+0x174>)
 80012c4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80012c8:	6213      	str	r3, [r2, #32]
	
	/////////////////////////////////////////////////////////////////////
	
	RCC->APB1ENR  |= (1 << 17);	// Enable USART2 peripheral
 80012ca:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <usart2_init+0x170>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a31      	ldr	r2, [pc, #196]	@ (8001394 <usart2_init+0x170>)
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR |= (1 << 17);	// Reset the whole peripheral
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <usart2_init+0x170>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a2e      	ldr	r2, [pc, #184]	@ (8001394 <usart2_init+0x170>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~(1 << 17);
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <usart2_init+0x170>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001394 <usart2_init+0x170>)
 80012e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80012ec:	6213      	str	r3, [r2, #32]
	
	/*
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */
	USART2->CR1 &= ~(0b11 << 2);
 80012ee:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <usart2_init+0x178>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	4a2a      	ldr	r2, [pc, #168]	@ (800139c <usart2_init+0x178>)
 80012f4:	f023 030c 	bic.w	r3, r3, #12
 80012f8:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=  (1 << 13);
 80012fa:	4b28      	ldr	r3, [pc, #160]	@ (800139c <usart2_init+0x178>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	4a27      	ldr	r2, [pc, #156]	@ (800139c <usart2_init+0x178>)
 8001300:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001304:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART2->BRR &= ~(0x0000FFFF);
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <usart2_init+0x178>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4a24      	ldr	r2, [pc, #144]	@ (800139c <usart2_init+0x178>)
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	6093      	str	r3, [r2, #8]
	USART2->BRR |=  (0x00000023); //23 yung 16mhz 460800baud(From the solution above we'll have 0001 0001 _ 0110) -> 0x0116
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <usart2_init+0x178>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4a21      	ldr	r2, [pc, #132]	@ (800139c <usart2_init+0x178>)
 8001318:	f043 0323 	orr.w	r3, r3, #35	@ 0x23
 800131c:	6093      	str	r3, [r2, #8]
	USART2->CR1 &= ~(1 << 15);		// OVER8 = 0 //46 yung 16mhz 230400 baud
 800131e:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <usart2_init+0x178>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4a1e      	ldr	r2, [pc, #120]	@ (800139c <usart2_init+0x178>)
 8001324:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001328:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <usart2_init+0x178>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <usart2_init+0x178>)
 8001330:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001334:	6113      	str	r3, [r2, #16]
	USART2->CR1 &= ~(1 << 10);		// No parity
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <usart2_init+0x178>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <usart2_init+0x178>)
 800133c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001340:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 * 
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART2->CR2 &= ~(1 << 11);
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <usart2_init+0x178>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <usart2_init+0x178>)
 8001348:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800134c:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 * 
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART2->CR1 &= ~(1 << 12);
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <usart2_init+0x178>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <usart2_init+0x178>)
 8001354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001358:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 * 
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART2->CR3 &= ~(0b11 << 8);
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <usart2_init+0x178>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <usart2_init+0x178>)
 8001360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001364:	6153      	str	r3, [r2, #20]
	 * 
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */
	NVIC->IP[38] = (3 << 4);
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <usart2_init+0x17c>)
 8001368:	2230      	movs	r2, #48	@ 0x30
 800136a:	f883 2326 	strb.w	r2, [r3, #806]	@ 0x326
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 38 in the NVIC table would be at I{S/C}ER[1][6:6].
	 */
	NVIC->ISER[1] = (1 << 6);	// Note: Writing '0' is a no-op
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <usart2_init+0x17c>)
 8001370:	2240      	movs	r2, #64	@ 0x40
 8001372:	605a      	str	r2, [r3, #4]
	
	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART2->CR1 |= (0b1111 << 2);
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <usart2_init+0x178>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a08      	ldr	r2, [pc, #32]	@ (800139c <usart2_init+0x178>)
 800137a:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800137e:	60d3      	str	r3, [r2, #12]
	return;
 8001380:	bf00      	nop
}
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000008c 	.word	0x2000008c
 8001388:	20000090 	.word	0x20000090
 800138c:	20000094 	.word	0x20000094
 8001390:	20000098 	.word	0x20000098
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40004400 	.word	0x40004400
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <USART1_IRQHandler>:
static volatile unsigned int idx_rxf_11 = 0;
static volatile unsigned int idx_rxf_21 = 0;
static volatile unsigned int ctr_rxf1 = 0;
static volatile struct usart1_rx_event fifo_rx1[RXFIFO_LEN1];
void USART1_IRQHandler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */

	unsigned int val_sr1 = USART1->SR; // val_sr contains the configuration of status register
 80013aa:	4b50      	ldr	r3, [pc, #320]	@ (80014ec <USART1_IRQHandler+0x148>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr1 = USART1->DR; // val_dr contains the configuration of data register
 80013b0:	4b4e      	ldr	r3, [pc, #312]	@ (80014ec <USART1_IRQHandler+0x148>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60bb      	str	r3, [r7, #8]

	struct usart1_rx_event evt = {
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */

	if (val_sr1 & (1 << 5)) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d036      	beq.n	8001432 <USART1_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set or bit 5 of SR is 1). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr1 & 0xff); // puts data (lower 8 bits of DR) into the character attribute of evt
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	717b      	strb	r3, [r7, #5]
		
		// Parity errors can only be detected here.
		if (val_sr1 & (1 << 1)) {
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d015      	beq.n	8001410 <USART1_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr1 == 0 ) {
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10e      	bne.n	8001408 <USART1_IRQHandler+0x64>
				//if data register is empty
				evt.is_break = 1;
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 80013f2:	797b      	ldrb	r3, [r7, #5]
 80013f4:	f36f 03c3 	bfc	r3, #3, #1
 80013f8:	717b      	strb	r3, [r7, #5]
				USART1->CR1 &= ~(1 << 5); //inhibits interrupt because there is no data yet
 80013fa:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <USART1_IRQHandler+0x148>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	4a3b      	ldr	r2, [pc, #236]	@ (80014ec <USART1_IRQHandler+0x148>)
 8001400:	f023 0320 	bic.w	r3, r3, #32
 8001404:	60d3      	str	r3, [r2, #12]
 8001406:	e003      	b.n	8001410 <USART1_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	717b      	strb	r3, [r7, #5]
			}
		}
		
		if (val_sr1 & (1 << 0)) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <USART1_IRQHandler+0x8e>
			// Parity error detected (PE bit 0 of SR is set)
			evt.err_parity = 1;
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8001422:	797b      	ldrb	r3, [r7, #5]
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	f36f 03c3 	bfc	r3, #3, #1
 8001430:	717b      	strb	r3, [r7, #5]
	
	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr1 & (1 << 4)) {
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <USART1_IRQHandler+0xb4>
		/*
		 * IDLE line is detected bit 4 is 1
		 * 
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 800143c:	797b      	ldrb	r3, [r7, #5]
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	717b      	strb	r3, [r7, #5]
		// set bit 5 RXNEIE to 1
		USART1->CR1 |= (1 << 5); // interrupt is generated whenever read data register is not empty and is ready to be read i.e RXNE bit 5 = 1
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <USART1_IRQHandler+0x148>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <USART1_IRQHandler+0x148>)
 8001452:	f043 0320 	orr.w	r3, r3, #32
 8001456:	60d3      	str	r3, [r2, #12]
	}
	
	// Put it into the RX FIFO queue
	if (evt.valid) {
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d018      	beq.n	8001496 <USART1_IRQHandler+0xf2>
		fifo_rx1[idx_rxf_11++] = evt; //stores evt at fifo_rx buffer at index 0 then increments indx by 1
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <USART1_IRQHandler+0x14c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4921      	ldr	r1, [pc, #132]	@ (80014f0 <USART1_IRQHandler+0x14c>)
 800146c:	600a      	str	r2, [r1, #0]
 800146e:	4921      	ldr	r1, [pc, #132]	@ (80014f4 <USART1_IRQHandler+0x150>)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_11 >= RXFIFO_LEN1)
 8001476:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <USART1_IRQHandler+0x14c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b3f      	cmp	r3, #63	@ 0x3f
 800147c:	d902      	bls.n	8001484 <USART1_IRQHandler+0xe0>
			idx_rxf_11 = 0; // meaning buffer is full
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <USART1_IRQHandler+0x14c>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
		if (ctr_rxf1 < RXFIFO_LEN1)
 8001484:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <USART1_IRQHandler+0x154>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b3f      	cmp	r3, #63	@ 0x3f
 800148a:	d804      	bhi.n	8001496 <USART1_IRQHandler+0xf2>
			++ctr_rxf1; // increments counter for receiveing buffer by 1 if buffer is not full
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <USART1_IRQHandler+0x154>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <USART1_IRQHandler+0x154>)
 8001494:	6013      	str	r3, [r2, #0]
	
	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr1 & (1 << 7)) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01e      	beq.n	80014de <USART1_IRQHandler+0x13a>
		 * Because TXE bit 7 is only cleared by writing to the USART2_DR
		 * register i.e. not empty, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len1 > 0) {
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <USART1_IRQHandler+0x158>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <USART1_IRQHandler+0x122>
			// Queue not empty
			USART1->DR = *(fifo_tx_buf1++); //just iterates through the contents of the transmitter buffer
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <USART1_IRQHandler+0x15c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	4914      	ldr	r1, [pc, #80]	@ (8001500 <USART1_IRQHandler+0x15c>)
 80014b0:	600a      	str	r2, [r1, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <USART1_IRQHandler+0x148>)
 80014b8:	605a      	str	r2, [r3, #4]
			--fifo_tx_len1; //subtracts the length of buffer
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <USART1_IRQHandler+0x158>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <USART1_IRQHandler+0x158>)
 80014c2:	6013      	str	r3, [r2, #0]
			USART1->CR1 &= ~(1 << 7); //disable interrupt
			fifo_tx_len1 = 0;
			fifo_tx_buf1 = 0;
		}
	}
}
 80014c4:	e00b      	b.n	80014de <USART1_IRQHandler+0x13a>
			USART1->CR1 &= ~(1 << 7); //disable interrupt
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <USART1_IRQHandler+0x148>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <USART1_IRQHandler+0x148>)
 80014cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014d0:	60d3      	str	r3, [r2, #12]
			fifo_tx_len1 = 0;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <USART1_IRQHandler+0x158>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			fifo_tx_buf1 = 0;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <USART1_IRQHandler+0x15c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40011000 	.word	0x40011000
 80014f0:	200001a0 	.word	0x200001a0
 80014f4:	200001ac 	.word	0x200001ac
 80014f8:	200001a8 	.word	0x200001a8
 80014fc:	2000019c 	.word	0x2000019c
 8001500:	20000198 	.word	0x20000198

08001504 <usart1_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART1
void usart1_init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_11 = 0;
 8001508:	4b56      	ldr	r3, [pc, #344]	@ (8001664 <usart1_init+0x160>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
	idx_rxf_21 = 0;
 800150e:	4b56      	ldr	r3, [pc, #344]	@ (8001668 <usart1_init+0x164>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	ctr_rxf1 = 0;
 8001514:	4b55      	ldr	r3, [pc, #340]	@ (800166c <usart1_init+0x168>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	memset(fifo_rx1, 0, sizeof(fifo_rx1)); //fills a block with 0, starting address, value, and size of the memory block to be filled i.e. this initializes the buffer
 800151a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151e:	2100      	movs	r1, #0
 8001520:	4853      	ldr	r0, [pc, #332]	@ (8001670 <usart1_init+0x16c>)
 8001522:	f000 fdf6 	bl	8002112 <memset>
	
	// Configure the GPIO first before configuring the USART.
	
	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA10 & PA9
 8001526:	4b53      	ldr	r3, [pc, #332]	@ (8001674 <usart1_init+0x170>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a52      	ldr	r2, [pc, #328]	@ (8001674 <usart1_init+0x170>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
	
	GPIOA->MODER &= ~(0b11 << 20);	// Set PA10 as input...
 8001532:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <usart1_init+0x174>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a50      	ldr	r2, [pc, #320]	@ (8001678 <usart1_init+0x174>)
 8001538:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800153c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 20);	// ... then set it as alternate function.
 800153e:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <usart1_init+0x174>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a4d      	ldr	r2, [pc, #308]	@ (8001678 <usart1_init+0x174>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001548:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 18);	// Set PA9 as input...
 800154a:	4b4b      	ldr	r3, [pc, #300]	@ (8001678 <usart1_init+0x174>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a4a      	ldr	r2, [pc, #296]	@ (8001678 <usart1_init+0x174>)
 8001550:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001554:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 18);	// ... then set it as alternate function.
 8001556:	4b48      	ldr	r3, [pc, #288]	@ (8001678 <usart1_init+0x174>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a47      	ldr	r2, [pc, #284]	@ (8001678 <usart1_init+0x174>)
 800155c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001560:	6013      	str	r3, [r2, #0]
	 * 
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 9);	// PA9 = push-pull output
 8001562:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <usart1_init+0x174>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a44      	ldr	r2, [pc, #272]	@ (8001678 <usart1_init+0x174>)
 8001568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800156c:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 18);	// High-speed mode
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <usart1_init+0x174>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4a41      	ldr	r2, [pc, #260]	@ (8001678 <usart1_init+0x174>)
 8001574:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8001578:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 * 
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 20);
 800157a:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <usart1_init+0x174>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	4a3e      	ldr	r2, [pc, #248]	@ (8001678 <usart1_init+0x174>)
 8001580:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001584:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 20);
 8001586:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <usart1_init+0x174>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4a3b      	ldr	r2, [pc, #236]	@ (8001678 <usart1_init+0x174>)
 800158c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001590:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 * 
	 * USART1_TX = AF07 @ PA9
	 * USART1_RX = AF07 @ PA10
	 */
	GPIOA->AFR[1] &= ~(0x00000FF0);
 8001592:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <usart1_init+0x174>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	4a38      	ldr	r2, [pc, #224]	@ (8001678 <usart1_init+0x174>)
 8001598:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800159c:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (0x00000770);
 800159e:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <usart1_init+0x174>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a2:	4a35      	ldr	r2, [pc, #212]	@ (8001678 <usart1_init+0x174>)
 80015a4:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80015a8:	6253      	str	r3, [r2, #36]	@ 0x24
	
	/////////////////////////////////////////////////////////////////////
	
	RCC->APB2ENR  |= (1 << 4);	// Enable USART1 peripheral clock enabled bit 17
 80015aa:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <usart1_init+0x170>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4a31      	ldr	r2, [pc, #196]	@ (8001674 <usart1_init+0x170>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2RSTR |= (1 << 4);	// Reset the whole peripheral resets usart 2
 80015b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <usart1_init+0x170>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001674 <usart1_init+0x170>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~(1 << 4);
 80015c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <usart1_init+0x170>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001674 <usart1_init+0x170>)
 80015c8:	f023 0310 	bic.w	r3, r3, #16
 80015cc:	6253      	str	r3, [r2, #36]	@ 0x24
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */

	 //pins 9 and 10 are in usart1 
	USART1->CR1 &= ~(0b11 << 2); //disable receiver
 80015ce:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <usart1_init+0x178>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <usart1_init+0x178>)
 80015d4:	f023 030c 	bic.w	r3, r3, #12
 80015d8:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |=  (1 << 13); // usart enable 
 80015da:	4b28      	ldr	r3, [pc, #160]	@ (800167c <usart1_init+0x178>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a27      	ldr	r2, [pc, #156]	@ (800167c <usart1_init+0x178>)
 80015e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015e4:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART1->BRR &= ~(0x0000FFFF);
 80015e6:	4b25      	ldr	r3, [pc, #148]	@ (800167c <usart1_init+0x178>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4a24      	ldr	r2, [pc, #144]	@ (800167c <usart1_init+0x178>)
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	6093      	str	r3, [r2, #8]
	USART1->BRR |=  (0x0000003F);
 80015f2:	4b22      	ldr	r3, [pc, #136]	@ (800167c <usart1_init+0x178>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4a21      	ldr	r2, [pc, #132]	@ (800167c <usart1_init+0x178>)
 80015f8:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80015fc:	6093      	str	r3, [r2, #8]
	USART1->CR1 &= ~(1 << 15);		// OVER8 = 0
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <usart1_init+0x178>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <usart1_init+0x178>)
 8001604:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001608:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <usart1_init+0x178>)
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <usart1_init+0x178>)
 8001610:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001614:	6113      	str	r3, [r2, #16]
	USART1->CR1 &= ~(1 << 10);		// No parity
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <usart1_init+0x178>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a18      	ldr	r2, [pc, #96]	@ (800167c <usart1_init+0x178>)
 800161c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001620:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 * 
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART1->CR2 &= ~(1 << 11);
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <usart1_init+0x178>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <usart1_init+0x178>)
 8001628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800162c:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 * 
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART1->CR1 &= ~(1 << 12);
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <usart1_init+0x178>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <usart1_init+0x178>)
 8001634:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001638:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 * 
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART1->CR3 &= ~(0b11 << 8);
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <usart1_init+0x178>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <usart1_init+0x178>)
 8001640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001644:	6153      	str	r3, [r2, #20]
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */

	NVIC->IP[37] = (3 << 4);
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <usart1_init+0x17c>)
 8001648:	2230      	movs	r2, #48	@ 0x30
 800164a:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 37 in the NVIC table would be at I{S/C}ER[1][5:5].
	 */
	NVIC->ISER[1] = (1 << 5);	// Note: Writing '0' is a no-op
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <usart1_init+0x17c>)
 8001650:	2220      	movs	r2, #32
 8001652:	605a      	str	r2, [r3, #4]
	
	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART1->CR1 |= (0b1111 << 2);
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <usart1_init+0x178>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4a08      	ldr	r2, [pc, #32]	@ (800167c <usart1_init+0x178>)
 800165a:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800165e:	60d3      	str	r3, [r2, #12]
	return;
 8001660:	bf00      	nop
}
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200001a0 	.word	0x200001a0
 8001668:	200001a4 	.word	0x200001a4
 800166c:	200001a8 	.word	0x200001a8
 8001670:	200001ac 	.word	0x200001ac
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000
 800167c:	40011000 	.word	0x40011000
 8001680:	e000e100 	.word	0xe000e100

08001684 <usart1_rx_get_event>:
	return;
}

// Get an event from the RX queue
bool usart1_rx_get_event(struct usart1_rx_event *evt)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if (ctr_rxf1 > 0 && evt != 0) {
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <usart1_rx_get_event+0x54>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01a      	beq.n	80016ca <usart1_rx_get_event+0x46>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d017      	beq.n	80016ca <usart1_rx_get_event+0x46>
		*evt = fifo_rx1[idx_rxf_21++];
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <usart1_rx_get_event+0x58>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	490e      	ldr	r1, [pc, #56]	@ (80016dc <usart1_rx_get_event+0x58>)
 80016a2:	600a      	str	r2, [r1, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	490e      	ldr	r1, [pc, #56]	@ (80016e0 <usart1_rx_get_event+0x5c>)
 80016a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016ac:	6013      	str	r3, [r2, #0]
		--ctr_rxf1;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <usart1_rx_get_event+0x54>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <usart1_rx_get_event+0x54>)
 80016b6:	6013      	str	r3, [r2, #0]
		if (idx_rxf_21 >= RXFIFO_LEN1)
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <usart1_rx_get_event+0x58>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80016be:	d902      	bls.n	80016c6 <usart1_rx_get_event+0x42>
			idx_rxf_21 = 0;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <usart1_rx_get_event+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
		return true;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <usart1_rx_get_event+0x48>
	} else {
		return false;
 80016ca:	2300      	movs	r3, #0
	}
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200001a8 	.word	0x200001a8
 80016dc:	200001a4 	.word	0x200001a4
 80016e0:	200001ac 	.word	0x200001ac

080016e4 <USART6_IRQHandler>:
static volatile unsigned int idx_rxf_16 = 0;
static volatile unsigned int idx_rxf_26 = 0;
static volatile unsigned int ctr_rxf6 = 0;
static volatile struct usart6_rx_event fifo_rx6[RXFIFO_LEN6];
void USART6_IRQHandler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */

	unsigned int val_sr6 = USART6->SR; // val_sr contains the configuration of status register
 80016ea:	4b50      	ldr	r3, [pc, #320]	@ (800182c <USART6_IRQHandler+0x148>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr6 = USART6->DR; // val_dr contains the configuration of data register
 80016f0:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <USART6_IRQHandler+0x148>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	60bb      	str	r3, [r7, #8]

	struct usart6_rx_event evt = {
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */

	if (val_sr6 & (1 << 5)) {
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d036      	beq.n	8001772 <USART6_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set or bit 5 of SR is 1). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr6 & 0xff); // puts data (lower 8 bits of DR) into the character attribute of evt
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	717b      	strb	r3, [r7, #5]

		// Parity errors can only be detected here.
		if (val_sr6 & (1 << 1)) {
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <USART6_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr6 == 0 ) {
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10e      	bne.n	8001748 <USART6_IRQHandler+0x64>
				//if data register is empty
				evt.is_break = 1;
 800172a:	797b      	ldrb	r3, [r7, #5]
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	f36f 03c3 	bfc	r3, #3, #1
 8001738:	717b      	strb	r3, [r7, #5]
				USART6->CR1 &= ~(1 << 5); //inhibits interrupt because there is no data yet
 800173a:	4b3c      	ldr	r3, [pc, #240]	@ (800182c <USART6_IRQHandler+0x148>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4a3b      	ldr	r2, [pc, #236]	@ (800182c <USART6_IRQHandler+0x148>)
 8001740:	f023 0320 	bic.w	r3, r3, #32
 8001744:	60d3      	str	r3, [r2, #12]
 8001746:	e003      	b.n	8001750 <USART6_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8001748:	797b      	ldrb	r3, [r7, #5]
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	717b      	strb	r3, [r7, #5]
			}
		}

		if (val_sr6 & (1 << 0)) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <USART6_IRQHandler+0x8e>
			// Parity error detected (PE bit 0 of SR is set)
			evt.err_parity = 1;
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8001762:	797b      	ldrb	r3, [r7, #5]
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 800176a:	797b      	ldrb	r3, [r7, #5]
 800176c:	f36f 03c3 	bfc	r3, #3, #1
 8001770:	717b      	strb	r3, [r7, #5]

	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr6 & (1 << 4)) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00d      	beq.n	8001798 <USART6_IRQHandler+0xb4>
		/*
		 * IDLE line is detected bit 4 is 1
		 *
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 800177c:	797b      	ldrb	r3, [r7, #5]
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8001784:	797b      	ldrb	r3, [r7, #5]
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	717b      	strb	r3, [r7, #5]
		// set bit 5 RXNEIE to 1
		USART6->CR1 |= (1 << 5); // interrupt is generated whenever read data register is not empty and is ready to be read i.e RXNE bit 5 = 1
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <USART6_IRQHandler+0x148>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a26      	ldr	r2, [pc, #152]	@ (800182c <USART6_IRQHandler+0x148>)
 8001792:	f043 0320 	orr.w	r3, r3, #32
 8001796:	60d3      	str	r3, [r2, #12]
	}

	// Put it into the RX FIFO queue
	if (evt.valid) {
 8001798:	797b      	ldrb	r3, [r7, #5]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d018      	beq.n	80017d6 <USART6_IRQHandler+0xf2>
		fifo_rx6[idx_rxf_16++] = evt; //stores evt at fifo_rx buffer at index 0 then increments indx by 1
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <USART6_IRQHandler+0x14c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4921      	ldr	r1, [pc, #132]	@ (8001830 <USART6_IRQHandler+0x14c>)
 80017ac:	600a      	str	r2, [r1, #0]
 80017ae:	4921      	ldr	r1, [pc, #132]	@ (8001834 <USART6_IRQHandler+0x150>)
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_16 >= RXFIFO_LEN6)
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <USART6_IRQHandler+0x14c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80017bc:	d902      	bls.n	80017c4 <USART6_IRQHandler+0xe0>
			idx_rxf_16 = 0; // meaning buffer is full
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <USART6_IRQHandler+0x14c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		if (ctr_rxf6 < RXFIFO_LEN6)
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <USART6_IRQHandler+0x154>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ca:	d804      	bhi.n	80017d6 <USART6_IRQHandler+0xf2>
			++ctr_rxf6; // increments counter for receiveing buffer by 1 if buffer is not full
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <USART6_IRQHandler+0x154>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a19      	ldr	r2, [pc, #100]	@ (8001838 <USART6_IRQHandler+0x154>)
 80017d4:	6013      	str	r3, [r2, #0]

	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr6 & (1 << 7)) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01e      	beq.n	800181e <USART6_IRQHandler+0x13a>
		 * Because TXE bit 7 is only cleared by writing to the USART2_DR
		 * register i.e. not empty, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len6 > 0) {
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <USART6_IRQHandler+0x158>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <USART6_IRQHandler+0x122>
			// Queue not empty
			USART6->DR = *(fifo_tx_buf6++); //just iterates through the contents of the transmitter buffer
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <USART6_IRQHandler+0x15c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4914      	ldr	r1, [pc, #80]	@ (8001840 <USART6_IRQHandler+0x15c>)
 80017f0:	600a      	str	r2, [r1, #0]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <USART6_IRQHandler+0x148>)
 80017f8:	605a      	str	r2, [r3, #4]
			--fifo_tx_len6; //subtracts the length of buffer
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <USART6_IRQHandler+0x158>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <USART6_IRQHandler+0x158>)
 8001802:	6013      	str	r3, [r2, #0]
			USART6->CR1 &= ~(1 << 7); //disable interrupt
			fifo_tx_len6 = 0;
			fifo_tx_buf6 = 0;
		}
	}
}
 8001804:	e00b      	b.n	800181e <USART6_IRQHandler+0x13a>
			USART6->CR1 &= ~(1 << 7); //disable interrupt
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <USART6_IRQHandler+0x148>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4a08      	ldr	r2, [pc, #32]	@ (800182c <USART6_IRQHandler+0x148>)
 800180c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001810:	60d3      	str	r3, [r2, #12]
			fifo_tx_len6 = 0;
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <USART6_IRQHandler+0x158>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
			fifo_tx_buf6 = 0;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <USART6_IRQHandler+0x15c>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40011400 	.word	0x40011400
 8001830:	200002b4 	.word	0x200002b4
 8001834:	200002c0 	.word	0x200002c0
 8001838:	200002bc 	.word	0x200002bc
 800183c:	200002b0 	.word	0x200002b0
 8001840:	200002ac 	.word	0x200002ac

08001844 <usart6_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART1
void usart6_init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_16 = 0;
 8001848:	4b56      	ldr	r3, [pc, #344]	@ (80019a4 <usart6_init+0x160>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	idx_rxf_26 = 0;
 800184e:	4b56      	ldr	r3, [pc, #344]	@ (80019a8 <usart6_init+0x164>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
	ctr_rxf6 =0;
 8001854:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <usart6_init+0x168>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
	memset(fifo_rx6, 0, sizeof(fifo_rx6)); //fills a block with 0, starting address, value, and size of the memory block to be filled i.e. this initializes the buffer
 800185a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185e:	2100      	movs	r1, #0
 8001860:	4853      	ldr	r0, [pc, #332]	@ (80019b0 <usart6_init+0x16c>)
 8001862:	f000 fc56 	bl	8002112 <memset>

	// Configure the GPIO first before configuring the USART.

	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA10 & PA9
 8001866:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <usart6_init+0x170>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <usart6_init+0x170>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(0b11 << 22);	// Set PA11 as input...
 8001872:	4b51      	ldr	r3, [pc, #324]	@ (80019b8 <usart6_init+0x174>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <usart6_init+0x174>)
 8001878:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800187c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 22);	// ... then set it as alternate function.
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <usart6_init+0x174>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <usart6_init+0x174>)
 8001884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001888:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 24);	// Set PA12 as input ...
 800188a:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <usart6_init+0x174>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <usart6_init+0x174>)
 8001890:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001894:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 24);	// ... then set it as alternate function.
 8001896:	4b48      	ldr	r3, [pc, #288]	@ (80019b8 <usart6_init+0x174>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a47      	ldr	r2, [pc, #284]	@ (80019b8 <usart6_init+0x174>)
 800189c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	6013      	str	r3, [r2, #0]
	 *
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 11);	// PA9 = push-pull output
 80018a2:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <usart6_init+0x174>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a44      	ldr	r2, [pc, #272]	@ (80019b8 <usart6_init+0x174>)
 80018a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018ac:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 22);	// High-speed mode
 80018ae:	4b42      	ldr	r3, [pc, #264]	@ (80019b8 <usart6_init+0x174>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4a41      	ldr	r2, [pc, #260]	@ (80019b8 <usart6_init+0x174>)
 80018b4:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80018b8:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 *
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 24);
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <usart6_init+0x174>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4a3e      	ldr	r2, [pc, #248]	@ (80019b8 <usart6_init+0x174>)
 80018c0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80018c4:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 24);
 80018c6:	4b3c      	ldr	r3, [pc, #240]	@ (80019b8 <usart6_init+0x174>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4a3b      	ldr	r2, [pc, #236]	@ (80019b8 <usart6_init+0x174>)
 80018cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 *
	 * USART6_TX = AF08 @ PA11
	 * USART6_RX = AF08 @ PA12
	 */
	GPIOA->AFR[1] &= ~(0x000FF000);  // Clear bits for PA11
 80018d2:	4b39      	ldr	r3, [pc, #228]	@ (80019b8 <usart6_init+0x174>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	4a38      	ldr	r2, [pc, #224]	@ (80019b8 <usart6_init+0x174>)
 80018d8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 80018dc:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (0x00088000);  // Set AF08 for PA11
 80018de:	4b36      	ldr	r3, [pc, #216]	@ (80019b8 <usart6_init+0x174>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	4a35      	ldr	r2, [pc, #212]	@ (80019b8 <usart6_init+0x174>)
 80018e4:	f443 2308 	orr.w	r3, r3, #557056	@ 0x88000
 80018e8:	6253      	str	r3, [r2, #36]	@ 0x24
	/////////////////////////////////////////////////////////////////////

	RCC->APB2ENR |= (1 << 5);   // Enable USART6 peripheral clock enabled bit 5
 80018ea:	4b32      	ldr	r3, [pc, #200]	@ (80019b4 <usart6_init+0x170>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	4a31      	ldr	r2, [pc, #196]	@ (80019b4 <usart6_init+0x170>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2RSTR |= (1 << 5);	// Reset the whole peripheral resets usart 2
 80018f6:	4b2f      	ldr	r3, [pc, #188]	@ (80019b4 <usart6_init+0x170>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	4a2e      	ldr	r2, [pc, #184]	@ (80019b4 <usart6_init+0x170>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~(1 << 5);
 8001902:	4b2c      	ldr	r3, [pc, #176]	@ (80019b4 <usart6_init+0x170>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <usart6_init+0x170>)
 8001908:	f023 0320 	bic.w	r3, r3, #32
 800190c:	6253      	str	r3, [r2, #36]	@ 0x24
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */

	 //pins 9 and 10 are in usart1
	USART6->CR1 &= ~(0b11 << 2); //disable receiver
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <usart6_init+0x178>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <usart6_init+0x178>)
 8001914:	f023 030c 	bic.w	r3, r3, #12
 8001918:	60d3      	str	r3, [r2, #12]
	USART6->CR1 |=  (1 << 13); // usart enable
 800191a:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <usart6_init+0x178>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <usart6_init+0x178>)
 8001920:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001924:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART6->BRR &= ~(0x0000FFFF);
 8001926:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <usart6_init+0x178>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4a24      	ldr	r2, [pc, #144]	@ (80019bc <usart6_init+0x178>)
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	6093      	str	r3, [r2, #8]
	USART6->BRR |=  (0x0000008B);   //115200 8bits basta same lang
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <usart6_init+0x178>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <usart6_init+0x178>)
 8001938:	f043 038b 	orr.w	r3, r3, #139	@ 0x8b
 800193c:	6093      	str	r3, [r2, #8]
	USART6->CR1 &= ~(1 << 15);		// OVER8 = 0
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <usart6_init+0x178>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <usart6_init+0x178>)
 8001944:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001948:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <usart6_init+0x178>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <usart6_init+0x178>)
 8001950:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001954:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 10);		// No parity
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <usart6_init+0x178>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <usart6_init+0x178>)
 800195c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001960:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 *
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART6->CR2 &= ~(1 << 11);
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <usart6_init+0x178>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <usart6_init+0x178>)
 8001968:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800196c:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 *
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART6->CR1 &= ~(1 << 12);
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <usart6_init+0x178>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <usart6_init+0x178>)
 8001974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001978:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 *
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART6->CR3 &= ~(0b11 << 8);
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <usart6_init+0x178>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <usart6_init+0x178>)
 8001980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001984:	6153      	str	r3, [r2, #20]
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */

	NVIC->IP[71] = (3 << 4);
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <usart6_init+0x17c>)
 8001988:	2230      	movs	r2, #48	@ 0x30
 800198a:	f883 2347 	strb.w	r2, [r3, #839]	@ 0x347
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 71 in the NVIC table would be at I{S/C}ER[2][7:7].
	 */
	NVIC->ISER[2] = (1 << 7);   // Note: Writing '0' is a no-op
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <usart6_init+0x17c>)
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	609a      	str	r2, [r3, #8]

	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART6->CR1 |= (0b1111 << 2);
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <usart6_init+0x178>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <usart6_init+0x178>)
 800199a:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800199e:	60d3      	str	r3, [r2, #12]
	return;
 80019a0:	bf00      	nop
}
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200002b4 	.word	0x200002b4
 80019a8:	200002b8 	.word	0x200002b8
 80019ac:	200002bc 	.word	0x200002bc
 80019b0:	200002c0 	.word	0x200002c0
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40011400 	.word	0x40011400
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <usart6_rx_get_event>:
	return;
}

// Get an event from the RX queue
bool usart6_rx_get_event(struct usart6_rx_event *evt)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	if (ctr_rxf6 > 0 && evt != 0) {
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <usart6_rx_get_event+0x54>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01a      	beq.n	8001a0a <usart6_rx_get_event+0x46>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d017      	beq.n	8001a0a <usart6_rx_get_event+0x46>
		*evt = fifo_rx6[idx_rxf_26++];
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <usart6_rx_get_event+0x58>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	490e      	ldr	r1, [pc, #56]	@ (8001a1c <usart6_rx_get_event+0x58>)
 80019e2:	600a      	str	r2, [r1, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	490e      	ldr	r1, [pc, #56]	@ (8001a20 <usart6_rx_get_event+0x5c>)
 80019e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ec:	6013      	str	r3, [r2, #0]
		--ctr_rxf6;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <usart6_rx_get_event+0x54>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <usart6_rx_get_event+0x54>)
 80019f6:	6013      	str	r3, [r2, #0]
		if (idx_rxf_26 >= RXFIFO_LEN6)
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <usart6_rx_get_event+0x58>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80019fe:	d902      	bls.n	8001a06 <usart6_rx_get_event+0x42>
			idx_rxf_26 = 0;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <usart6_rx_get_event+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
		return true;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <usart6_rx_get_event+0x48>
	} else {
		return false;
 8001a0a:	2300      	movs	r3, #0
	}
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	200002bc 	.word	0x200002bc
 8001a1c:	200002b8 	.word	0x200002b8
 8001a20:	200002c0 	.word	0x200002c0

08001a24 <usart6_tx_is_busy>:

// Enqueue a buffer to be transmitted
bool usart6_tx_is_busy(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	return (fifo_tx_buf6 != 0 || fifo_tx_len6 > 0);
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <usart6_tx_is_busy+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <usart6_tx_is_busy+0x14>
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <usart6_tx_is_busy+0x30>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <usart6_tx_is_busy+0x18>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <usart6_tx_is_busy+0x1a>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200002ac 	.word	0x200002ac
 8001a54:	200002b0 	.word	0x200002b0

08001a58 <usart6_tx_send>:
bool usart6_tx_send(const char *buf, unsigned int len)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	if (fifo_tx_buf6 != 0 || fifo_tx_len6 > 0)
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <usart6_tx_send+0x44>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <usart6_tx_send+0x1a>
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <usart6_tx_send+0x48>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <usart6_tx_send+0x1e>
		return false;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e00c      	b.n	8001a90 <usart6_tx_send+0x38>

	fifo_tx_buf6 = buf;
 8001a76:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <usart6_tx_send+0x44>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6013      	str	r3, [r2, #0]
	fifo_tx_len6 = len;
 8001a7c:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <usart6_tx_send+0x48>)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6013      	str	r3, [r2, #0]
	USART6->CR1 |= (1 << 7);
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <usart6_tx_send+0x4c>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <usart6_tx_send+0x4c>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8c:	60d3      	str	r3, [r2, #12]
	return true;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	200002ac 	.word	0x200002ac
 8001aa0:	200002b0 	.word	0x200002b0
 8001aa4:	40011400 	.word	0x40011400

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aac:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aae:	490e      	ldr	r1, [pc, #56]	@ (8001ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8001af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad2:	f7ff fae5 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f000 fd8b 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7fe fdb3 	bl	8000644 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001aec:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 8001af0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001af4:	2000050c 	.word	0x2000050c

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>

08001afa <atoi>:
 8001afa:	220a      	movs	r2, #10
 8001afc:	2100      	movs	r1, #0
 8001afe:	f000 b94b 	b.w	8001d98 <strtol>
	...

08001b04 <exit>:
 8001b04:	b508      	push	{r3, lr}
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <exit+0x1c>)
 8001b08:	4604      	mov	r4, r0
 8001b0a:	b113      	cbz	r3, 8001b12 <exit+0xe>
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <exit+0x20>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b103      	cbz	r3, 8001b1a <exit+0x16>
 8001b18:	4798      	blx	r3
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fa2c 	bl	8000f78 <_exit>
 8001b20:	00000000 	.word	0x00000000
 8001b24:	20000500 	.word	0x20000500

08001b28 <malloc>:
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <malloc+0xc>)
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f000 b82d 	b.w	8001b8c <_malloc_r>
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c

08001b38 <free>:
 8001b38:	4b02      	ldr	r3, [pc, #8]	@ (8001b44 <free+0xc>)
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f000 bd7f 	b.w	8002640 <_free_r>
 8001b42:	bf00      	nop
 8001b44:	2000000c 	.word	0x2000000c

08001b48 <sbrk_aligned>:
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8001b88 <sbrk_aligned+0x40>)
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	6831      	ldr	r1, [r6, #0]
 8001b50:	4605      	mov	r5, r0
 8001b52:	b911      	cbnz	r1, 8001b5a <sbrk_aligned+0x12>
 8001b54:	f000 fd24 	bl	80025a0 <_sbrk_r>
 8001b58:	6030      	str	r0, [r6, #0]
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	f000 fd1f 	bl	80025a0 <_sbrk_r>
 8001b62:	1c43      	adds	r3, r0, #1
 8001b64:	d103      	bne.n	8001b6e <sbrk_aligned+0x26>
 8001b66:	f04f 34ff 	mov.w	r4, #4294967295
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
 8001b6e:	1cc4      	adds	r4, r0, #3
 8001b70:	f024 0403 	bic.w	r4, r4, #3
 8001b74:	42a0      	cmp	r0, r4
 8001b76:	d0f8      	beq.n	8001b6a <sbrk_aligned+0x22>
 8001b78:	1a21      	subs	r1, r4, r0
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f000 fd10 	bl	80025a0 <_sbrk_r>
 8001b80:	3001      	adds	r0, #1
 8001b82:	d1f2      	bne.n	8001b6a <sbrk_aligned+0x22>
 8001b84:	e7ef      	b.n	8001b66 <sbrk_aligned+0x1e>
 8001b86:	bf00      	nop
 8001b88:	200003c0 	.word	0x200003c0

08001b8c <_malloc_r>:
 8001b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b90:	1ccd      	adds	r5, r1, #3
 8001b92:	f025 0503 	bic.w	r5, r5, #3
 8001b96:	3508      	adds	r5, #8
 8001b98:	2d0c      	cmp	r5, #12
 8001b9a:	bf38      	it	cc
 8001b9c:	250c      	movcc	r5, #12
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	db01      	blt.n	8001ba8 <_malloc_r+0x1c>
 8001ba4:	42a9      	cmp	r1, r5
 8001ba6:	d904      	bls.n	8001bb2 <_malloc_r+0x26>
 8001ba8:	230c      	movs	r3, #12
 8001baa:	6033      	str	r3, [r6, #0]
 8001bac:	2000      	movs	r0, #0
 8001bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c88 <_malloc_r+0xfc>
 8001bb6:	f000 f869 	bl	8001c8c <__malloc_lock>
 8001bba:	f8d8 3000 	ldr.w	r3, [r8]
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	bb44      	cbnz	r4, 8001c14 <_malloc_r+0x88>
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f7ff ffbf 	bl	8001b48 <sbrk_aligned>
 8001bca:	1c43      	adds	r3, r0, #1
 8001bcc:	4604      	mov	r4, r0
 8001bce:	d158      	bne.n	8001c82 <_malloc_r+0xf6>
 8001bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8001bd4:	4627      	mov	r7, r4
 8001bd6:	2f00      	cmp	r7, #0
 8001bd8:	d143      	bne.n	8001c62 <_malloc_r+0xd6>
 8001bda:	2c00      	cmp	r4, #0
 8001bdc:	d04b      	beq.n	8001c76 <_malloc_r+0xea>
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	4639      	mov	r1, r7
 8001be2:	4630      	mov	r0, r6
 8001be4:	eb04 0903 	add.w	r9, r4, r3
 8001be8:	f000 fcda 	bl	80025a0 <_sbrk_r>
 8001bec:	4581      	cmp	r9, r0
 8001bee:	d142      	bne.n	8001c76 <_malloc_r+0xea>
 8001bf0:	6821      	ldr	r1, [r4, #0]
 8001bf2:	1a6d      	subs	r5, r5, r1
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f7ff ffa6 	bl	8001b48 <sbrk_aligned>
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	d03a      	beq.n	8001c76 <_malloc_r+0xea>
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	442b      	add	r3, r5
 8001c04:	6023      	str	r3, [r4, #0]
 8001c06:	f8d8 3000 	ldr.w	r3, [r8]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	bb62      	cbnz	r2, 8001c68 <_malloc_r+0xdc>
 8001c0e:	f8c8 7000 	str.w	r7, [r8]
 8001c12:	e00f      	b.n	8001c34 <_malloc_r+0xa8>
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	1b52      	subs	r2, r2, r5
 8001c18:	d420      	bmi.n	8001c5c <_malloc_r+0xd0>
 8001c1a:	2a0b      	cmp	r2, #11
 8001c1c:	d917      	bls.n	8001c4e <_malloc_r+0xc2>
 8001c1e:	1961      	adds	r1, r4, r5
 8001c20:	42a3      	cmp	r3, r4
 8001c22:	6025      	str	r5, [r4, #0]
 8001c24:	bf18      	it	ne
 8001c26:	6059      	strne	r1, [r3, #4]
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	bf08      	it	eq
 8001c2c:	f8c8 1000 	streq.w	r1, [r8]
 8001c30:	5162      	str	r2, [r4, r5]
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 f82f 	bl	8001c98 <__malloc_unlock>
 8001c3a:	f104 000b 	add.w	r0, r4, #11
 8001c3e:	1d23      	adds	r3, r4, #4
 8001c40:	f020 0007 	bic.w	r0, r0, #7
 8001c44:	1ac2      	subs	r2, r0, r3
 8001c46:	bf1c      	itt	ne
 8001c48:	1a1b      	subne	r3, r3, r0
 8001c4a:	50a3      	strne	r3, [r4, r2]
 8001c4c:	e7af      	b.n	8001bae <_malloc_r+0x22>
 8001c4e:	6862      	ldr	r2, [r4, #4]
 8001c50:	42a3      	cmp	r3, r4
 8001c52:	bf0c      	ite	eq
 8001c54:	f8c8 2000 	streq.w	r2, [r8]
 8001c58:	605a      	strne	r2, [r3, #4]
 8001c5a:	e7eb      	b.n	8001c34 <_malloc_r+0xa8>
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	6864      	ldr	r4, [r4, #4]
 8001c60:	e7ae      	b.n	8001bc0 <_malloc_r+0x34>
 8001c62:	463c      	mov	r4, r7
 8001c64:	687f      	ldr	r7, [r7, #4]
 8001c66:	e7b6      	b.n	8001bd6 <_malloc_r+0x4a>
 8001c68:	461a      	mov	r2, r3
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	42a3      	cmp	r3, r4
 8001c6e:	d1fb      	bne.n	8001c68 <_malloc_r+0xdc>
 8001c70:	2300      	movs	r3, #0
 8001c72:	6053      	str	r3, [r2, #4]
 8001c74:	e7de      	b.n	8001c34 <_malloc_r+0xa8>
 8001c76:	230c      	movs	r3, #12
 8001c78:	6033      	str	r3, [r6, #0]
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f000 f80c 	bl	8001c98 <__malloc_unlock>
 8001c80:	e794      	b.n	8001bac <_malloc_r+0x20>
 8001c82:	6005      	str	r5, [r0, #0]
 8001c84:	e7d6      	b.n	8001c34 <_malloc_r+0xa8>
 8001c86:	bf00      	nop
 8001c88:	200003c4 	.word	0x200003c4

08001c8c <__malloc_lock>:
 8001c8c:	4801      	ldr	r0, [pc, #4]	@ (8001c94 <__malloc_lock+0x8>)
 8001c8e:	f000 bcd4 	b.w	800263a <__retarget_lock_acquire_recursive>
 8001c92:	bf00      	nop
 8001c94:	20000508 	.word	0x20000508

08001c98 <__malloc_unlock>:
 8001c98:	4801      	ldr	r0, [pc, #4]	@ (8001ca0 <__malloc_unlock+0x8>)
 8001c9a:	f000 bccf 	b.w	800263c <__retarget_lock_release_recursive>
 8001c9e:	bf00      	nop
 8001ca0:	20000508 	.word	0x20000508

08001ca4 <_strtol_l.constprop.0>:
 8001ca4:	2b24      	cmp	r3, #36	@ 0x24
 8001ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001caa:	4686      	mov	lr, r0
 8001cac:	4690      	mov	r8, r2
 8001cae:	d801      	bhi.n	8001cb4 <_strtol_l.constprop.0+0x10>
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <_strtol_l.constprop.0+0x1e>
 8001cb4:	f000 fc96 	bl	80025e4 <__errno>
 8001cb8:	2316      	movs	r3, #22
 8001cba:	6003      	str	r3, [r0, #0]
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cc2:	4834      	ldr	r0, [pc, #208]	@ (8001d94 <_strtol_l.constprop.0+0xf0>)
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001ccc:	5d06      	ldrb	r6, [r0, r4]
 8001cce:	f016 0608 	ands.w	r6, r6, #8
 8001cd2:	d1f8      	bne.n	8001cc6 <_strtol_l.constprop.0+0x22>
 8001cd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8001cd6:	d12d      	bne.n	8001d34 <_strtol_l.constprop.0+0x90>
 8001cd8:	782c      	ldrb	r4, [r5, #0]
 8001cda:	2601      	movs	r6, #1
 8001cdc:	1c95      	adds	r5, r2, #2
 8001cde:	f033 0210 	bics.w	r2, r3, #16
 8001ce2:	d109      	bne.n	8001cf8 <_strtol_l.constprop.0+0x54>
 8001ce4:	2c30      	cmp	r4, #48	@ 0x30
 8001ce6:	d12a      	bne.n	8001d3e <_strtol_l.constprop.0+0x9a>
 8001ce8:	782a      	ldrb	r2, [r5, #0]
 8001cea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001cee:	2a58      	cmp	r2, #88	@ 0x58
 8001cf0:	d125      	bne.n	8001d3e <_strtol_l.constprop.0+0x9a>
 8001cf2:	786c      	ldrb	r4, [r5, #1]
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	3502      	adds	r5, #2
 8001cf8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001cfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001d00:	2200      	movs	r2, #0
 8001d02:	fbbc f9f3 	udiv	r9, ip, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	fb03 ca19 	mls	sl, r3, r9, ip
 8001d0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001d10:	2f09      	cmp	r7, #9
 8001d12:	d81b      	bhi.n	8001d4c <_strtol_l.constprop.0+0xa8>
 8001d14:	463c      	mov	r4, r7
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	dd27      	ble.n	8001d6a <_strtol_l.constprop.0+0xc6>
 8001d1a:	1c57      	adds	r7, r2, #1
 8001d1c:	d007      	beq.n	8001d2e <_strtol_l.constprop.0+0x8a>
 8001d1e:	4581      	cmp	r9, r0
 8001d20:	d320      	bcc.n	8001d64 <_strtol_l.constprop.0+0xc0>
 8001d22:	d101      	bne.n	8001d28 <_strtol_l.constprop.0+0x84>
 8001d24:	45a2      	cmp	sl, r4
 8001d26:	db1d      	blt.n	8001d64 <_strtol_l.constprop.0+0xc0>
 8001d28:	fb00 4003 	mla	r0, r0, r3, r4
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001d32:	e7eb      	b.n	8001d0c <_strtol_l.constprop.0+0x68>
 8001d34:	2c2b      	cmp	r4, #43	@ 0x2b
 8001d36:	bf04      	itt	eq
 8001d38:	782c      	ldrbeq	r4, [r5, #0]
 8001d3a:	1c95      	addeq	r5, r2, #2
 8001d3c:	e7cf      	b.n	8001cde <_strtol_l.constprop.0+0x3a>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1da      	bne.n	8001cf8 <_strtol_l.constprop.0+0x54>
 8001d42:	2c30      	cmp	r4, #48	@ 0x30
 8001d44:	bf0c      	ite	eq
 8001d46:	2308      	moveq	r3, #8
 8001d48:	230a      	movne	r3, #10
 8001d4a:	e7d5      	b.n	8001cf8 <_strtol_l.constprop.0+0x54>
 8001d4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001d50:	2f19      	cmp	r7, #25
 8001d52:	d801      	bhi.n	8001d58 <_strtol_l.constprop.0+0xb4>
 8001d54:	3c37      	subs	r4, #55	@ 0x37
 8001d56:	e7de      	b.n	8001d16 <_strtol_l.constprop.0+0x72>
 8001d58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001d5c:	2f19      	cmp	r7, #25
 8001d5e:	d804      	bhi.n	8001d6a <_strtol_l.constprop.0+0xc6>
 8001d60:	3c57      	subs	r4, #87	@ 0x57
 8001d62:	e7d8      	b.n	8001d16 <_strtol_l.constprop.0+0x72>
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	e7e1      	b.n	8001d2e <_strtol_l.constprop.0+0x8a>
 8001d6a:	1c53      	adds	r3, r2, #1
 8001d6c:	d108      	bne.n	8001d80 <_strtol_l.constprop.0+0xdc>
 8001d6e:	2322      	movs	r3, #34	@ 0x22
 8001d70:	f8ce 3000 	str.w	r3, [lr]
 8001d74:	4660      	mov	r0, ip
 8001d76:	f1b8 0f00 	cmp.w	r8, #0
 8001d7a:	d0a0      	beq.n	8001cbe <_strtol_l.constprop.0+0x1a>
 8001d7c:	1e69      	subs	r1, r5, #1
 8001d7e:	e006      	b.n	8001d8e <_strtol_l.constprop.0+0xea>
 8001d80:	b106      	cbz	r6, 8001d84 <_strtol_l.constprop.0+0xe0>
 8001d82:	4240      	negs	r0, r0
 8001d84:	f1b8 0f00 	cmp.w	r8, #0
 8001d88:	d099      	beq.n	8001cbe <_strtol_l.constprop.0+0x1a>
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d1f6      	bne.n	8001d7c <_strtol_l.constprop.0+0xd8>
 8001d8e:	f8c8 1000 	str.w	r1, [r8]
 8001d92:	e794      	b.n	8001cbe <_strtol_l.constprop.0+0x1a>
 8001d94:	08003024 	.word	0x08003024

08001d98 <strtol>:
 8001d98:	4613      	mov	r3, r2
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	4601      	mov	r1, r0
 8001d9e:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <strtol+0x10>)
 8001da0:	6800      	ldr	r0, [r0, #0]
 8001da2:	f7ff bf7f 	b.w	8001ca4 <_strtol_l.constprop.0>
 8001da6:	bf00      	nop
 8001da8:	2000000c 	.word	0x2000000c

08001dac <std>:
 8001dac:	2300      	movs	r3, #0
 8001dae:	b510      	push	{r4, lr}
 8001db0:	4604      	mov	r4, r0
 8001db2:	e9c0 3300 	strd	r3, r3, [r0]
 8001db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dba:	6083      	str	r3, [r0, #8]
 8001dbc:	8181      	strh	r1, [r0, #12]
 8001dbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8001dc0:	81c2      	strh	r2, [r0, #14]
 8001dc2:	6183      	str	r3, [r0, #24]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	2208      	movs	r2, #8
 8001dc8:	305c      	adds	r0, #92	@ 0x5c
 8001dca:	f000 f9a2 	bl	8002112 <memset>
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <std+0x58>)
 8001dd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <std+0x5c>)
 8001dd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <std+0x60>)
 8001dd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <std+0x64>)
 8001ddc:	6323      	str	r3, [r4, #48]	@ 0x30
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <std+0x68>)
 8001de0:	6224      	str	r4, [r4, #32]
 8001de2:	429c      	cmp	r4, r3
 8001de4:	d006      	beq.n	8001df4 <std+0x48>
 8001de6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001dea:	4294      	cmp	r4, r2
 8001dec:	d002      	beq.n	8001df4 <std+0x48>
 8001dee:	33d0      	adds	r3, #208	@ 0xd0
 8001df0:	429c      	cmp	r4, r3
 8001df2:	d105      	bne.n	8001e00 <std+0x54>
 8001df4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dfc:	f000 bc1c 	b.w	8002638 <__retarget_lock_init_recursive>
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	bf00      	nop
 8001e04:	0800208d 	.word	0x0800208d
 8001e08:	080020af 	.word	0x080020af
 8001e0c:	080020e7 	.word	0x080020e7
 8001e10:	0800210b 	.word	0x0800210b
 8001e14:	200003c8 	.word	0x200003c8

08001e18 <stdio_exit_handler>:
 8001e18:	4a02      	ldr	r2, [pc, #8]	@ (8001e24 <stdio_exit_handler+0xc>)
 8001e1a:	4903      	ldr	r1, [pc, #12]	@ (8001e28 <stdio_exit_handler+0x10>)
 8001e1c:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <stdio_exit_handler+0x14>)
 8001e1e:	f000 b869 	b.w	8001ef4 <_fwalk_sglue>
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000
 8001e28:	08002da9 	.word	0x08002da9
 8001e2c:	20000010 	.word	0x20000010

08001e30 <cleanup_stdio>:
 8001e30:	6841      	ldr	r1, [r0, #4]
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <cleanup_stdio+0x34>)
 8001e34:	4299      	cmp	r1, r3
 8001e36:	b510      	push	{r4, lr}
 8001e38:	4604      	mov	r4, r0
 8001e3a:	d001      	beq.n	8001e40 <cleanup_stdio+0x10>
 8001e3c:	f000 ffb4 	bl	8002da8 <_fflush_r>
 8001e40:	68a1      	ldr	r1, [r4, #8]
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <cleanup_stdio+0x38>)
 8001e44:	4299      	cmp	r1, r3
 8001e46:	d002      	beq.n	8001e4e <cleanup_stdio+0x1e>
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f000 ffad 	bl	8002da8 <_fflush_r>
 8001e4e:	68e1      	ldr	r1, [r4, #12]
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <cleanup_stdio+0x3c>)
 8001e52:	4299      	cmp	r1, r3
 8001e54:	d004      	beq.n	8001e60 <cleanup_stdio+0x30>
 8001e56:	4620      	mov	r0, r4
 8001e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e5c:	f000 bfa4 	b.w	8002da8 <_fflush_r>
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	bf00      	nop
 8001e64:	200003c8 	.word	0x200003c8
 8001e68:	20000430 	.word	0x20000430
 8001e6c:	20000498 	.word	0x20000498

08001e70 <global_stdio_init.part.0>:
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <global_stdio_init.part.0+0x30>)
 8001e74:	4c0b      	ldr	r4, [pc, #44]	@ (8001ea4 <global_stdio_init.part.0+0x34>)
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <global_stdio_init.part.0+0x38>)
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2104      	movs	r1, #4
 8001e80:	f7ff ff94 	bl	8001dac <std>
 8001e84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2109      	movs	r1, #9
 8001e8c:	f7ff ff8e 	bl	8001dac <std>
 8001e90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001e94:	2202      	movs	r2, #2
 8001e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e9a:	2112      	movs	r1, #18
 8001e9c:	f7ff bf86 	b.w	8001dac <std>
 8001ea0:	20000500 	.word	0x20000500
 8001ea4:	200003c8 	.word	0x200003c8
 8001ea8:	08001e19 	.word	0x08001e19

08001eac <__sfp_lock_acquire>:
 8001eac:	4801      	ldr	r0, [pc, #4]	@ (8001eb4 <__sfp_lock_acquire+0x8>)
 8001eae:	f000 bbc4 	b.w	800263a <__retarget_lock_acquire_recursive>
 8001eb2:	bf00      	nop
 8001eb4:	20000509 	.word	0x20000509

08001eb8 <__sfp_lock_release>:
 8001eb8:	4801      	ldr	r0, [pc, #4]	@ (8001ec0 <__sfp_lock_release+0x8>)
 8001eba:	f000 bbbf 	b.w	800263c <__retarget_lock_release_recursive>
 8001ebe:	bf00      	nop
 8001ec0:	20000509 	.word	0x20000509

08001ec4 <__sinit>:
 8001ec4:	b510      	push	{r4, lr}
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	f7ff fff0 	bl	8001eac <__sfp_lock_acquire>
 8001ecc:	6a23      	ldr	r3, [r4, #32]
 8001ece:	b11b      	cbz	r3, 8001ed8 <__sinit+0x14>
 8001ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ed4:	f7ff bff0 	b.w	8001eb8 <__sfp_lock_release>
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <__sinit+0x28>)
 8001eda:	6223      	str	r3, [r4, #32]
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__sinit+0x2c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f5      	bne.n	8001ed0 <__sinit+0xc>
 8001ee4:	f7ff ffc4 	bl	8001e70 <global_stdio_init.part.0>
 8001ee8:	e7f2      	b.n	8001ed0 <__sinit+0xc>
 8001eea:	bf00      	nop
 8001eec:	08001e31 	.word	0x08001e31
 8001ef0:	20000500 	.word	0x20000500

08001ef4 <_fwalk_sglue>:
 8001ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ef8:	4607      	mov	r7, r0
 8001efa:	4688      	mov	r8, r1
 8001efc:	4614      	mov	r4, r2
 8001efe:	2600      	movs	r6, #0
 8001f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f04:	f1b9 0901 	subs.w	r9, r9, #1
 8001f08:	d505      	bpl.n	8001f16 <_fwalk_sglue+0x22>
 8001f0a:	6824      	ldr	r4, [r4, #0]
 8001f0c:	2c00      	cmp	r4, #0
 8001f0e:	d1f7      	bne.n	8001f00 <_fwalk_sglue+0xc>
 8001f10:	4630      	mov	r0, r6
 8001f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f16:	89ab      	ldrh	r3, [r5, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d907      	bls.n	8001f2c <_fwalk_sglue+0x38>
 8001f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f20:	3301      	adds	r3, #1
 8001f22:	d003      	beq.n	8001f2c <_fwalk_sglue+0x38>
 8001f24:	4629      	mov	r1, r5
 8001f26:	4638      	mov	r0, r7
 8001f28:	47c0      	blx	r8
 8001f2a:	4306      	orrs	r6, r0
 8001f2c:	3568      	adds	r5, #104	@ 0x68
 8001f2e:	e7e9      	b.n	8001f04 <_fwalk_sglue+0x10>

08001f30 <_perror_r>:
 8001f30:	6a03      	ldr	r3, [r0, #32]
 8001f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f34:	68c4      	ldr	r4, [r0, #12]
 8001f36:	4605      	mov	r5, r0
 8001f38:	460e      	mov	r6, r1
 8001f3a:	b90b      	cbnz	r3, 8001f40 <_perror_r+0x10>
 8001f3c:	f7ff ffc2 	bl	8001ec4 <__sinit>
 8001f40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f42:	07d8      	lsls	r0, r3, #31
 8001f44:	d405      	bmi.n	8001f52 <_perror_r+0x22>
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	0599      	lsls	r1, r3, #22
 8001f4a:	d402      	bmi.n	8001f52 <_perror_r+0x22>
 8001f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f4e:	f000 fb74 	bl	800263a <__retarget_lock_acquire_recursive>
 8001f52:	4621      	mov	r1, r4
 8001f54:	4628      	mov	r0, r5
 8001f56:	f000 ff27 	bl	8002da8 <_fflush_r>
 8001f5a:	bb1e      	cbnz	r6, 8001fa4 <_perror_r+0x74>
 8001f5c:	6829      	ldr	r1, [r5, #0]
 8001f5e:	ab01      	add	r3, sp, #4
 8001f60:	2201      	movs	r2, #1
 8001f62:	4628      	mov	r0, r5
 8001f64:	f000 f8ea 	bl	800213c <_strerror_r>
 8001f68:	4607      	mov	r7, r0
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d145      	bne.n	8001ffa <_perror_r+0xca>
 8001f6e:	4831      	ldr	r0, [pc, #196]	@ (8002034 <_perror_r+0x104>)
 8001f70:	4f30      	ldr	r7, [pc, #192]	@ (8002034 <_perror_r+0x104>)
 8001f72:	f7fe f935 	bl	80001e0 <strlen>
 8001f76:	4606      	mov	r6, r0
 8001f78:	b156      	cbz	r6, 8001f90 <_perror_r+0x60>
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f000 ff3c 	bl	8002df8 <fileno>
 8001f80:	4633      	mov	r3, r6
 8001f82:	4601      	mov	r1, r0
 8001f84:	463a      	mov	r2, r7
 8001f86:	4628      	mov	r0, r5
 8001f88:	f000 fb1a 	bl	80025c0 <_write_r>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	da47      	bge.n	8002020 <_perror_r+0xf0>
 8001f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f98:	81a2      	strh	r2, [r4, #12]
 8001f9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f9c:	07d2      	lsls	r2, r2, #31
 8001f9e:	d542      	bpl.n	8002026 <_perror_r+0xf6>
 8001fa0:	b003      	add	sp, #12
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	7833      	ldrb	r3, [r6, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0d8      	beq.n	8001f5c <_perror_r+0x2c>
 8001faa:	4630      	mov	r0, r6
 8001fac:	f7fe f918 	bl	80001e0 <strlen>
 8001fb0:	4607      	mov	r7, r0
 8001fb2:	b157      	cbz	r7, 8001fca <_perror_r+0x9a>
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f000 ff1f 	bl	8002df8 <fileno>
 8001fba:	463b      	mov	r3, r7
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f000 fafd 	bl	80025c0 <_write_r>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	da14      	bge.n	8001ff4 <_perror_r+0xc4>
 8001fca:	481b      	ldr	r0, [pc, #108]	@ (8002038 <_perror_r+0x108>)
 8001fcc:	4f1a      	ldr	r7, [pc, #104]	@ (8002038 <_perror_r+0x108>)
 8001fce:	f7fe f907 	bl	80001e0 <strlen>
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	2e00      	cmp	r6, #0
 8001fd6:	d0c1      	beq.n	8001f5c <_perror_r+0x2c>
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f000 ff0d 	bl	8002df8 <fileno>
 8001fde:	4633      	mov	r3, r6
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	463a      	mov	r2, r7
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f000 faeb 	bl	80025c0 <_write_r>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	dbb6      	blt.n	8001f5c <_perror_r+0x2c>
 8001fee:	1a36      	subs	r6, r6, r0
 8001ff0:	4407      	add	r7, r0
 8001ff2:	e7ef      	b.n	8001fd4 <_perror_r+0xa4>
 8001ff4:	1a3f      	subs	r7, r7, r0
 8001ff6:	4406      	add	r6, r0
 8001ff8:	e7db      	b.n	8001fb2 <_perror_r+0x82>
 8001ffa:	f7fe f8f1 	bl	80001e0 <strlen>
 8001ffe:	4606      	mov	r6, r0
 8002000:	2e00      	cmp	r6, #0
 8002002:	d0b4      	beq.n	8001f6e <_perror_r+0x3e>
 8002004:	4620      	mov	r0, r4
 8002006:	f000 fef7 	bl	8002df8 <fileno>
 800200a:	4633      	mov	r3, r6
 800200c:	4601      	mov	r1, r0
 800200e:	463a      	mov	r2, r7
 8002010:	4628      	mov	r0, r5
 8002012:	f000 fad5 	bl	80025c0 <_write_r>
 8002016:	2800      	cmp	r0, #0
 8002018:	dba9      	blt.n	8001f6e <_perror_r+0x3e>
 800201a:	1a36      	subs	r6, r6, r0
 800201c:	4407      	add	r7, r0
 800201e:	e7ef      	b.n	8002000 <_perror_r+0xd0>
 8002020:	1a36      	subs	r6, r6, r0
 8002022:	4407      	add	r7, r0
 8002024:	e7a8      	b.n	8001f78 <_perror_r+0x48>
 8002026:	059b      	lsls	r3, r3, #22
 8002028:	d4ba      	bmi.n	8001fa0 <_perror_r+0x70>
 800202a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800202c:	f000 fb06 	bl	800263c <__retarget_lock_release_recursive>
 8002030:	e7b6      	b.n	8001fa0 <_perror_r+0x70>
 8002032:	bf00      	nop
 8002034:	08003127 	.word	0x08003127
 8002038:	08003124 	.word	0x08003124

0800203c <perror>:
 800203c:	4b02      	ldr	r3, [pc, #8]	@ (8002048 <perror+0xc>)
 800203e:	4601      	mov	r1, r0
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f7ff bf75 	b.w	8001f30 <_perror_r>
 8002046:	bf00      	nop
 8002048:	2000000c 	.word	0x2000000c

0800204c <siprintf>:
 800204c:	b40e      	push	{r1, r2, r3}
 800204e:	b500      	push	{lr}
 8002050:	b09c      	sub	sp, #112	@ 0x70
 8002052:	ab1d      	add	r3, sp, #116	@ 0x74
 8002054:	9002      	str	r0, [sp, #8]
 8002056:	9006      	str	r0, [sp, #24]
 8002058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800205c:	4809      	ldr	r0, [pc, #36]	@ (8002084 <siprintf+0x38>)
 800205e:	9107      	str	r1, [sp, #28]
 8002060:	9104      	str	r1, [sp, #16]
 8002062:	4909      	ldr	r1, [pc, #36]	@ (8002088 <siprintf+0x3c>)
 8002064:	f853 2b04 	ldr.w	r2, [r3], #4
 8002068:	9105      	str	r1, [sp, #20]
 800206a:	6800      	ldr	r0, [r0, #0]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	a902      	add	r1, sp, #8
 8002070:	f000 fb8c 	bl	800278c <_svfiprintf_r>
 8002074:	9b02      	ldr	r3, [sp, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	b01c      	add	sp, #112	@ 0x70
 800207c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002080:	b003      	add	sp, #12
 8002082:	4770      	bx	lr
 8002084:	2000000c 	.word	0x2000000c
 8002088:	ffff0208 	.word	0xffff0208

0800208c <__sread>:
 800208c:	b510      	push	{r4, lr}
 800208e:	460c      	mov	r4, r1
 8002090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002094:	f000 fa72 	bl	800257c <_read_r>
 8002098:	2800      	cmp	r0, #0
 800209a:	bfab      	itete	ge
 800209c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800209e:	89a3      	ldrhlt	r3, [r4, #12]
 80020a0:	181b      	addge	r3, r3, r0
 80020a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80020a6:	bfac      	ite	ge
 80020a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80020aa:	81a3      	strhlt	r3, [r4, #12]
 80020ac:	bd10      	pop	{r4, pc}

080020ae <__swrite>:
 80020ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b2:	461f      	mov	r7, r3
 80020b4:	898b      	ldrh	r3, [r1, #12]
 80020b6:	05db      	lsls	r3, r3, #23
 80020b8:	4605      	mov	r5, r0
 80020ba:	460c      	mov	r4, r1
 80020bc:	4616      	mov	r6, r2
 80020be:	d505      	bpl.n	80020cc <__swrite+0x1e>
 80020c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020c4:	2302      	movs	r3, #2
 80020c6:	2200      	movs	r2, #0
 80020c8:	f000 fa46 	bl	8002558 <_lseek_r>
 80020cc:	89a3      	ldrh	r3, [r4, #12]
 80020ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020d6:	81a3      	strh	r3, [r4, #12]
 80020d8:	4632      	mov	r2, r6
 80020da:	463b      	mov	r3, r7
 80020dc:	4628      	mov	r0, r5
 80020de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020e2:	f000 ba6d 	b.w	80025c0 <_write_r>

080020e6 <__sseek>:
 80020e6:	b510      	push	{r4, lr}
 80020e8:	460c      	mov	r4, r1
 80020ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ee:	f000 fa33 	bl	8002558 <_lseek_r>
 80020f2:	1c43      	adds	r3, r0, #1
 80020f4:	89a3      	ldrh	r3, [r4, #12]
 80020f6:	bf15      	itete	ne
 80020f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80020fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80020fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002102:	81a3      	strheq	r3, [r4, #12]
 8002104:	bf18      	it	ne
 8002106:	81a3      	strhne	r3, [r4, #12]
 8002108:	bd10      	pop	{r4, pc}

0800210a <__sclose>:
 800210a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800210e:	f000 ba13 	b.w	8002538 <_close_r>

08002112 <memset>:
 8002112:	4402      	add	r2, r0
 8002114:	4603      	mov	r3, r0
 8002116:	4293      	cmp	r3, r2
 8002118:	d100      	bne.n	800211c <memset+0xa>
 800211a:	4770      	bx	lr
 800211c:	f803 1b01 	strb.w	r1, [r3], #1
 8002120:	e7f9      	b.n	8002116 <memset+0x4>

08002122 <strchr>:
 8002122:	b2c9      	uxtb	r1, r1
 8002124:	4603      	mov	r3, r0
 8002126:	4618      	mov	r0, r3
 8002128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800212c:	b112      	cbz	r2, 8002134 <strchr+0x12>
 800212e:	428a      	cmp	r2, r1
 8002130:	d1f9      	bne.n	8002126 <strchr+0x4>
 8002132:	4770      	bx	lr
 8002134:	2900      	cmp	r1, #0
 8002136:	bf18      	it	ne
 8002138:	2000      	movne	r0, #0
 800213a:	4770      	bx	lr

0800213c <_strerror_r>:
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	288e      	cmp	r0, #142	@ 0x8e
 8002148:	f200 8130 	bhi.w	80023ac <_strerror_r+0x270>
 800214c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002150:	0138008f 	.word	0x0138008f
 8002154:	00940092 	.word	0x00940092
 8002158:	00980096 	.word	0x00980096
 800215c:	009c009a 	.word	0x009c009a
 8002160:	00a2009e 	.word	0x00a2009e
 8002164:	00a800a4 	.word	0x00a800a4
 8002168:	00ac00aa 	.word	0x00ac00aa
 800216c:	012e00ae 	.word	0x012e00ae
 8002170:	00b200b0 	.word	0x00b200b0
 8002174:	00b600b4 	.word	0x00b600b4
 8002178:	00be00b8 	.word	0x00be00b8
 800217c:	00c600c0 	.word	0x00c600c0
 8002180:	00ca00c8 	.word	0x00ca00c8
 8002184:	00ce00cc 	.word	0x00ce00cc
 8002188:	00d600d2 	.word	0x00d600d2
 800218c:	00da00d8 	.word	0x00da00d8
 8002190:	00de00dc 	.word	0x00de00dc
 8002194:	00e200e0 	.word	0x00e200e0
 8002198:	012e00e4 	.word	0x012e00e4
 800219c:	012e012e 	.word	0x012e012e
 80021a0:	012e012e 	.word	0x012e012e
 80021a4:	012e012e 	.word	0x012e012e
 80021a8:	00e8012e 	.word	0x00e8012e
 80021ac:	012e00ec 	.word	0x012e00ec
 80021b0:	012e012e 	.word	0x012e012e
 80021b4:	012e012e 	.word	0x012e012e
 80021b8:	012e012e 	.word	0x012e012e
 80021bc:	012e012e 	.word	0x012e012e
 80021c0:	012e012e 	.word	0x012e012e
 80021c4:	012e012e 	.word	0x012e012e
 80021c8:	010800ee 	.word	0x010800ee
 80021cc:	00f200f0 	.word	0x00f200f0
 80021d0:	012e012e 	.word	0x012e012e
 80021d4:	00f4012e 	.word	0x00f4012e
 80021d8:	012e012e 	.word	0x012e012e
 80021dc:	00f6012e 	.word	0x00f6012e
 80021e0:	012e012e 	.word	0x012e012e
 80021e4:	012e00fa 	.word	0x012e00fa
 80021e8:	00fc012e 	.word	0x00fc012e
 80021ec:	012e012e 	.word	0x012e012e
 80021f0:	012e012e 	.word	0x012e012e
 80021f4:	012e012e 	.word	0x012e012e
 80021f8:	012e012e 	.word	0x012e012e
 80021fc:	012e012e 	.word	0x012e012e
 8002200:	012e00fe 	.word	0x012e00fe
 8002204:	01020100 	.word	0x01020100
 8002208:	012e0104 	.word	0x012e0104
 800220c:	0126012e 	.word	0x0126012e
 8002210:	012e012e 	.word	0x012e012e
 8002214:	012e012e 	.word	0x012e012e
 8002218:	012e012e 	.word	0x012e012e
 800221c:	012e012e 	.word	0x012e012e
 8002220:	01060114 	.word	0x01060114
 8002224:	010c010a 	.word	0x010c010a
 8002228:	0110010e 	.word	0x0110010e
 800222c:	0112012e 	.word	0x0112012e
 8002230:	011a0116 	.word	0x011a0116
 8002234:	00c200ea 	.word	0x00c200ea
 8002238:	00ba012c 	.word	0x00ba012c
 800223c:	00bc00d0 	.word	0x00bc00d0
 8002240:	00a600a0 	.word	0x00a600a0
 8002244:	00f8012a 	.word	0x00f8012a
 8002248:	0118012e 	.word	0x0118012e
 800224c:	011e00c4 	.word	0x011e00c4
 8002250:	012e011c 	.word	0x012e011c
 8002254:	012e012e 	.word	0x012e012e
 8002258:	012e012e 	.word	0x012e012e
 800225c:	012e00d4 	.word	0x012e00d4
 8002260:	012e012e 	.word	0x012e012e
 8002264:	012800e6 	.word	0x012800e6
 8002268:	01220120 	.word	0x01220120
 800226c:	0124      	.short	0x0124
 800226e:	4b55      	ldr	r3, [pc, #340]	@ (80023c4 <_strerror_r+0x288>)
 8002270:	4618      	mov	r0, r3
 8002272:	bd10      	pop	{r4, pc}
 8002274:	4b54      	ldr	r3, [pc, #336]	@ (80023c8 <_strerror_r+0x28c>)
 8002276:	e7fb      	b.n	8002270 <_strerror_r+0x134>
 8002278:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <_strerror_r+0x290>)
 800227a:	e7f9      	b.n	8002270 <_strerror_r+0x134>
 800227c:	4b54      	ldr	r3, [pc, #336]	@ (80023d0 <_strerror_r+0x294>)
 800227e:	e7f7      	b.n	8002270 <_strerror_r+0x134>
 8002280:	4b54      	ldr	r3, [pc, #336]	@ (80023d4 <_strerror_r+0x298>)
 8002282:	e7f5      	b.n	8002270 <_strerror_r+0x134>
 8002284:	4b54      	ldr	r3, [pc, #336]	@ (80023d8 <_strerror_r+0x29c>)
 8002286:	e7f3      	b.n	8002270 <_strerror_r+0x134>
 8002288:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <_strerror_r+0x2a0>)
 800228a:	e7f1      	b.n	8002270 <_strerror_r+0x134>
 800228c:	4b54      	ldr	r3, [pc, #336]	@ (80023e0 <_strerror_r+0x2a4>)
 800228e:	e7ef      	b.n	8002270 <_strerror_r+0x134>
 8002290:	4b54      	ldr	r3, [pc, #336]	@ (80023e4 <_strerror_r+0x2a8>)
 8002292:	e7ed      	b.n	8002270 <_strerror_r+0x134>
 8002294:	4b54      	ldr	r3, [pc, #336]	@ (80023e8 <_strerror_r+0x2ac>)
 8002296:	e7eb      	b.n	8002270 <_strerror_r+0x134>
 8002298:	4b54      	ldr	r3, [pc, #336]	@ (80023ec <_strerror_r+0x2b0>)
 800229a:	e7e9      	b.n	8002270 <_strerror_r+0x134>
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <_strerror_r+0x2b4>)
 800229e:	e7e7      	b.n	8002270 <_strerror_r+0x134>
 80022a0:	4b54      	ldr	r3, [pc, #336]	@ (80023f4 <_strerror_r+0x2b8>)
 80022a2:	e7e5      	b.n	8002270 <_strerror_r+0x134>
 80022a4:	4b54      	ldr	r3, [pc, #336]	@ (80023f8 <_strerror_r+0x2bc>)
 80022a6:	e7e3      	b.n	8002270 <_strerror_r+0x134>
 80022a8:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <_strerror_r+0x2c0>)
 80022aa:	e7e1      	b.n	8002270 <_strerror_r+0x134>
 80022ac:	4b54      	ldr	r3, [pc, #336]	@ (8002400 <_strerror_r+0x2c4>)
 80022ae:	e7df      	b.n	8002270 <_strerror_r+0x134>
 80022b0:	4b54      	ldr	r3, [pc, #336]	@ (8002404 <_strerror_r+0x2c8>)
 80022b2:	e7dd      	b.n	8002270 <_strerror_r+0x134>
 80022b4:	4b54      	ldr	r3, [pc, #336]	@ (8002408 <_strerror_r+0x2cc>)
 80022b6:	e7db      	b.n	8002270 <_strerror_r+0x134>
 80022b8:	4b54      	ldr	r3, [pc, #336]	@ (800240c <_strerror_r+0x2d0>)
 80022ba:	e7d9      	b.n	8002270 <_strerror_r+0x134>
 80022bc:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <_strerror_r+0x2d4>)
 80022be:	e7d7      	b.n	8002270 <_strerror_r+0x134>
 80022c0:	4b54      	ldr	r3, [pc, #336]	@ (8002414 <_strerror_r+0x2d8>)
 80022c2:	e7d5      	b.n	8002270 <_strerror_r+0x134>
 80022c4:	4b54      	ldr	r3, [pc, #336]	@ (8002418 <_strerror_r+0x2dc>)
 80022c6:	e7d3      	b.n	8002270 <_strerror_r+0x134>
 80022c8:	4b54      	ldr	r3, [pc, #336]	@ (800241c <_strerror_r+0x2e0>)
 80022ca:	e7d1      	b.n	8002270 <_strerror_r+0x134>
 80022cc:	4b54      	ldr	r3, [pc, #336]	@ (8002420 <_strerror_r+0x2e4>)
 80022ce:	e7cf      	b.n	8002270 <_strerror_r+0x134>
 80022d0:	4b54      	ldr	r3, [pc, #336]	@ (8002424 <_strerror_r+0x2e8>)
 80022d2:	e7cd      	b.n	8002270 <_strerror_r+0x134>
 80022d4:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <_strerror_r+0x2ec>)
 80022d6:	e7cb      	b.n	8002270 <_strerror_r+0x134>
 80022d8:	4b54      	ldr	r3, [pc, #336]	@ (800242c <_strerror_r+0x2f0>)
 80022da:	e7c9      	b.n	8002270 <_strerror_r+0x134>
 80022dc:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <_strerror_r+0x2f4>)
 80022de:	e7c7      	b.n	8002270 <_strerror_r+0x134>
 80022e0:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <_strerror_r+0x2f8>)
 80022e2:	e7c5      	b.n	8002270 <_strerror_r+0x134>
 80022e4:	4b54      	ldr	r3, [pc, #336]	@ (8002438 <_strerror_r+0x2fc>)
 80022e6:	e7c3      	b.n	8002270 <_strerror_r+0x134>
 80022e8:	4b54      	ldr	r3, [pc, #336]	@ (800243c <_strerror_r+0x300>)
 80022ea:	e7c1      	b.n	8002270 <_strerror_r+0x134>
 80022ec:	4b54      	ldr	r3, [pc, #336]	@ (8002440 <_strerror_r+0x304>)
 80022ee:	e7bf      	b.n	8002270 <_strerror_r+0x134>
 80022f0:	4b54      	ldr	r3, [pc, #336]	@ (8002444 <_strerror_r+0x308>)
 80022f2:	e7bd      	b.n	8002270 <_strerror_r+0x134>
 80022f4:	4b54      	ldr	r3, [pc, #336]	@ (8002448 <_strerror_r+0x30c>)
 80022f6:	e7bb      	b.n	8002270 <_strerror_r+0x134>
 80022f8:	4b54      	ldr	r3, [pc, #336]	@ (800244c <_strerror_r+0x310>)
 80022fa:	e7b9      	b.n	8002270 <_strerror_r+0x134>
 80022fc:	4b54      	ldr	r3, [pc, #336]	@ (8002450 <_strerror_r+0x314>)
 80022fe:	e7b7      	b.n	8002270 <_strerror_r+0x134>
 8002300:	4b54      	ldr	r3, [pc, #336]	@ (8002454 <_strerror_r+0x318>)
 8002302:	e7b5      	b.n	8002270 <_strerror_r+0x134>
 8002304:	4b54      	ldr	r3, [pc, #336]	@ (8002458 <_strerror_r+0x31c>)
 8002306:	e7b3      	b.n	8002270 <_strerror_r+0x134>
 8002308:	4b54      	ldr	r3, [pc, #336]	@ (800245c <_strerror_r+0x320>)
 800230a:	e7b1      	b.n	8002270 <_strerror_r+0x134>
 800230c:	4b54      	ldr	r3, [pc, #336]	@ (8002460 <_strerror_r+0x324>)
 800230e:	e7af      	b.n	8002270 <_strerror_r+0x134>
 8002310:	4b54      	ldr	r3, [pc, #336]	@ (8002464 <_strerror_r+0x328>)
 8002312:	e7ad      	b.n	8002270 <_strerror_r+0x134>
 8002314:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <_strerror_r+0x32c>)
 8002316:	e7ab      	b.n	8002270 <_strerror_r+0x134>
 8002318:	4b54      	ldr	r3, [pc, #336]	@ (800246c <_strerror_r+0x330>)
 800231a:	e7a9      	b.n	8002270 <_strerror_r+0x134>
 800231c:	4b54      	ldr	r3, [pc, #336]	@ (8002470 <_strerror_r+0x334>)
 800231e:	e7a7      	b.n	8002270 <_strerror_r+0x134>
 8002320:	4b54      	ldr	r3, [pc, #336]	@ (8002474 <_strerror_r+0x338>)
 8002322:	e7a5      	b.n	8002270 <_strerror_r+0x134>
 8002324:	4b54      	ldr	r3, [pc, #336]	@ (8002478 <_strerror_r+0x33c>)
 8002326:	e7a3      	b.n	8002270 <_strerror_r+0x134>
 8002328:	4b54      	ldr	r3, [pc, #336]	@ (800247c <_strerror_r+0x340>)
 800232a:	e7a1      	b.n	8002270 <_strerror_r+0x134>
 800232c:	4b54      	ldr	r3, [pc, #336]	@ (8002480 <_strerror_r+0x344>)
 800232e:	e79f      	b.n	8002270 <_strerror_r+0x134>
 8002330:	4b54      	ldr	r3, [pc, #336]	@ (8002484 <_strerror_r+0x348>)
 8002332:	e79d      	b.n	8002270 <_strerror_r+0x134>
 8002334:	4b54      	ldr	r3, [pc, #336]	@ (8002488 <_strerror_r+0x34c>)
 8002336:	e79b      	b.n	8002270 <_strerror_r+0x134>
 8002338:	4b54      	ldr	r3, [pc, #336]	@ (800248c <_strerror_r+0x350>)
 800233a:	e799      	b.n	8002270 <_strerror_r+0x134>
 800233c:	4b54      	ldr	r3, [pc, #336]	@ (8002490 <_strerror_r+0x354>)
 800233e:	e797      	b.n	8002270 <_strerror_r+0x134>
 8002340:	4b54      	ldr	r3, [pc, #336]	@ (8002494 <_strerror_r+0x358>)
 8002342:	e795      	b.n	8002270 <_strerror_r+0x134>
 8002344:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <_strerror_r+0x35c>)
 8002346:	e793      	b.n	8002270 <_strerror_r+0x134>
 8002348:	4b54      	ldr	r3, [pc, #336]	@ (800249c <_strerror_r+0x360>)
 800234a:	e791      	b.n	8002270 <_strerror_r+0x134>
 800234c:	4b54      	ldr	r3, [pc, #336]	@ (80024a0 <_strerror_r+0x364>)
 800234e:	e78f      	b.n	8002270 <_strerror_r+0x134>
 8002350:	4b54      	ldr	r3, [pc, #336]	@ (80024a4 <_strerror_r+0x368>)
 8002352:	e78d      	b.n	8002270 <_strerror_r+0x134>
 8002354:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <_strerror_r+0x36c>)
 8002356:	e78b      	b.n	8002270 <_strerror_r+0x134>
 8002358:	4b54      	ldr	r3, [pc, #336]	@ (80024ac <_strerror_r+0x370>)
 800235a:	e789      	b.n	8002270 <_strerror_r+0x134>
 800235c:	4b54      	ldr	r3, [pc, #336]	@ (80024b0 <_strerror_r+0x374>)
 800235e:	e787      	b.n	8002270 <_strerror_r+0x134>
 8002360:	4b54      	ldr	r3, [pc, #336]	@ (80024b4 <_strerror_r+0x378>)
 8002362:	e785      	b.n	8002270 <_strerror_r+0x134>
 8002364:	4b54      	ldr	r3, [pc, #336]	@ (80024b8 <_strerror_r+0x37c>)
 8002366:	e783      	b.n	8002270 <_strerror_r+0x134>
 8002368:	4b54      	ldr	r3, [pc, #336]	@ (80024bc <_strerror_r+0x380>)
 800236a:	e781      	b.n	8002270 <_strerror_r+0x134>
 800236c:	4b54      	ldr	r3, [pc, #336]	@ (80024c0 <_strerror_r+0x384>)
 800236e:	e77f      	b.n	8002270 <_strerror_r+0x134>
 8002370:	4b54      	ldr	r3, [pc, #336]	@ (80024c4 <_strerror_r+0x388>)
 8002372:	e77d      	b.n	8002270 <_strerror_r+0x134>
 8002374:	4b54      	ldr	r3, [pc, #336]	@ (80024c8 <_strerror_r+0x38c>)
 8002376:	e77b      	b.n	8002270 <_strerror_r+0x134>
 8002378:	4b54      	ldr	r3, [pc, #336]	@ (80024cc <_strerror_r+0x390>)
 800237a:	e779      	b.n	8002270 <_strerror_r+0x134>
 800237c:	4b54      	ldr	r3, [pc, #336]	@ (80024d0 <_strerror_r+0x394>)
 800237e:	e777      	b.n	8002270 <_strerror_r+0x134>
 8002380:	4b54      	ldr	r3, [pc, #336]	@ (80024d4 <_strerror_r+0x398>)
 8002382:	e775      	b.n	8002270 <_strerror_r+0x134>
 8002384:	4b54      	ldr	r3, [pc, #336]	@ (80024d8 <_strerror_r+0x39c>)
 8002386:	e773      	b.n	8002270 <_strerror_r+0x134>
 8002388:	4b54      	ldr	r3, [pc, #336]	@ (80024dc <_strerror_r+0x3a0>)
 800238a:	e771      	b.n	8002270 <_strerror_r+0x134>
 800238c:	4b54      	ldr	r3, [pc, #336]	@ (80024e0 <_strerror_r+0x3a4>)
 800238e:	e76f      	b.n	8002270 <_strerror_r+0x134>
 8002390:	4b54      	ldr	r3, [pc, #336]	@ (80024e4 <_strerror_r+0x3a8>)
 8002392:	e76d      	b.n	8002270 <_strerror_r+0x134>
 8002394:	4b54      	ldr	r3, [pc, #336]	@ (80024e8 <_strerror_r+0x3ac>)
 8002396:	e76b      	b.n	8002270 <_strerror_r+0x134>
 8002398:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <_strerror_r+0x3b0>)
 800239a:	e769      	b.n	8002270 <_strerror_r+0x134>
 800239c:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <_strerror_r+0x3b4>)
 800239e:	e767      	b.n	8002270 <_strerror_r+0x134>
 80023a0:	4b54      	ldr	r3, [pc, #336]	@ (80024f4 <_strerror_r+0x3b8>)
 80023a2:	e765      	b.n	8002270 <_strerror_r+0x134>
 80023a4:	4b54      	ldr	r3, [pc, #336]	@ (80024f8 <_strerror_r+0x3bc>)
 80023a6:	e763      	b.n	8002270 <_strerror_r+0x134>
 80023a8:	4b54      	ldr	r3, [pc, #336]	@ (80024fc <_strerror_r+0x3c0>)
 80023aa:	e761      	b.n	8002270 <_strerror_r+0x134>
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	bf08      	it	eq
 80023b0:	4622      	moveq	r2, r4
 80023b2:	f000 f8bf 	bl	8002534 <_user_strerror>
 80023b6:	4b52      	ldr	r3, [pc, #328]	@ (8002500 <_strerror_r+0x3c4>)
 80023b8:	2800      	cmp	r0, #0
 80023ba:	bf18      	it	ne
 80023bc:	4603      	movne	r3, r0
 80023be:	e757      	b.n	8002270 <_strerror_r+0x134>
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <_strerror_r+0x3c8>)
 80023c2:	e755      	b.n	8002270 <_strerror_r+0x134>
 80023c4:	08003129 	.word	0x08003129
 80023c8:	0800313b 	.word	0x0800313b
 80023cc:	08003155 	.word	0x08003155
 80023d0:	08003165 	.word	0x08003165
 80023d4:	0800317d 	.word	0x0800317d
 80023d8:	08003187 	.word	0x08003187
 80023dc:	080031a1 	.word	0x080031a1
 80023e0:	080031b3 	.word	0x080031b3
 80023e4:	080031c5 	.word	0x080031c5
 80023e8:	080031de 	.word	0x080031de
 80023ec:	080031ee 	.word	0x080031ee
 80023f0:	080031fa 	.word	0x080031fa
 80023f4:	08003217 	.word	0x08003217
 80023f8:	08003229 	.word	0x08003229
 80023fc:	0800323a 	.word	0x0800323a
 8002400:	0800324c 	.word	0x0800324c
 8002404:	08003258 	.word	0x08003258
 8002408:	08003270 	.word	0x08003270
 800240c:	0800327c 	.word	0x0800327c
 8002410:	0800328e 	.word	0x0800328e
 8002414:	0800329d 	.word	0x0800329d
 8002418:	080032ad 	.word	0x080032ad
 800241c:	080032ba 	.word	0x080032ba
 8002420:	080032d9 	.word	0x080032d9
 8002424:	080032e8 	.word	0x080032e8
 8002428:	080032f9 	.word	0x080032f9
 800242c:	0800331d 	.word	0x0800331d
 8002430:	0800333b 	.word	0x0800333b
 8002434:	08003359 	.word	0x08003359
 8002438:	08003379 	.word	0x08003379
 800243c:	08003390 	.word	0x08003390
 8002440:	0800339f 	.word	0x0800339f
 8002444:	080033ae 	.word	0x080033ae
 8002448:	080033c2 	.word	0x080033c2
 800244c:	080033da 	.word	0x080033da
 8002450:	080033e8 	.word	0x080033e8
 8002454:	080033f5 	.word	0x080033f5
 8002458:	0800340b 	.word	0x0800340b
 800245c:	0800341a 	.word	0x0800341a
 8002460:	08003426 	.word	0x08003426
 8002464:	08003455 	.word	0x08003455
 8002468:	08003466 	.word	0x08003466
 800246c:	08003481 	.word	0x08003481
 8002470:	08003494 	.word	0x08003494
 8002474:	080034aa 	.word	0x080034aa
 8002478:	080034b3 	.word	0x080034b3
 800247c:	080034ca 	.word	0x080034ca
 8002480:	080034d2 	.word	0x080034d2
 8002484:	080034df 	.word	0x080034df
 8002488:	080034f4 	.word	0x080034f4
 800248c:	08003508 	.word	0x08003508
 8002490:	08003520 	.word	0x08003520
 8002494:	0800352f 	.word	0x0800352f
 8002498:	08003540 	.word	0x08003540
 800249c:	08003553 	.word	0x08003553
 80024a0:	0800355f 	.word	0x0800355f
 80024a4:	08003578 	.word	0x08003578
 80024a8:	0800358c 	.word	0x0800358c
 80024ac:	080035a7 	.word	0x080035a7
 80024b0:	080035bf 	.word	0x080035bf
 80024b4:	080035d9 	.word	0x080035d9
 80024b8:	080035e1 	.word	0x080035e1
 80024bc:	08003611 	.word	0x08003611
 80024c0:	08003630 	.word	0x08003630
 80024c4:	0800364f 	.word	0x0800364f
 80024c8:	08003666 	.word	0x08003666
 80024cc:	08003679 	.word	0x08003679
 80024d0:	08003692 	.word	0x08003692
 80024d4:	080036a9 	.word	0x080036a9
 80024d8:	080036bf 	.word	0x080036bf
 80024dc:	080036e0 	.word	0x080036e0
 80024e0:	080036f8 	.word	0x080036f8
 80024e4:	08003714 	.word	0x08003714
 80024e8:	08003727 	.word	0x08003727
 80024ec:	0800373d 	.word	0x0800373d
 80024f0:	08003751 	.word	0x08003751
 80024f4:	08003773 	.word	0x08003773
 80024f8:	08003799 	.word	0x08003799
 80024fc:	080037aa 	.word	0x080037aa
 8002500:	08003128 	.word	0x08003128
 8002504:	08003131 	.word	0x08003131

08002508 <strstr>:
 8002508:	780a      	ldrb	r2, [r1, #0]
 800250a:	b570      	push	{r4, r5, r6, lr}
 800250c:	b96a      	cbnz	r2, 800252a <strstr+0x22>
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	429a      	cmp	r2, r3
 8002512:	d109      	bne.n	8002528 <strstr+0x20>
 8002514:	460c      	mov	r4, r1
 8002516:	4605      	mov	r5, r0
 8002518:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f6      	beq.n	800250e <strstr+0x6>
 8002520:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002524:	429e      	cmp	r6, r3
 8002526:	d0f7      	beq.n	8002518 <strstr+0x10>
 8002528:	3001      	adds	r0, #1
 800252a:	7803      	ldrb	r3, [r0, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ef      	bne.n	8002510 <strstr+0x8>
 8002530:	4618      	mov	r0, r3
 8002532:	e7ec      	b.n	800250e <strstr+0x6>

08002534 <_user_strerror>:
 8002534:	2000      	movs	r0, #0
 8002536:	4770      	bx	lr

08002538 <_close_r>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	4d06      	ldr	r5, [pc, #24]	@ (8002554 <_close_r+0x1c>)
 800253c:	2300      	movs	r3, #0
 800253e:	4604      	mov	r4, r0
 8002540:	4608      	mov	r0, r1
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	f7fe fd5c 	bl	8001000 <_close>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d102      	bne.n	8002552 <_close_r+0x1a>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	b103      	cbz	r3, 8002552 <_close_r+0x1a>
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000504 	.word	0x20000504

08002558 <_lseek_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4d07      	ldr	r5, [pc, #28]	@ (8002578 <_lseek_r+0x20>)
 800255c:	4604      	mov	r4, r0
 800255e:	4608      	mov	r0, r1
 8002560:	4611      	mov	r1, r2
 8002562:	2200      	movs	r2, #0
 8002564:	602a      	str	r2, [r5, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	f7fe fd56 	bl	8001018 <_lseek>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	d102      	bne.n	8002576 <_lseek_r+0x1e>
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	b103      	cbz	r3, 8002576 <_lseek_r+0x1e>
 8002574:	6023      	str	r3, [r4, #0]
 8002576:	bd38      	pop	{r3, r4, r5, pc}
 8002578:	20000504 	.word	0x20000504

0800257c <_read_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4d07      	ldr	r5, [pc, #28]	@ (800259c <_read_r+0x20>)
 8002580:	4604      	mov	r4, r0
 8002582:	4608      	mov	r0, r1
 8002584:	4611      	mov	r1, r2
 8002586:	2200      	movs	r2, #0
 8002588:	602a      	str	r2, [r5, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f7fe fcff 	bl	8000f8e <_read>
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d102      	bne.n	800259a <_read_r+0x1e>
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	b103      	cbz	r3, 800259a <_read_r+0x1e>
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	bd38      	pop	{r3, r4, r5, pc}
 800259c:	20000504 	.word	0x20000504

080025a0 <_sbrk_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4d06      	ldr	r5, [pc, #24]	@ (80025bc <_sbrk_r+0x1c>)
 80025a4:	2300      	movs	r3, #0
 80025a6:	4604      	mov	r4, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	602b      	str	r3, [r5, #0]
 80025ac:	f7fe fd42 	bl	8001034 <_sbrk>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d102      	bne.n	80025ba <_sbrk_r+0x1a>
 80025b4:	682b      	ldr	r3, [r5, #0]
 80025b6:	b103      	cbz	r3, 80025ba <_sbrk_r+0x1a>
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	20000504 	.word	0x20000504

080025c0 <_write_r>:
 80025c0:	b538      	push	{r3, r4, r5, lr}
 80025c2:	4d07      	ldr	r5, [pc, #28]	@ (80025e0 <_write_r+0x20>)
 80025c4:	4604      	mov	r4, r0
 80025c6:	4608      	mov	r0, r1
 80025c8:	4611      	mov	r1, r2
 80025ca:	2200      	movs	r2, #0
 80025cc:	602a      	str	r2, [r5, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f7fe fcfa 	bl	8000fc8 <_write>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d102      	bne.n	80025de <_write_r+0x1e>
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	b103      	cbz	r3, 80025de <_write_r+0x1e>
 80025dc:	6023      	str	r3, [r4, #0]
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	20000504 	.word	0x20000504

080025e4 <__errno>:
 80025e4:	4b01      	ldr	r3, [pc, #4]	@ (80025ec <__errno+0x8>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2000000c 	.word	0x2000000c

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002628 <__libc_init_array+0x38>)
 80025f4:	4c0d      	ldr	r4, [pc, #52]	@ (800262c <__libc_init_array+0x3c>)
 80025f6:	1b64      	subs	r4, r4, r5
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	2600      	movs	r6, #0
 80025fc:	42a6      	cmp	r6, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	4d0b      	ldr	r5, [pc, #44]	@ (8002630 <__libc_init_array+0x40>)
 8002602:	4c0c      	ldr	r4, [pc, #48]	@ (8002634 <__libc_init_array+0x44>)
 8002604:	f000 fc80 	bl	8002f08 <_init>
 8002608:	1b64      	subs	r4, r4, r5
 800260a:	10a4      	asrs	r4, r4, #2
 800260c:	2600      	movs	r6, #0
 800260e:	42a6      	cmp	r6, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f855 3b04 	ldr.w	r3, [r5], #4
 8002618:	4798      	blx	r3
 800261a:	3601      	adds	r6, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002622:	4798      	blx	r3
 8002624:	3601      	adds	r6, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	080037fc 	.word	0x080037fc
 800262c:	080037fc 	.word	0x080037fc
 8002630:	080037fc 	.word	0x080037fc
 8002634:	08003800 	.word	0x08003800

08002638 <__retarget_lock_init_recursive>:
 8002638:	4770      	bx	lr

0800263a <__retarget_lock_acquire_recursive>:
 800263a:	4770      	bx	lr

0800263c <__retarget_lock_release_recursive>:
 800263c:	4770      	bx	lr
	...

08002640 <_free_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	4605      	mov	r5, r0
 8002644:	2900      	cmp	r1, #0
 8002646:	d041      	beq.n	80026cc <_free_r+0x8c>
 8002648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800264c:	1f0c      	subs	r4, r1, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfb8      	it	lt
 8002652:	18e4      	addlt	r4, r4, r3
 8002654:	f7ff fb1a 	bl	8001c8c <__malloc_lock>
 8002658:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <_free_r+0x90>)
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	b933      	cbnz	r3, 800266c <_free_r+0x2c>
 800265e:	6063      	str	r3, [r4, #4]
 8002660:	6014      	str	r4, [r2, #0]
 8002662:	4628      	mov	r0, r5
 8002664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002668:	f7ff bb16 	b.w	8001c98 <__malloc_unlock>
 800266c:	42a3      	cmp	r3, r4
 800266e:	d908      	bls.n	8002682 <_free_r+0x42>
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	1821      	adds	r1, r4, r0
 8002674:	428b      	cmp	r3, r1
 8002676:	bf01      	itttt	eq
 8002678:	6819      	ldreq	r1, [r3, #0]
 800267a:	685b      	ldreq	r3, [r3, #4]
 800267c:	1809      	addeq	r1, r1, r0
 800267e:	6021      	streq	r1, [r4, #0]
 8002680:	e7ed      	b.n	800265e <_free_r+0x1e>
 8002682:	461a      	mov	r2, r3
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	b10b      	cbz	r3, 800268c <_free_r+0x4c>
 8002688:	42a3      	cmp	r3, r4
 800268a:	d9fa      	bls.n	8002682 <_free_r+0x42>
 800268c:	6811      	ldr	r1, [r2, #0]
 800268e:	1850      	adds	r0, r2, r1
 8002690:	42a0      	cmp	r0, r4
 8002692:	d10b      	bne.n	80026ac <_free_r+0x6c>
 8002694:	6820      	ldr	r0, [r4, #0]
 8002696:	4401      	add	r1, r0
 8002698:	1850      	adds	r0, r2, r1
 800269a:	4283      	cmp	r3, r0
 800269c:	6011      	str	r1, [r2, #0]
 800269e:	d1e0      	bne.n	8002662 <_free_r+0x22>
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	6053      	str	r3, [r2, #4]
 80026a6:	4408      	add	r0, r1
 80026a8:	6010      	str	r0, [r2, #0]
 80026aa:	e7da      	b.n	8002662 <_free_r+0x22>
 80026ac:	d902      	bls.n	80026b4 <_free_r+0x74>
 80026ae:	230c      	movs	r3, #12
 80026b0:	602b      	str	r3, [r5, #0]
 80026b2:	e7d6      	b.n	8002662 <_free_r+0x22>
 80026b4:	6820      	ldr	r0, [r4, #0]
 80026b6:	1821      	adds	r1, r4, r0
 80026b8:	428b      	cmp	r3, r1
 80026ba:	bf04      	itt	eq
 80026bc:	6819      	ldreq	r1, [r3, #0]
 80026be:	685b      	ldreq	r3, [r3, #4]
 80026c0:	6063      	str	r3, [r4, #4]
 80026c2:	bf04      	itt	eq
 80026c4:	1809      	addeq	r1, r1, r0
 80026c6:	6021      	streq	r1, [r4, #0]
 80026c8:	6054      	str	r4, [r2, #4]
 80026ca:	e7ca      	b.n	8002662 <_free_r+0x22>
 80026cc:	bd38      	pop	{r3, r4, r5, pc}
 80026ce:	bf00      	nop
 80026d0:	200003c4 	.word	0x200003c4

080026d4 <__ssputs_r>:
 80026d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	688e      	ldr	r6, [r1, #8]
 80026da:	461f      	mov	r7, r3
 80026dc:	42be      	cmp	r6, r7
 80026de:	680b      	ldr	r3, [r1, #0]
 80026e0:	4682      	mov	sl, r0
 80026e2:	460c      	mov	r4, r1
 80026e4:	4690      	mov	r8, r2
 80026e6:	d82d      	bhi.n	8002744 <__ssputs_r+0x70>
 80026e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80026f0:	d026      	beq.n	8002740 <__ssputs_r+0x6c>
 80026f2:	6965      	ldr	r5, [r4, #20]
 80026f4:	6909      	ldr	r1, [r1, #16]
 80026f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026fa:	eba3 0901 	sub.w	r9, r3, r1
 80026fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002702:	1c7b      	adds	r3, r7, #1
 8002704:	444b      	add	r3, r9
 8002706:	106d      	asrs	r5, r5, #1
 8002708:	429d      	cmp	r5, r3
 800270a:	bf38      	it	cc
 800270c:	461d      	movcc	r5, r3
 800270e:	0553      	lsls	r3, r2, #21
 8002710:	d527      	bpl.n	8002762 <__ssputs_r+0x8e>
 8002712:	4629      	mov	r1, r5
 8002714:	f7ff fa3a 	bl	8001b8c <_malloc_r>
 8002718:	4606      	mov	r6, r0
 800271a:	b360      	cbz	r0, 8002776 <__ssputs_r+0xa2>
 800271c:	6921      	ldr	r1, [r4, #16]
 800271e:	464a      	mov	r2, r9
 8002720:	f000 fbae 	bl	8002e80 <memcpy>
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800272a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272e:	81a3      	strh	r3, [r4, #12]
 8002730:	6126      	str	r6, [r4, #16]
 8002732:	6165      	str	r5, [r4, #20]
 8002734:	444e      	add	r6, r9
 8002736:	eba5 0509 	sub.w	r5, r5, r9
 800273a:	6026      	str	r6, [r4, #0]
 800273c:	60a5      	str	r5, [r4, #8]
 800273e:	463e      	mov	r6, r7
 8002740:	42be      	cmp	r6, r7
 8002742:	d900      	bls.n	8002746 <__ssputs_r+0x72>
 8002744:	463e      	mov	r6, r7
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	4632      	mov	r2, r6
 800274a:	4641      	mov	r1, r8
 800274c:	f000 fb7e 	bl	8002e4c <memmove>
 8002750:	68a3      	ldr	r3, [r4, #8]
 8002752:	1b9b      	subs	r3, r3, r6
 8002754:	60a3      	str	r3, [r4, #8]
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	4433      	add	r3, r6
 800275a:	6023      	str	r3, [r4, #0]
 800275c:	2000      	movs	r0, #0
 800275e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002762:	462a      	mov	r2, r5
 8002764:	f000 fb9a 	bl	8002e9c <_realloc_r>
 8002768:	4606      	mov	r6, r0
 800276a:	2800      	cmp	r0, #0
 800276c:	d1e0      	bne.n	8002730 <__ssputs_r+0x5c>
 800276e:	6921      	ldr	r1, [r4, #16]
 8002770:	4650      	mov	r0, sl
 8002772:	f7ff ff65 	bl	8002640 <_free_r>
 8002776:	230c      	movs	r3, #12
 8002778:	f8ca 3000 	str.w	r3, [sl]
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002782:	81a3      	strh	r3, [r4, #12]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	e7e9      	b.n	800275e <__ssputs_r+0x8a>
	...

0800278c <_svfiprintf_r>:
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4698      	mov	r8, r3
 8002792:	898b      	ldrh	r3, [r1, #12]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	b09d      	sub	sp, #116	@ 0x74
 8002798:	4607      	mov	r7, r0
 800279a:	460d      	mov	r5, r1
 800279c:	4614      	mov	r4, r2
 800279e:	d510      	bpl.n	80027c2 <_svfiprintf_r+0x36>
 80027a0:	690b      	ldr	r3, [r1, #16]
 80027a2:	b973      	cbnz	r3, 80027c2 <_svfiprintf_r+0x36>
 80027a4:	2140      	movs	r1, #64	@ 0x40
 80027a6:	f7ff f9f1 	bl	8001b8c <_malloc_r>
 80027aa:	6028      	str	r0, [r5, #0]
 80027ac:	6128      	str	r0, [r5, #16]
 80027ae:	b930      	cbnz	r0, 80027be <_svfiprintf_r+0x32>
 80027b0:	230c      	movs	r3, #12
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	b01d      	add	sp, #116	@ 0x74
 80027ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027be:	2340      	movs	r3, #64	@ 0x40
 80027c0:	616b      	str	r3, [r5, #20]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80027c6:	2320      	movs	r3, #32
 80027c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80027cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80027d0:	2330      	movs	r3, #48	@ 0x30
 80027d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002970 <_svfiprintf_r+0x1e4>
 80027d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027da:	f04f 0901 	mov.w	r9, #1
 80027de:	4623      	mov	r3, r4
 80027e0:	469a      	mov	sl, r3
 80027e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e6:	b10a      	cbz	r2, 80027ec <_svfiprintf_r+0x60>
 80027e8:	2a25      	cmp	r2, #37	@ 0x25
 80027ea:	d1f9      	bne.n	80027e0 <_svfiprintf_r+0x54>
 80027ec:	ebba 0b04 	subs.w	fp, sl, r4
 80027f0:	d00b      	beq.n	800280a <_svfiprintf_r+0x7e>
 80027f2:	465b      	mov	r3, fp
 80027f4:	4622      	mov	r2, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	4638      	mov	r0, r7
 80027fa:	f7ff ff6b 	bl	80026d4 <__ssputs_r>
 80027fe:	3001      	adds	r0, #1
 8002800:	f000 80a7 	beq.w	8002952 <_svfiprintf_r+0x1c6>
 8002804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002806:	445a      	add	r2, fp
 8002808:	9209      	str	r2, [sp, #36]	@ 0x24
 800280a:	f89a 3000 	ldrb.w	r3, [sl]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 809f 	beq.w	8002952 <_svfiprintf_r+0x1c6>
 8002814:	2300      	movs	r3, #0
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800281e:	f10a 0a01 	add.w	sl, sl, #1
 8002822:	9304      	str	r3, [sp, #16]
 8002824:	9307      	str	r3, [sp, #28]
 8002826:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800282a:	931a      	str	r3, [sp, #104]	@ 0x68
 800282c:	4654      	mov	r4, sl
 800282e:	2205      	movs	r2, #5
 8002830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002834:	484e      	ldr	r0, [pc, #312]	@ (8002970 <_svfiprintf_r+0x1e4>)
 8002836:	f7fd fcdb 	bl	80001f0 <memchr>
 800283a:	9a04      	ldr	r2, [sp, #16]
 800283c:	b9d8      	cbnz	r0, 8002876 <_svfiprintf_r+0xea>
 800283e:	06d0      	lsls	r0, r2, #27
 8002840:	bf44      	itt	mi
 8002842:	2320      	movmi	r3, #32
 8002844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002848:	0711      	lsls	r1, r2, #28
 800284a:	bf44      	itt	mi
 800284c:	232b      	movmi	r3, #43	@ 0x2b
 800284e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002852:	f89a 3000 	ldrb.w	r3, [sl]
 8002856:	2b2a      	cmp	r3, #42	@ 0x2a
 8002858:	d015      	beq.n	8002886 <_svfiprintf_r+0xfa>
 800285a:	9a07      	ldr	r2, [sp, #28]
 800285c:	4654      	mov	r4, sl
 800285e:	2000      	movs	r0, #0
 8002860:	f04f 0c0a 	mov.w	ip, #10
 8002864:	4621      	mov	r1, r4
 8002866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800286a:	3b30      	subs	r3, #48	@ 0x30
 800286c:	2b09      	cmp	r3, #9
 800286e:	d94b      	bls.n	8002908 <_svfiprintf_r+0x17c>
 8002870:	b1b0      	cbz	r0, 80028a0 <_svfiprintf_r+0x114>
 8002872:	9207      	str	r2, [sp, #28]
 8002874:	e014      	b.n	80028a0 <_svfiprintf_r+0x114>
 8002876:	eba0 0308 	sub.w	r3, r0, r8
 800287a:	fa09 f303 	lsl.w	r3, r9, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	9304      	str	r3, [sp, #16]
 8002882:	46a2      	mov	sl, r4
 8002884:	e7d2      	b.n	800282c <_svfiprintf_r+0xa0>
 8002886:	9b03      	ldr	r3, [sp, #12]
 8002888:	1d19      	adds	r1, r3, #4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	9103      	str	r1, [sp, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bfbb      	ittet	lt
 8002892:	425b      	neglt	r3, r3
 8002894:	f042 0202 	orrlt.w	r2, r2, #2
 8002898:	9307      	strge	r3, [sp, #28]
 800289a:	9307      	strlt	r3, [sp, #28]
 800289c:	bfb8      	it	lt
 800289e:	9204      	strlt	r2, [sp, #16]
 80028a0:	7823      	ldrb	r3, [r4, #0]
 80028a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80028a4:	d10a      	bne.n	80028bc <_svfiprintf_r+0x130>
 80028a6:	7863      	ldrb	r3, [r4, #1]
 80028a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80028aa:	d132      	bne.n	8002912 <_svfiprintf_r+0x186>
 80028ac:	9b03      	ldr	r3, [sp, #12]
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	9203      	str	r2, [sp, #12]
 80028b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028b8:	3402      	adds	r4, #2
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002980 <_svfiprintf_r+0x1f4>
 80028c0:	7821      	ldrb	r1, [r4, #0]
 80028c2:	2203      	movs	r2, #3
 80028c4:	4650      	mov	r0, sl
 80028c6:	f7fd fc93 	bl	80001f0 <memchr>
 80028ca:	b138      	cbz	r0, 80028dc <_svfiprintf_r+0x150>
 80028cc:	9b04      	ldr	r3, [sp, #16]
 80028ce:	eba0 000a 	sub.w	r0, r0, sl
 80028d2:	2240      	movs	r2, #64	@ 0x40
 80028d4:	4082      	lsls	r2, r0
 80028d6:	4313      	orrs	r3, r2
 80028d8:	3401      	adds	r4, #1
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e0:	4824      	ldr	r0, [pc, #144]	@ (8002974 <_svfiprintf_r+0x1e8>)
 80028e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028e6:	2206      	movs	r2, #6
 80028e8:	f7fd fc82 	bl	80001f0 <memchr>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d036      	beq.n	800295e <_svfiprintf_r+0x1d2>
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <_svfiprintf_r+0x1ec>)
 80028f2:	bb1b      	cbnz	r3, 800293c <_svfiprintf_r+0x1b0>
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	3307      	adds	r3, #7
 80028f8:	f023 0307 	bic.w	r3, r3, #7
 80028fc:	3308      	adds	r3, #8
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002902:	4433      	add	r3, r6
 8002904:	9309      	str	r3, [sp, #36]	@ 0x24
 8002906:	e76a      	b.n	80027de <_svfiprintf_r+0x52>
 8002908:	fb0c 3202 	mla	r2, ip, r2, r3
 800290c:	460c      	mov	r4, r1
 800290e:	2001      	movs	r0, #1
 8002910:	e7a8      	b.n	8002864 <_svfiprintf_r+0xd8>
 8002912:	2300      	movs	r3, #0
 8002914:	3401      	adds	r4, #1
 8002916:	9305      	str	r3, [sp, #20]
 8002918:	4619      	mov	r1, r3
 800291a:	f04f 0c0a 	mov.w	ip, #10
 800291e:	4620      	mov	r0, r4
 8002920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002924:	3a30      	subs	r2, #48	@ 0x30
 8002926:	2a09      	cmp	r2, #9
 8002928:	d903      	bls.n	8002932 <_svfiprintf_r+0x1a6>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0c6      	beq.n	80028bc <_svfiprintf_r+0x130>
 800292e:	9105      	str	r1, [sp, #20]
 8002930:	e7c4      	b.n	80028bc <_svfiprintf_r+0x130>
 8002932:	fb0c 2101 	mla	r1, ip, r1, r2
 8002936:	4604      	mov	r4, r0
 8002938:	2301      	movs	r3, #1
 800293a:	e7f0      	b.n	800291e <_svfiprintf_r+0x192>
 800293c:	ab03      	add	r3, sp, #12
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	462a      	mov	r2, r5
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <_svfiprintf_r+0x1f0>)
 8002944:	a904      	add	r1, sp, #16
 8002946:	4638      	mov	r0, r7
 8002948:	f3af 8000 	nop.w
 800294c:	1c42      	adds	r2, r0, #1
 800294e:	4606      	mov	r6, r0
 8002950:	d1d6      	bne.n	8002900 <_svfiprintf_r+0x174>
 8002952:	89ab      	ldrh	r3, [r5, #12]
 8002954:	065b      	lsls	r3, r3, #25
 8002956:	f53f af2d 	bmi.w	80027b4 <_svfiprintf_r+0x28>
 800295a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800295c:	e72c      	b.n	80027b8 <_svfiprintf_r+0x2c>
 800295e:	ab03      	add	r3, sp, #12
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	462a      	mov	r2, r5
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <_svfiprintf_r+0x1f0>)
 8002966:	a904      	add	r1, sp, #16
 8002968:	4638      	mov	r0, r7
 800296a:	f000 f879 	bl	8002a60 <_printf_i>
 800296e:	e7ed      	b.n	800294c <_svfiprintf_r+0x1c0>
 8002970:	080037bf 	.word	0x080037bf
 8002974:	080037c9 	.word	0x080037c9
 8002978:	00000000 	.word	0x00000000
 800297c:	080026d5 	.word	0x080026d5
 8002980:	080037c5 	.word	0x080037c5

08002984 <_printf_common>:
 8002984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002988:	4616      	mov	r6, r2
 800298a:	4698      	mov	r8, r3
 800298c:	688a      	ldr	r2, [r1, #8]
 800298e:	690b      	ldr	r3, [r1, #16]
 8002990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002994:	4293      	cmp	r3, r2
 8002996:	bfb8      	it	lt
 8002998:	4613      	movlt	r3, r2
 800299a:	6033      	str	r3, [r6, #0]
 800299c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029a0:	4607      	mov	r7, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	b10a      	cbz	r2, 80029aa <_printf_common+0x26>
 80029a6:	3301      	adds	r3, #1
 80029a8:	6033      	str	r3, [r6, #0]
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	0699      	lsls	r1, r3, #26
 80029ae:	bf42      	ittt	mi
 80029b0:	6833      	ldrmi	r3, [r6, #0]
 80029b2:	3302      	addmi	r3, #2
 80029b4:	6033      	strmi	r3, [r6, #0]
 80029b6:	6825      	ldr	r5, [r4, #0]
 80029b8:	f015 0506 	ands.w	r5, r5, #6
 80029bc:	d106      	bne.n	80029cc <_printf_common+0x48>
 80029be:	f104 0a19 	add.w	sl, r4, #25
 80029c2:	68e3      	ldr	r3, [r4, #12]
 80029c4:	6832      	ldr	r2, [r6, #0]
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	42ab      	cmp	r3, r5
 80029ca:	dc26      	bgt.n	8002a1a <_printf_common+0x96>
 80029cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	3b00      	subs	r3, #0
 80029d4:	bf18      	it	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	0692      	lsls	r2, r2, #26
 80029da:	d42b      	bmi.n	8002a34 <_printf_common+0xb0>
 80029dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80029e0:	4641      	mov	r1, r8
 80029e2:	4638      	mov	r0, r7
 80029e4:	47c8      	blx	r9
 80029e6:	3001      	adds	r0, #1
 80029e8:	d01e      	beq.n	8002a28 <_printf_common+0xa4>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	f003 0306 	and.w	r3, r3, #6
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf02      	ittt	eq
 80029f6:	68e5      	ldreq	r5, [r4, #12]
 80029f8:	6833      	ldreq	r3, [r6, #0]
 80029fa:	1aed      	subeq	r5, r5, r3
 80029fc:	68a3      	ldr	r3, [r4, #8]
 80029fe:	bf0c      	ite	eq
 8002a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a04:	2500      	movne	r5, #0
 8002a06:	4293      	cmp	r3, r2
 8002a08:	bfc4      	itt	gt
 8002a0a:	1a9b      	subgt	r3, r3, r2
 8002a0c:	18ed      	addgt	r5, r5, r3
 8002a0e:	2600      	movs	r6, #0
 8002a10:	341a      	adds	r4, #26
 8002a12:	42b5      	cmp	r5, r6
 8002a14:	d11a      	bne.n	8002a4c <_printf_common+0xc8>
 8002a16:	2000      	movs	r0, #0
 8002a18:	e008      	b.n	8002a2c <_printf_common+0xa8>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4652      	mov	r2, sl
 8002a1e:	4641      	mov	r1, r8
 8002a20:	4638      	mov	r0, r7
 8002a22:	47c8      	blx	r9
 8002a24:	3001      	adds	r0, #1
 8002a26:	d103      	bne.n	8002a30 <_printf_common+0xac>
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a30:	3501      	adds	r5, #1
 8002a32:	e7c6      	b.n	80029c2 <_printf_common+0x3e>
 8002a34:	18e1      	adds	r1, r4, r3
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	2030      	movs	r0, #48	@ 0x30
 8002a3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a3e:	4422      	add	r2, r4
 8002a40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a48:	3302      	adds	r3, #2
 8002a4a:	e7c7      	b.n	80029dc <_printf_common+0x58>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4622      	mov	r2, r4
 8002a50:	4641      	mov	r1, r8
 8002a52:	4638      	mov	r0, r7
 8002a54:	47c8      	blx	r9
 8002a56:	3001      	adds	r0, #1
 8002a58:	d0e6      	beq.n	8002a28 <_printf_common+0xa4>
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	e7d9      	b.n	8002a12 <_printf_common+0x8e>
	...

08002a60 <_printf_i>:
 8002a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	7e0f      	ldrb	r7, [r1, #24]
 8002a66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a68:	2f78      	cmp	r7, #120	@ 0x78
 8002a6a:	4691      	mov	r9, r2
 8002a6c:	4680      	mov	r8, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	469a      	mov	sl, r3
 8002a72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a76:	d807      	bhi.n	8002a88 <_printf_i+0x28>
 8002a78:	2f62      	cmp	r7, #98	@ 0x62
 8002a7a:	d80a      	bhi.n	8002a92 <_printf_i+0x32>
 8002a7c:	2f00      	cmp	r7, #0
 8002a7e:	f000 80d2 	beq.w	8002c26 <_printf_i+0x1c6>
 8002a82:	2f58      	cmp	r7, #88	@ 0x58
 8002a84:	f000 80b9 	beq.w	8002bfa <_printf_i+0x19a>
 8002a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a90:	e03a      	b.n	8002b08 <_printf_i+0xa8>
 8002a92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a96:	2b15      	cmp	r3, #21
 8002a98:	d8f6      	bhi.n	8002a88 <_printf_i+0x28>
 8002a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8002aa0 <_printf_i+0x40>)
 8002a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aa0:	08002af9 	.word	0x08002af9
 8002aa4:	08002b0d 	.word	0x08002b0d
 8002aa8:	08002a89 	.word	0x08002a89
 8002aac:	08002a89 	.word	0x08002a89
 8002ab0:	08002a89 	.word	0x08002a89
 8002ab4:	08002a89 	.word	0x08002a89
 8002ab8:	08002b0d 	.word	0x08002b0d
 8002abc:	08002a89 	.word	0x08002a89
 8002ac0:	08002a89 	.word	0x08002a89
 8002ac4:	08002a89 	.word	0x08002a89
 8002ac8:	08002a89 	.word	0x08002a89
 8002acc:	08002c0d 	.word	0x08002c0d
 8002ad0:	08002b37 	.word	0x08002b37
 8002ad4:	08002bc7 	.word	0x08002bc7
 8002ad8:	08002a89 	.word	0x08002a89
 8002adc:	08002a89 	.word	0x08002a89
 8002ae0:	08002c2f 	.word	0x08002c2f
 8002ae4:	08002a89 	.word	0x08002a89
 8002ae8:	08002b37 	.word	0x08002b37
 8002aec:	08002a89 	.word	0x08002a89
 8002af0:	08002a89 	.word	0x08002a89
 8002af4:	08002bcf 	.word	0x08002bcf
 8002af8:	6833      	ldr	r3, [r6, #0]
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6032      	str	r2, [r6, #0]
 8002b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e09d      	b.n	8002c48 <_printf_i+0x1e8>
 8002b0c:	6833      	ldr	r3, [r6, #0]
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	1d19      	adds	r1, r3, #4
 8002b12:	6031      	str	r1, [r6, #0]
 8002b14:	0606      	lsls	r6, r0, #24
 8002b16:	d501      	bpl.n	8002b1c <_printf_i+0xbc>
 8002b18:	681d      	ldr	r5, [r3, #0]
 8002b1a:	e003      	b.n	8002b24 <_printf_i+0xc4>
 8002b1c:	0645      	lsls	r5, r0, #25
 8002b1e:	d5fb      	bpl.n	8002b18 <_printf_i+0xb8>
 8002b20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	da03      	bge.n	8002b30 <_printf_i+0xd0>
 8002b28:	232d      	movs	r3, #45	@ 0x2d
 8002b2a:	426d      	negs	r5, r5
 8002b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b30:	4859      	ldr	r0, [pc, #356]	@ (8002c98 <_printf_i+0x238>)
 8002b32:	230a      	movs	r3, #10
 8002b34:	e011      	b.n	8002b5a <_printf_i+0xfa>
 8002b36:	6821      	ldr	r1, [r4, #0]
 8002b38:	6833      	ldr	r3, [r6, #0]
 8002b3a:	0608      	lsls	r0, r1, #24
 8002b3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b40:	d402      	bmi.n	8002b48 <_printf_i+0xe8>
 8002b42:	0649      	lsls	r1, r1, #25
 8002b44:	bf48      	it	mi
 8002b46:	b2ad      	uxthmi	r5, r5
 8002b48:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b4a:	4853      	ldr	r0, [pc, #332]	@ (8002c98 <_printf_i+0x238>)
 8002b4c:	6033      	str	r3, [r6, #0]
 8002b4e:	bf14      	ite	ne
 8002b50:	230a      	movne	r3, #10
 8002b52:	2308      	moveq	r3, #8
 8002b54:	2100      	movs	r1, #0
 8002b56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b5a:	6866      	ldr	r6, [r4, #4]
 8002b5c:	60a6      	str	r6, [r4, #8]
 8002b5e:	2e00      	cmp	r6, #0
 8002b60:	bfa2      	ittt	ge
 8002b62:	6821      	ldrge	r1, [r4, #0]
 8002b64:	f021 0104 	bicge.w	r1, r1, #4
 8002b68:	6021      	strge	r1, [r4, #0]
 8002b6a:	b90d      	cbnz	r5, 8002b70 <_printf_i+0x110>
 8002b6c:	2e00      	cmp	r6, #0
 8002b6e:	d04b      	beq.n	8002c08 <_printf_i+0x1a8>
 8002b70:	4616      	mov	r6, r2
 8002b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b76:	fb03 5711 	mls	r7, r3, r1, r5
 8002b7a:	5dc7      	ldrb	r7, [r0, r7]
 8002b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b80:	462f      	mov	r7, r5
 8002b82:	42bb      	cmp	r3, r7
 8002b84:	460d      	mov	r5, r1
 8002b86:	d9f4      	bls.n	8002b72 <_printf_i+0x112>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d10b      	bne.n	8002ba4 <_printf_i+0x144>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	07df      	lsls	r7, r3, #31
 8002b90:	d508      	bpl.n	8002ba4 <_printf_i+0x144>
 8002b92:	6923      	ldr	r3, [r4, #16]
 8002b94:	6861      	ldr	r1, [r4, #4]
 8002b96:	4299      	cmp	r1, r3
 8002b98:	bfde      	ittt	le
 8002b9a:	2330      	movle	r3, #48	@ 0x30
 8002b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ba0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ba4:	1b92      	subs	r2, r2, r6
 8002ba6:	6122      	str	r2, [r4, #16]
 8002ba8:	f8cd a000 	str.w	sl, [sp]
 8002bac:	464b      	mov	r3, r9
 8002bae:	aa03      	add	r2, sp, #12
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	f7ff fee6 	bl	8002984 <_printf_common>
 8002bb8:	3001      	adds	r0, #1
 8002bba:	d14a      	bne.n	8002c52 <_printf_i+0x1f2>
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	b004      	add	sp, #16
 8002bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f043 0320 	orr.w	r3, r3, #32
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	4833      	ldr	r0, [pc, #204]	@ (8002c9c <_printf_i+0x23c>)
 8002bd0:	2778      	movs	r7, #120	@ 0x78
 8002bd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	6831      	ldr	r1, [r6, #0]
 8002bda:	061f      	lsls	r7, r3, #24
 8002bdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8002be0:	d402      	bmi.n	8002be8 <_printf_i+0x188>
 8002be2:	065f      	lsls	r7, r3, #25
 8002be4:	bf48      	it	mi
 8002be6:	b2ad      	uxthmi	r5, r5
 8002be8:	6031      	str	r1, [r6, #0]
 8002bea:	07d9      	lsls	r1, r3, #31
 8002bec:	bf44      	itt	mi
 8002bee:	f043 0320 	orrmi.w	r3, r3, #32
 8002bf2:	6023      	strmi	r3, [r4, #0]
 8002bf4:	b11d      	cbz	r5, 8002bfe <_printf_i+0x19e>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	e7ac      	b.n	8002b54 <_printf_i+0xf4>
 8002bfa:	4827      	ldr	r0, [pc, #156]	@ (8002c98 <_printf_i+0x238>)
 8002bfc:	e7e9      	b.n	8002bd2 <_printf_i+0x172>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	f023 0320 	bic.w	r3, r3, #32
 8002c04:	6023      	str	r3, [r4, #0]
 8002c06:	e7f6      	b.n	8002bf6 <_printf_i+0x196>
 8002c08:	4616      	mov	r6, r2
 8002c0a:	e7bd      	b.n	8002b88 <_printf_i+0x128>
 8002c0c:	6833      	ldr	r3, [r6, #0]
 8002c0e:	6825      	ldr	r5, [r4, #0]
 8002c10:	6961      	ldr	r1, [r4, #20]
 8002c12:	1d18      	adds	r0, r3, #4
 8002c14:	6030      	str	r0, [r6, #0]
 8002c16:	062e      	lsls	r6, r5, #24
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	d501      	bpl.n	8002c20 <_printf_i+0x1c0>
 8002c1c:	6019      	str	r1, [r3, #0]
 8002c1e:	e002      	b.n	8002c26 <_printf_i+0x1c6>
 8002c20:	0668      	lsls	r0, r5, #25
 8002c22:	d5fb      	bpl.n	8002c1c <_printf_i+0x1bc>
 8002c24:	8019      	strh	r1, [r3, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	6123      	str	r3, [r4, #16]
 8002c2a:	4616      	mov	r6, r2
 8002c2c:	e7bc      	b.n	8002ba8 <_printf_i+0x148>
 8002c2e:	6833      	ldr	r3, [r6, #0]
 8002c30:	1d1a      	adds	r2, r3, #4
 8002c32:	6032      	str	r2, [r6, #0]
 8002c34:	681e      	ldr	r6, [r3, #0]
 8002c36:	6862      	ldr	r2, [r4, #4]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f7fd fad8 	bl	80001f0 <memchr>
 8002c40:	b108      	cbz	r0, 8002c46 <_printf_i+0x1e6>
 8002c42:	1b80      	subs	r0, r0, r6
 8002c44:	6060      	str	r0, [r4, #4]
 8002c46:	6863      	ldr	r3, [r4, #4]
 8002c48:	6123      	str	r3, [r4, #16]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c50:	e7aa      	b.n	8002ba8 <_printf_i+0x148>
 8002c52:	6923      	ldr	r3, [r4, #16]
 8002c54:	4632      	mov	r2, r6
 8002c56:	4649      	mov	r1, r9
 8002c58:	4640      	mov	r0, r8
 8002c5a:	47d0      	blx	sl
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d0ad      	beq.n	8002bbc <_printf_i+0x15c>
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	079b      	lsls	r3, r3, #30
 8002c64:	d413      	bmi.n	8002c8e <_printf_i+0x22e>
 8002c66:	68e0      	ldr	r0, [r4, #12]
 8002c68:	9b03      	ldr	r3, [sp, #12]
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	bfb8      	it	lt
 8002c6e:	4618      	movlt	r0, r3
 8002c70:	e7a6      	b.n	8002bc0 <_printf_i+0x160>
 8002c72:	2301      	movs	r3, #1
 8002c74:	4632      	mov	r2, r6
 8002c76:	4649      	mov	r1, r9
 8002c78:	4640      	mov	r0, r8
 8002c7a:	47d0      	blx	sl
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d09d      	beq.n	8002bbc <_printf_i+0x15c>
 8002c80:	3501      	adds	r5, #1
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	9903      	ldr	r1, [sp, #12]
 8002c86:	1a5b      	subs	r3, r3, r1
 8002c88:	42ab      	cmp	r3, r5
 8002c8a:	dcf2      	bgt.n	8002c72 <_printf_i+0x212>
 8002c8c:	e7eb      	b.n	8002c66 <_printf_i+0x206>
 8002c8e:	2500      	movs	r5, #0
 8002c90:	f104 0619 	add.w	r6, r4, #25
 8002c94:	e7f5      	b.n	8002c82 <_printf_i+0x222>
 8002c96:	bf00      	nop
 8002c98:	080037d0 	.word	0x080037d0
 8002c9c:	080037e1 	.word	0x080037e1

08002ca0 <__sflush_r>:
 8002ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca8:	0716      	lsls	r6, r2, #28
 8002caa:	4605      	mov	r5, r0
 8002cac:	460c      	mov	r4, r1
 8002cae:	d454      	bmi.n	8002d5a <__sflush_r+0xba>
 8002cb0:	684b      	ldr	r3, [r1, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	dc02      	bgt.n	8002cbc <__sflush_r+0x1c>
 8002cb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	dd48      	ble.n	8002d4e <__sflush_r+0xae>
 8002cbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cbe:	2e00      	cmp	r6, #0
 8002cc0:	d045      	beq.n	8002d4e <__sflush_r+0xae>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002cc8:	682f      	ldr	r7, [r5, #0]
 8002cca:	6a21      	ldr	r1, [r4, #32]
 8002ccc:	602b      	str	r3, [r5, #0]
 8002cce:	d030      	beq.n	8002d32 <__sflush_r+0x92>
 8002cd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	0759      	lsls	r1, r3, #29
 8002cd6:	d505      	bpl.n	8002ce4 <__sflush_r+0x44>
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002cde:	b10b      	cbz	r3, 8002ce4 <__sflush_r+0x44>
 8002ce0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ce2:	1ad2      	subs	r2, r2, r3
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ce8:	6a21      	ldr	r1, [r4, #32]
 8002cea:	4628      	mov	r0, r5
 8002cec:	47b0      	blx	r6
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	d106      	bne.n	8002d02 <__sflush_r+0x62>
 8002cf4:	6829      	ldr	r1, [r5, #0]
 8002cf6:	291d      	cmp	r1, #29
 8002cf8:	d82b      	bhi.n	8002d52 <__sflush_r+0xb2>
 8002cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8002da4 <__sflush_r+0x104>)
 8002cfc:	410a      	asrs	r2, r1
 8002cfe:	07d6      	lsls	r6, r2, #31
 8002d00:	d427      	bmi.n	8002d52 <__sflush_r+0xb2>
 8002d02:	2200      	movs	r2, #0
 8002d04:	6062      	str	r2, [r4, #4]
 8002d06:	04d9      	lsls	r1, r3, #19
 8002d08:	6922      	ldr	r2, [r4, #16]
 8002d0a:	6022      	str	r2, [r4, #0]
 8002d0c:	d504      	bpl.n	8002d18 <__sflush_r+0x78>
 8002d0e:	1c42      	adds	r2, r0, #1
 8002d10:	d101      	bne.n	8002d16 <__sflush_r+0x76>
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	b903      	cbnz	r3, 8002d18 <__sflush_r+0x78>
 8002d16:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d1a:	602f      	str	r7, [r5, #0]
 8002d1c:	b1b9      	cbz	r1, 8002d4e <__sflush_r+0xae>
 8002d1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d22:	4299      	cmp	r1, r3
 8002d24:	d002      	beq.n	8002d2c <__sflush_r+0x8c>
 8002d26:	4628      	mov	r0, r5
 8002d28:	f7ff fc8a 	bl	8002640 <_free_r>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d30:	e00d      	b.n	8002d4e <__sflush_r+0xae>
 8002d32:	2301      	movs	r3, #1
 8002d34:	4628      	mov	r0, r5
 8002d36:	47b0      	blx	r6
 8002d38:	4602      	mov	r2, r0
 8002d3a:	1c50      	adds	r0, r2, #1
 8002d3c:	d1c9      	bne.n	8002cd2 <__sflush_r+0x32>
 8002d3e:	682b      	ldr	r3, [r5, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0c6      	beq.n	8002cd2 <__sflush_r+0x32>
 8002d44:	2b1d      	cmp	r3, #29
 8002d46:	d001      	beq.n	8002d4c <__sflush_r+0xac>
 8002d48:	2b16      	cmp	r3, #22
 8002d4a:	d11e      	bne.n	8002d8a <__sflush_r+0xea>
 8002d4c:	602f      	str	r7, [r5, #0]
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e022      	b.n	8002d98 <__sflush_r+0xf8>
 8002d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	e01b      	b.n	8002d92 <__sflush_r+0xf2>
 8002d5a:	690f      	ldr	r7, [r1, #16]
 8002d5c:	2f00      	cmp	r7, #0
 8002d5e:	d0f6      	beq.n	8002d4e <__sflush_r+0xae>
 8002d60:	0793      	lsls	r3, r2, #30
 8002d62:	680e      	ldr	r6, [r1, #0]
 8002d64:	bf08      	it	eq
 8002d66:	694b      	ldreq	r3, [r1, #20]
 8002d68:	600f      	str	r7, [r1, #0]
 8002d6a:	bf18      	it	ne
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	eba6 0807 	sub.w	r8, r6, r7
 8002d72:	608b      	str	r3, [r1, #8]
 8002d74:	f1b8 0f00 	cmp.w	r8, #0
 8002d78:	dde9      	ble.n	8002d4e <__sflush_r+0xae>
 8002d7a:	6a21      	ldr	r1, [r4, #32]
 8002d7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002d7e:	4643      	mov	r3, r8
 8002d80:	463a      	mov	r2, r7
 8002d82:	4628      	mov	r0, r5
 8002d84:	47b0      	blx	r6
 8002d86:	2800      	cmp	r0, #0
 8002d88:	dc08      	bgt.n	8002d9c <__sflush_r+0xfc>
 8002d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d92:	81a3      	strh	r3, [r4, #12]
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9c:	4407      	add	r7, r0
 8002d9e:	eba8 0800 	sub.w	r8, r8, r0
 8002da2:	e7e7      	b.n	8002d74 <__sflush_r+0xd4>
 8002da4:	dfbffffe 	.word	0xdfbffffe

08002da8 <_fflush_r>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	690b      	ldr	r3, [r1, #16]
 8002dac:	4605      	mov	r5, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	b913      	cbnz	r3, 8002db8 <_fflush_r+0x10>
 8002db2:	2500      	movs	r5, #0
 8002db4:	4628      	mov	r0, r5
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	b118      	cbz	r0, 8002dc2 <_fflush_r+0x1a>
 8002dba:	6a03      	ldr	r3, [r0, #32]
 8002dbc:	b90b      	cbnz	r3, 8002dc2 <_fflush_r+0x1a>
 8002dbe:	f7ff f881 	bl	8001ec4 <__sinit>
 8002dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f3      	beq.n	8002db2 <_fflush_r+0xa>
 8002dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002dcc:	07d0      	lsls	r0, r2, #31
 8002dce:	d404      	bmi.n	8002dda <_fflush_r+0x32>
 8002dd0:	0599      	lsls	r1, r3, #22
 8002dd2:	d402      	bmi.n	8002dda <_fflush_r+0x32>
 8002dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dd6:	f7ff fc30 	bl	800263a <__retarget_lock_acquire_recursive>
 8002dda:	4628      	mov	r0, r5
 8002ddc:	4621      	mov	r1, r4
 8002dde:	f7ff ff5f 	bl	8002ca0 <__sflush_r>
 8002de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002de4:	07da      	lsls	r2, r3, #31
 8002de6:	4605      	mov	r5, r0
 8002de8:	d4e4      	bmi.n	8002db4 <_fflush_r+0xc>
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	059b      	lsls	r3, r3, #22
 8002dee:	d4e1      	bmi.n	8002db4 <_fflush_r+0xc>
 8002df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002df2:	f7ff fc23 	bl	800263c <__retarget_lock_release_recursive>
 8002df6:	e7dd      	b.n	8002db4 <_fflush_r+0xc>

08002df8 <fileno>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4d13      	ldr	r5, [pc, #76]	@ (8002e48 <fileno+0x50>)
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	6828      	ldr	r0, [r5, #0]
 8002e00:	b118      	cbz	r0, 8002e0a <fileno+0x12>
 8002e02:	6a03      	ldr	r3, [r0, #32]
 8002e04:	b90b      	cbnz	r3, 8002e0a <fileno+0x12>
 8002e06:	f7ff f85d 	bl	8001ec4 <__sinit>
 8002e0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e0c:	07d8      	lsls	r0, r3, #31
 8002e0e:	d405      	bmi.n	8002e1c <fileno+0x24>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	0599      	lsls	r1, r3, #22
 8002e14:	d402      	bmi.n	8002e1c <fileno+0x24>
 8002e16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e18:	f7ff fc0f 	bl	800263a <__retarget_lock_acquire_recursive>
 8002e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e20:	b15b      	cbz	r3, 8002e3a <fileno+0x42>
 8002e22:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8002e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e28:	07d2      	lsls	r2, r2, #31
 8002e2a:	d404      	bmi.n	8002e36 <fileno+0x3e>
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	d402      	bmi.n	8002e36 <fileno+0x3e>
 8002e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e32:	f7ff fc03 	bl	800263c <__retarget_lock_release_recursive>
 8002e36:	4628      	mov	r0, r5
 8002e38:	bd38      	pop	{r3, r4, r5, pc}
 8002e3a:	682a      	ldr	r2, [r5, #0]
 8002e3c:	2109      	movs	r1, #9
 8002e3e:	6011      	str	r1, [r2, #0]
 8002e40:	f04f 35ff 	mov.w	r5, #4294967295
 8002e44:	e7ef      	b.n	8002e26 <fileno+0x2e>
 8002e46:	bf00      	nop
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <memmove>:
 8002e4c:	4288      	cmp	r0, r1
 8002e4e:	b510      	push	{r4, lr}
 8002e50:	eb01 0402 	add.w	r4, r1, r2
 8002e54:	d902      	bls.n	8002e5c <memmove+0x10>
 8002e56:	4284      	cmp	r4, r0
 8002e58:	4623      	mov	r3, r4
 8002e5a:	d807      	bhi.n	8002e6c <memmove+0x20>
 8002e5c:	1e43      	subs	r3, r0, #1
 8002e5e:	42a1      	cmp	r1, r4
 8002e60:	d008      	beq.n	8002e74 <memmove+0x28>
 8002e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e6a:	e7f8      	b.n	8002e5e <memmove+0x12>
 8002e6c:	4402      	add	r2, r0
 8002e6e:	4601      	mov	r1, r0
 8002e70:	428a      	cmp	r2, r1
 8002e72:	d100      	bne.n	8002e76 <memmove+0x2a>
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e7e:	e7f7      	b.n	8002e70 <memmove+0x24>

08002e80 <memcpy>:
 8002e80:	440a      	add	r2, r1
 8002e82:	4291      	cmp	r1, r2
 8002e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e88:	d100      	bne.n	8002e8c <memcpy+0xc>
 8002e8a:	4770      	bx	lr
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e96:	4291      	cmp	r1, r2
 8002e98:	d1f9      	bne.n	8002e8e <memcpy+0xe>
 8002e9a:	bd10      	pop	{r4, pc}

08002e9c <_realloc_r>:
 8002e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	4615      	mov	r5, r2
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	b921      	cbnz	r1, 8002eb2 <_realloc_r+0x16>
 8002ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eac:	4611      	mov	r1, r2
 8002eae:	f7fe be6d 	b.w	8001b8c <_malloc_r>
 8002eb2:	b92a      	cbnz	r2, 8002ec0 <_realloc_r+0x24>
 8002eb4:	f7ff fbc4 	bl	8002640 <_free_r>
 8002eb8:	2400      	movs	r4, #0
 8002eba:	4620      	mov	r0, r4
 8002ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ec0:	f000 f81a 	bl	8002ef8 <_malloc_usable_size_r>
 8002ec4:	4285      	cmp	r5, r0
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	d802      	bhi.n	8002ed0 <_realloc_r+0x34>
 8002eca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002ece:	d8f4      	bhi.n	8002eba <_realloc_r+0x1e>
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4640      	mov	r0, r8
 8002ed4:	f7fe fe5a 	bl	8001b8c <_malloc_r>
 8002ed8:	4607      	mov	r7, r0
 8002eda:	2800      	cmp	r0, #0
 8002edc:	d0ec      	beq.n	8002eb8 <_realloc_r+0x1c>
 8002ede:	42b5      	cmp	r5, r6
 8002ee0:	462a      	mov	r2, r5
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	bf28      	it	cs
 8002ee6:	4632      	movcs	r2, r6
 8002ee8:	f7ff ffca 	bl	8002e80 <memcpy>
 8002eec:	4621      	mov	r1, r4
 8002eee:	4640      	mov	r0, r8
 8002ef0:	f7ff fba6 	bl	8002640 <_free_r>
 8002ef4:	463c      	mov	r4, r7
 8002ef6:	e7e0      	b.n	8002eba <_realloc_r+0x1e>

08002ef8 <_malloc_usable_size_r>:
 8002ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002efc:	1f18      	subs	r0, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bfbc      	itt	lt
 8002f02:	580b      	ldrlt	r3, [r1, r0]
 8002f04:	18c0      	addlt	r0, r0, r3
 8002f06:	4770      	bx	lr

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
