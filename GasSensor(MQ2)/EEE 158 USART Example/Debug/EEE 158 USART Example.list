
EEE 158 USART Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003a48  08003a48  00013a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b80  08003b80  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003b80  08003b80  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b80  08003b80  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003b88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000060  08003be8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08003be8  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000027d2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aa0  00000000  00000000  000228a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00023348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014d  00000000  00000000  00023510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f55d  00000000  00000000  0002365d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002eff  00000000  00000000  00032bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055292  00000000  00000000  00035ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010d8  00000000  00000000  0008ad4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0008be24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a2c 	.word	0x08003a2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003a2c 	.word	0x08003a2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <EXTI15_10_IRQHandler>:
 * This function name is special -- this name is used by the startup code (*.s)
 * to indicate the handler for this interrupt vector.
 */
void delay(int);
void EXTI15_10_IRQHandler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	/*
	 * The hardware setup has PC13 being active-low. This must be taken
	 * into consideration to maintain logical consistency with the
	 * rest of the code.
	 */
	if (!(GPIOC->IDR & 0x2000))
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <EXTI15_10_IRQHandler+0x28>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <EXTI15_10_IRQHandler+0x16>
		irq_data.pressed = 1;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <EXTI15_10_IRQHandler+0x2c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]

	// Re-enable reception of interrupts on this line.
	EXTI->PR = (1 << 13);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <EXTI15_10_IRQHandler+0x30>)
 8000c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c74:	615a      	str	r2, [r3, #20]
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40020800 	.word	0x40020800
 8000c84:	2000007c 	.word	0x2000007c
 8000c88:	40013c00 	.word	0x40013c00

08000c8c <SysTick_Handler>:

// Handler for the system tick
void SysTick_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	irq_data.nr_tick += 1;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SysTick_Handler+0x20>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SysTick_Handler+0x20>)
 8000c98:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Handler+0x24>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000007c 	.word	0x2000007c
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <do_sys_config>:

////////////////////////////////////////////////////////////////////////////

// Function to initialize the system; called only once on device reset
static void do_sys_config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
//	 * periodic tasks.
//	 */
//
//	/// UNTIL HERE REMOVE

	SysTick->LOAD = (20000-1);	// Target is 100 Hz with 2MHz clock
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <do_sys_config+0x40>)
 8000cba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000cbe:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = 0;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <do_sys_config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(1 << 2);	// Clock base = 16MHz / 8 = 2MHz
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <do_sys_config+0x40>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <do_sys_config+0x40>)
 8000ccc:	f023 0304 	bic.w	r3, r3, #4
 8000cd0:	6013      	str	r3, [r2, #0]
	SysTick->CTRL &= ~(1 << 16);
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <do_sys_config+0x40>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <do_sys_config+0x40>)
 8000cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= (0b11 << 0);	// Enable the tick
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <do_sys_config+0x40>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <do_sys_config+0x40>)
 8000ce4:	f043 0303 	orr.w	r3, r3, #3
 8000ce8:	6013      	str	r3, [r2, #0]
	
	// Do the initialization of USART last.
//	usart1_init();
//	usart2_init();
	usart6_init();
 8000cea:	f000 fe6b 	bl	80019c4 <usart6_init>

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <GPIO_init>:
void ADC_startconv(void);
void ADC_waitconv(void);
int ADC_GetVal(void);
void SmokeSense(int);

void GPIO_init(void) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	//enable GPIOA clock
	RCC->AHB1ENR |= (1 << 0);
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <GPIO_init+0x64>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <GPIO_init+0x64>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30

	//configure PA1 to analog mode
	GPIOA->MODER |= (1 << 3);
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <GPIO_init+0x68>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <GPIO_init+0x68>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 2);
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <GPIO_init+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <GPIO_init+0x68>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6013      	str	r3, [r2, #0]

	//configure PA8 as output
	GPIOA->MODER &= ~(1 << 17);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <GPIO_init+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <GPIO_init+0x68>)
 8000d26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d2a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 16);
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <GPIO_init+0x68>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <GPIO_init+0x68>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d36:	6013      	str	r3, [r2, #0]

	//configure PA8 as push-pull output
	GPIOA->OTYPER &= ~(1 << 8);
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <GPIO_init+0x68>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <GPIO_init+0x68>)
 8000d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d42:	6053      	str	r3, [r2, #4]

	//set PA8 as initially high
	GPIOA->ODR |= (1 << 8);
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <GPIO_init+0x68>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <GPIO_init+0x68>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6153      	str	r3, [r2, #20]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <ADC_init>:

void ADC_init(void) {
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	//enable adc clock
	RCC->APB2ENR |= (1 << 8);
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <ADC_init+0xe8>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <ADC_init+0xe8>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d72:	6453      	str	r3, [r2, #68]	; 0x44

	//prescaler = 2
	ADC->CCR &= ~(1 << 16);
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <ADC_init+0xec>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4a35      	ldr	r2, [pc, #212]	; (8000e50 <ADC_init+0xec>)
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7e:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~(1 << 17);
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <ADC_init+0xec>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <ADC_init+0xec>)
 8000d86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d8a:	6053      	str	r3, [r2, #4]

	//configure ADC resolution
	ADC1->CR1 &= ~(1 << 25);
 8000d8c:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <ADC_init+0xf0>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a30      	ldr	r2, [pc, #192]	; (8000e54 <ADC_init+0xf0>)
 8000d92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000d96:	6053      	str	r3, [r2, #4]
	ADC1->CR1 &= ~(1 << 24);
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <ADC_init+0xf0>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a2d      	ldr	r2, [pc, #180]	; (8000e54 <ADC_init+0xf0>)
 8000d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000da2:	6053      	str	r3, [r2, #4]

	//Configure to Scan mode
	ADC1->CR1 |= (1 << 8);
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <ADC_init+0xf0>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <ADC_init+0xf0>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	6053      	str	r3, [r2, #4]
	//Enable Interrupt for EOC
	ADC1->CR1 |= (1 << 5);
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <ADC_init+0xf0>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <ADC_init+0xf0>)
 8000db6:	f043 0320 	orr.w	r3, r3, #32
 8000dba:	6053      	str	r3, [r2, #4]
	//configure sampling time
	ADC1->SMPR2 &= ~(1 << 5);
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <ADC_init+0xf0>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <ADC_init+0xf0>)
 8000dc2:	f023 0320 	bic.w	r3, r3, #32
 8000dc6:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~(1 << 4);
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <ADC_init+0xf0>)
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <ADC_init+0xf0>)
 8000dce:	f023 0310 	bic.w	r3, r3, #16
 8000dd2:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= (1 << 3);
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <ADC_init+0xf0>)
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <ADC_init+0xf0>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6113      	str	r3, [r2, #16]
	//end of conversion selection
	ADC1->CR2 &= ~(1 << 10);
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <ADC_init+0xf0>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <ADC_init+0xf0>)
 8000de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dea:	6093      	str	r3, [r2, #8]

	//configure data alignment
	ADC1->CR2 &= ~(1 << 11);
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <ADC_init+0xf0>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <ADC_init+0xf0>)
 8000df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000df6:	6093      	str	r3, [r2, #8]

	//total number of conversions in the channel conversion sequence
	ADC1->SQR1 &= ~(1 << 23);
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <ADC_init+0xf0>)
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <ADC_init+0xf0>)
 8000dfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e02:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1 << 22);
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <ADC_init+0xf0>)
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <ADC_init+0xf0>)
 8000e0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1 << 21);
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <ADC_init+0xf0>)
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <ADC_init+0xf0>)
 8000e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1 << 20);
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <ADC_init+0xf0>)
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <ADC_init+0xf0>)
 8000e22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e26:	62d3      	str	r3, [r2, #44]	; 0x2c

	//assign channel for first conversion
	ADC1->SQR3 |= (1 << 0);
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <ADC_init+0xf0>)
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <ADC_init+0xf0>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6353      	str	r3, [r2, #52]	; 0x34

	//cont conversion mode
	ADC1->CR2 |= (1 << 1);
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <ADC_init+0xf0>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <ADC_init+0xf0>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	6093      	str	r3, [r2, #8]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40012300 	.word	0x40012300
 8000e54:	40012000 	.word	0x40012000

08000e58 <ADC_enable>:

void ADC_enable(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (1 << 0); //enable the adc
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <ADC_enable+0x1c>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <ADC_enable+0x1c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6093      	str	r3, [r2, #8]
	delay(1); // required to ensure adc stable
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb37 	bl	80014dc <delay>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012000 	.word	0x40012000

08000e78 <ADC_startconv>:

void ADC_startconv(void) {
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (1 << 30);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <ADC_startconv+0x1c>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <ADC_startconv+0x1c>)
 8000e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e86:	6093      	str	r3, [r2, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40012000 	.word	0x40012000

08000e98 <ADC_waitconv>:

void ADC_waitconv(void) {
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	//wait for the end of conversion
	while (!((ADC1->SR) & (1 << 1))) {
 8000e9c:	bf00      	nop
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <ADC_waitconv+0x20>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f9      	beq.n	8000e9e <ADC_waitconv+0x6>
		;
	}
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40012000 	.word	0x40012000

08000ebc <ADC_GetVal>:

int ADC_GetVal(void) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	return ADC1->DR; //read the value contained at the data register
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <ADC_GetVal+0x14>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40012000 	.word	0x40012000

08000ed4 <SmokeSense>:

void SmokeSense(int PPM_int){ // for pre-deployment testing
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if (
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ee2:	db06      	blt.n	8000ef2 <SmokeSense+0x1e>
			PPM_int >= 300
			) {
		GPIOA->ODR &= ~(1 << 8);
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <SmokeSense+0x38>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <SmokeSense+0x38>)
 8000eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eee:	6153      	str	r3, [r2, #20]
	} else {
		GPIOA->ODR |= (1 << 8);
	}
}
 8000ef0:	e005      	b.n	8000efe <SmokeSense+0x2a>
		GPIOA->ODR |= (1 << 8);
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SmokeSense+0x38>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SmokeSense+0x38>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6153      	str	r3, [r2, #20]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40020000 	.word	0x40020000

08000f10 <getPPM>:

float getPPM(int adc_value){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	float voltage = ((float)adc_value / 4095) * 5;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000ff8 <getPPM+0xe8>
 8000f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f32:	edc7 7a05 	vstr	s15, [r7, #20]
	float RS_in_Air = (5 - voltage) / voltage;
 8000f36:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f42:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4a:	edc7 7a04 	vstr	s15, [r7, #16]
	float RS_RO_Ratio = RS_in_Air / 2.686;	// RO = 2.686
 8000f4e:	6938      	ldr	r0, [r7, #16]
 8000f50:	f7ff fb02 	bl	8000558 <__aeabi_f2d>
 8000f54:	a320      	add	r3, pc, #128	; (adr r3, 8000fd8 <getPPM+0xc8>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff fc7f 	bl	800085c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fe27 	bl	8000bb8 <__aeabi_d2f>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	60fb      	str	r3, [r7, #12]
	float PPM = (float)(pow(10, ((log10(RS_RO_Ratio) - 1.617856412) / -0.44340257)));	// b = 1.617856412, m = -0.44340257
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff faf2 	bl	8000558 <__aeabi_f2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	ec43 2b10 	vmov	d0, r2, r3
 8000f7c:	f001 fb48 	bl	8002610 <log10>
 8000f80:	ec51 0b10 	vmov	r0, r1, d0
 8000f84:	a316      	add	r3, pc, #88	; (adr r3, 8000fe0 <getPPM+0xd0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff f985 	bl	8000298 <__aeabi_dsub>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	a314      	add	r3, pc, #80	; (adr r3, 8000fe8 <getPPM+0xd8>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fc5e 	bl	800085c <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	ec43 2b17 	vmov	d7, r2, r3
 8000fa8:	eeb0 1a47 	vmov.f32	s2, s14
 8000fac:	eef0 1a67 	vmov.f32	s3, s15
 8000fb0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8000ff0 <getPPM+0xe0>
 8000fb4:	f001 fb6a 	bl	800268c <pow>
 8000fb8:	ec53 2b10 	vmov	r2, r3, d0
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fdfa 	bl	8000bb8 <__aeabi_d2f>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60bb      	str	r3, [r7, #8]
	return PPM;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	916872b0 	.word	0x916872b0
 8000fdc:	40057ced 	.word	0x40057ced
 8000fe0:	67b29f58 	.word	0x67b29f58
 8000fe4:	3ff9e2bd 	.word	0x3ff9e2bd
 8000fe8:	2c4730c1 	.word	0x2c4730c1
 8000fec:	bfdc60b5 	.word	0xbfdc60b5
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40240000 	.word	0x40240000
 8000ff8:	457ff000 	.word	0x457ff000

08000ffc <main>:
// Additional delay for wifi_status 5 and 7
const uint32_t ADDITIONAL_WIFI_DELAY_MS = 2000;// this is used for cipsend and sending the data itself

// The heart of the program
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ce      	sub	sp, #312	; 0x138
 8001000:	af00      	add	r7, sp, #0
	/*
	 * Buffer for storing data from the USART; necessary to properly parse
	 * multi-byte datagrams (eg. ANSI escape sequences).
	 */
	char		rxb6_data[100];
	unsigned int	rxb6_idx  = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	unsigned int	rxb6_size = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char *s = NULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	uint8_t wifi_status = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t wifi_setup = 0; //make this into 1 if the wifi has been setup already
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
	char local_buf1[100] = {0}; //storing the data do be sent
 8001020:	2300      	movs	r3, #0
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
 8001024:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001028:	2260      	movs	r2, #96	; 0x60
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fe45 	bl	8001cbc <memset>
	char local_buf2[30] = {0}; // storing the length of data cipsend to be sent
 8001032:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001036:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	3304      	adds	r3, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	831a      	strh	r2, [r3, #24]
	char wifi_buf[30] = {0}; //for debugging only
 8001050:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001054:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	3304      	adds	r3, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	831a      	strh	r2, [r3, #24]

	///////////////////////////// START FOR MQ2 /////////////////////////////

	float PPM_int; // Declare PPM variable here
	GPIO_init();
 800106e:	f7ff fe43 	bl	8000cf8 <GPIO_init>
	ADC_init();
 8001072:	f7ff fe77 	bl	8000d64 <ADC_init>

	///////////////////////////// END FOR MQ2 /////////////////////////////

	// Configure the system
	do_sys_config();
 8001076:	f7ff fe1d 	bl	8000cb4 <do_sys_config>

	// Wifi Reset
	if (!usart6_tx_is_busy()) {
 800107a:	f000 fd93 	bl	8001ba4 <usart6_tx_is_busy>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <main+0xa4>
		usart6_tx_send("AT+RST\r\n", strlen("AT+RST\r\n"));
 8001084:	2108      	movs	r1, #8
 8001086:	48bc      	ldr	r0, [pc, #752]	; (8001378 <main+0x37c>)
 8001088:	f000 fda6 	bl	8001bd8 <usart6_tx_send>
		while (usart6_tx_is_busy());
 800108c:	bf00      	nop
 800108e:	f000 fd89 	bl	8001ba4 <usart6_tx_is_busy>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1fa      	bne.n	800108e <main+0x92>
		delay(5000); // need to wait since this has no OK to receive
 8001098:	f241 3088 	movw	r0, #5000	; 0x1388
 800109c:	f000 fa1e 	bl	80014dc <delay>

	for (;;) {

		/////////////////////////////////////////////////////////////
		// Get the current time (for internal clock ticking = ito lang ang ginagamit ko rin para magresend when it failed to receive 'OK')
		uint32_t current_time_wifi = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 80010a0:	4bb6      	ldr	r3, [pc, #728]	; (800137c <main+0x380>)
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		uint32_t current_send_data_time = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 80010b0:	4bb2      	ldr	r3, [pc, #712]	; (800137c <main+0x380>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

		//---------------------------- ESP8266 Configuration -------------------------------------//
		//configuring the esp8266 here
		uint32_t delay_time = WIFI_COUNT_DELAY_MS;
 80010c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80010c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		if (wifi_status == 5 || wifi_status == 7) {
 80010c8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d003      	beq.n	80010d8 <main+0xdc>
 80010d0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	d106      	bne.n	80010e6 <main+0xea>
			delay_time += ADDITIONAL_WIFI_DELAY_MS;
 80010d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010e0:	4413      	add	r3, r2
 80010e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		}
		if (current_time_wifi - last_wifi_count_time >= delay_time && wifi_status < 8) {
 80010e6:	4ba6      	ldr	r3, [pc, #664]	; (8001380 <main+0x384>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f200 80f7 	bhi.w	80012e8 <main+0x2ec>
 80010fa:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80010fe:	2b07      	cmp	r3, #7
 8001100:	f200 80f2 	bhi.w	80012e8 <main+0x2ec>
			rxb6_size = rxb6_idx = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800110a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800110e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (wifi_status == 0){
 8001112:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001116:	2b00      	cmp	r3, #0
 8001118:	d112      	bne.n	8001140 <main+0x144>
				if (!usart6_tx_is_busy()) {
 800111a:	f000 fd43 	bl	8001ba4 <usart6_tx_is_busy>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10d      	bne.n	8001140 <main+0x144>
					usart6_tx_send("AT\r\n", strlen("AT\r\n"));
 8001124:	2104      	movs	r1, #4
 8001126:	4897      	ldr	r0, [pc, #604]	; (8001384 <main+0x388>)
 8001128:	f000 fd56 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 800112c:	bf00      	nop
 800112e:	f000 fd39 	bl	8001ba4 <usart6_tx_is_busy>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1fa      	bne.n	800112e <main+0x132>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8001138:	4a91      	ldr	r2, [pc, #580]	; (8001380 <main+0x384>)
 800113a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800113e:	6013      	str	r3, [r2, #0]
				}
			}

			//Set to client mode
			if (wifi_status == 1){
 8001140:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001144:	2b01      	cmp	r3, #1
 8001146:	d112      	bne.n	800116e <main+0x172>
				if (!usart6_tx_is_busy()) {
 8001148:	f000 fd2c 	bl	8001ba4 <usart6_tx_is_busy>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10d      	bne.n	800116e <main+0x172>
					usart6_tx_send("AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"));
 8001152:	210d      	movs	r1, #13
 8001154:	488c      	ldr	r0, [pc, #560]	; (8001388 <main+0x38c>)
 8001156:	f000 fd3f 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 800115a:	bf00      	nop
 800115c:	f000 fd22 	bl	8001ba4 <usart6_tx_is_busy>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1fa      	bne.n	800115c <main+0x160>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8001166:	4a86      	ldr	r2, [pc, #536]	; (8001380 <main+0x384>)
 8001168:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800116c:	6013      	str	r3, [r2, #0]
				}
			}
			// join network
			if (wifi_status == 2){
 800116e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001172:	2b02      	cmp	r3, #2
 8001174:	d112      	bne.n	800119c <main+0x1a0>
				if (!usart6_tx_is_busy()) {
 8001176:	f000 fd15 	bl	8001ba4 <usart6_tx_is_busy>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10d      	bne.n	800119c <main+0x1a0>
					//WiFi("EEE192-429", "EEE192_Room429");
					//WiFi("neocastillo", "cocacola1");
					usart6_tx_send("AT+CWJAP=\"neocastillo\",\"cocacola1\"\r\n", strlen("AT+CWJAP=\"neocastillo\",\"cocacola1\"\r\n"));// follows the format ssid and password; specifically set for room 429 na ito
 8001180:	2124      	movs	r1, #36	; 0x24
 8001182:	4882      	ldr	r0, [pc, #520]	; (800138c <main+0x390>)
 8001184:	f000 fd28 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8001188:	bf00      	nop
 800118a:	f000 fd0b 	bl	8001ba4 <usart6_tx_is_busy>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1fa      	bne.n	800118a <main+0x18e>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8001194:	4a7a      	ldr	r2, [pc, #488]	; (8001380 <main+0x384>)
 8001196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800119a:	6013      	str	r3, [r2, #0]
				}
			}

			// TCP/UDP connection to single
			if (wifi_status == 3){
 800119c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d112      	bne.n	80011ca <main+0x1ce>
				if (!usart6_tx_is_busy()) {
 80011a4:	f000 fcfe 	bl	8001ba4 <usart6_tx_is_busy>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10d      	bne.n	80011ca <main+0x1ce>
					usart6_tx_send("AT+CIPMUX=0\r\n", strlen("AT+CIPMUX=0\r\n"));
 80011ae:	210d      	movs	r1, #13
 80011b0:	4877      	ldr	r0, [pc, #476]	; (8001390 <main+0x394>)
 80011b2:	f000 fd11 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80011b6:	bf00      	nop
 80011b8:	f000 fcf4 	bl	8001ba4 <usart6_tx_is_busy>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1fa      	bne.n	80011b8 <main+0x1bc>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 80011c2:	4a6f      	ldr	r2, [pc, #444]	; (8001380 <main+0x384>)
 80011c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011c8:	6013      	str	r3, [r2, #0]
				}
			}

			//================== Sending Data Portion ====================//
			// TCP setting
			if (wifi_status == 4){
 80011ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d115      	bne.n	80011fe <main+0x202>
				if (!usart6_tx_is_busy()) {
 80011d2:	f000 fce7 	bl	8001ba4 <usart6_tx_is_busy>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d110      	bne.n	80011fe <main+0x202>
					usart6_tx_send("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", strlen("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"));
 80011dc:	2128      	movs	r1, #40	; 0x28
 80011de:	486d      	ldr	r0, [pc, #436]	; (8001394 <main+0x398>)
 80011e0:	f000 fcfa 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80011e4:	bf00      	nop
 80011e6:	f000 fcdd 	bl	8001ba4 <usart6_tx_is_busy>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1fa      	bne.n	80011e6 <main+0x1ea>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 80011f0:	4a63      	ldr	r2, [pc, #396]	; (8001380 <main+0x384>)
 80011f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011f6:	6013      	str	r3, [r2, #0]
					wifi_setup = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
				}
			}

			// Preparing the sensor that we will send has the info on how long the data we are sending
			if (wifi_status == 5){
 80011fe:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001202:	2b05      	cmp	r3, #5
 8001204:	d149      	bne.n	800129a <main+0x29e>
				// Clear the buffer
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 8001206:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800120a:	2264      	movs	r2, #100	; 0x64
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fd54 	bl	8001cbc <memset>
				rxb6_size = rxb6_idx = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800121a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800121e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				// deployment: Y4ZG3F1672I2BWZH
				// testing: Q3EOIMT0WYFZDISW
				sprintf (local_buf1, "GET /update?api_key=Q3EOIMT0WYFZDISW&field1=%d\r\n", (int)round(PPM_int));
 8001222:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001226:	f7ff f997 	bl	8000558 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ec43 2b10 	vmov	d0, r2, r3
 8001232:	f001 fab1 	bl	8002798 <round>
 8001236:	ec53 2b10 	vmov	r2, r3, d0
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc93 	bl	8000b68 <__aeabi_d2iz>
 8001242:	4602      	mov	r2, r0
 8001244:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001248:	4953      	ldr	r1, [pc, #332]	; (8001398 <main+0x39c>)
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fd16 	bl	8001c7c <siprintf>
				int len = strlen (local_buf1);
 8001250:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffc3 	bl	80001e0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001268:	494c      	ldr	r1, [pc, #304]	; (800139c <main+0x3a0>)
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fd06 	bl	8001c7c <siprintf>
				if (!usart6_tx_is_busy()) {
 8001270:	f000 fc98 	bl	8001ba4 <usart6_tx_is_busy>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <main+0x29e>
					usart6_tx_send(local_buf2, sizeof(local_buf2));
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	211e      	movs	r1, #30
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fca9 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8001286:	bf00      	nop
 8001288:	f000 fc8c 	bl	8001ba4 <usart6_tx_is_busy>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1fa      	bne.n	8001288 <main+0x28c>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8001292:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <main+0x384>)
 8001294:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001298:	6013      	str	r3, [r2, #0]
				}
			}
			// sending data with the API key
			if (wifi_status == 7 ){
 800129a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800129e:	2b07      	cmp	r3, #7
 80012a0:	d122      	bne.n	80012e8 <main+0x2ec>

				if (!usart6_tx_is_busy()) {
 80012a2:	f000 fc7f 	bl	8001ba4 <usart6_tx_is_busy>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11d      	bne.n	80012e8 <main+0x2ec>
					// Clear the buffer
					memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 80012ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012b0:	2264      	movs	r2, #100	; 0x64
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fd01 	bl	8001cbc <memset>
					rxb6_size = rxb6_idx = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80012c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
					usart6_tx_send(local_buf1, sizeof(local_buf1));
 80012c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012cc:	2164      	movs	r1, #100	; 0x64
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fc82 	bl	8001bd8 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80012d4:	bf00      	nop
 80012d6:	f000 fc65 	bl	8001ba4 <usart6_tx_is_busy>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1fa      	bne.n	80012d6 <main+0x2da>
					last_wifi_count_time = current_time_wifi;
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <main+0x384>)
 80012e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012e6:	6013      	str	r3, [r2, #0]

		}
		//----------------------- Portion where receiving "OK" in my code ------------------------//
		//---------------------------- DO NOT EDIT ANYTHING HERE ---------------------------------//

		if (wifi_status < 8) {//will turn this off when not supposed to be receiving from esp8266
 80012e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80012ec:	2b07      	cmp	r3, #7
 80012ee:	f200 80a4 	bhi.w	800143a <main+0x43e>
		// Check for any data received via USART6. This is for the ESP8266
			do {
				if (!usart6_rx_get_event(&usart6_evt))
 80012f2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fc24 	bl	8001b44 <usart6_rx_get_event>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d036      	beq.n	8001370 <main+0x374>
					// Nothing to do here
					break;
				else if (!usart6_evt.valid)
 8001302:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d031      	beq.n	8001374 <main+0x378>
				/*
				 * [1] If an IDLE is detected, update the size.
				 *
				 * [2] If no data is present, we're done.
				 */
				if (usart6_evt.is_idle) {
 8001310:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <main+0x32c>
					rxb6_size = rxb6_idx;
 800131e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001322:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
					break;
 8001326:	e03c      	b.n	80013a2 <main+0x3a6>
				} else if (!usart6_evt.has_data) {
 8001328:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d034      	beq.n	80013a0 <main+0x3a4>
					break;
				}

				// Store the data
				if (rxb6_idx >= sizeof(rxb6_data)) {
 8001336:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800133a:	2b63      	cmp	r3, #99	; 0x63
 800133c:	d904      	bls.n	8001348 <main+0x34c>
					rxb6_size = rxb6_idx;
 800133e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001342:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
					break;
 8001346:	e02c      	b.n	80013a2 <main+0x3a6>
				}
				rxb6_data[rxb6_idx++] = usart6_evt.c;
 8001348:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001352:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8001356:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800135a:	443b      	add	r3, r7
 800135c:	f803 2c90 	strb.w	r2, [r3, #-144]
				rxb6_data[rxb6_idx] = '\0';
 8001360:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001364:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001368:	4413      	add	r3, r2
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
				break;
 800136e:	e018      	b.n	80013a2 <main+0x3a6>
					break;
 8001370:	bf00      	nop
 8001372:	e016      	b.n	80013a2 <main+0x3a6>
					break;
 8001374:	bf00      	nop
 8001376:	e014      	b.n	80013a2 <main+0x3a6>
 8001378:	08003a48 	.word	0x08003a48
 800137c:	2000007c 	.word	0x2000007c
 8001380:	20000088 	.word	0x20000088
 8001384:	08003a54 	.word	0x08003a54
 8001388:	08003a5c 	.word	0x08003a5c
 800138c:	08003a6c 	.word	0x08003a6c
 8001390:	08003a94 	.word	0x08003a94
 8001394:	08003aa4 	.word	0x08003aa4
 8001398:	08003ad0 	.word	0x08003ad0
 800139c:	08003b04 	.word	0x08003b04
					break;
 80013a0:	bf00      	nop
			}while (0);


			// Checking if "OK" is received
			// after naging 8 ng wifi_status no need to check if okay was received
			if ((s = strstr(rxb6_data, "OK")) && (wifi_status != 5)) {
 80013a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80013a6:	494a      	ldr	r1, [pc, #296]	; (80014d0 <main+0x4d4>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fc9c 	bl	8001ce6 <strstr>
 80013ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 80013b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d019      	beq.n	80013ee <main+0x3f2>
 80013ba:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d015      	beq.n	80013ee <main+0x3f2>
				// Clear the buffer and increment wifi_status
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 80013c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80013c6:	2264      	movs	r2, #100	; 0x64
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fc76 	bl	8001cbc <memset>
				rxb6_size = rxb6_idx = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80013d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				wifi_status += 1;
 80013de:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80013e2:	3301      	adds	r3, #1
 80013e4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				s = NULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			}
			if ((wifi_status == 5) && (s = strstr(rxb6_data, ">"))) {
 80013ee:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d121      	bne.n	800143a <main+0x43e>
 80013f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80013fa:	213e      	movs	r1, #62	; 0x3e
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fc65 	bl	8001ccc <strchr>
 8001402:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8001406:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800140a:	2b00      	cmp	r3, #0
 800140c:	d015      	beq.n	800143a <main+0x43e>
				// Clear the buffer and increment wifi_status
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 800140e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001412:	2264      	movs	r2, #100	; 0x64
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fc50 	bl	8001cbc <memset>
				rxb6_size = rxb6_idx = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001422:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001426:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				wifi_status += 2;
 800142a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800142e:	3302      	adds	r3, #2
 8001430:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				s = NULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			}
		}
//-------------------------------------------------------------------------------------------------------------------------------------------------------//
		// ---------------------------------- PLACE YOUR CODE HERE ---------------------------//
		if (wifi_setup == 1) {
 800143a:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 800143e:	2b01      	cmp	r3, #1
 8001440:	f47f ae2e 	bne.w	80010a0 <main+0xa4>

			//running code computations here then after the delay has been met it will automatically send data

			///////////////////////////// START FOR MQ2 /////////////////////////////
			//start ADC conversion
			ADC_enable();
 8001444:	f7ff fd08 	bl	8000e58 <ADC_enable>
			//start conversion
			ADC_startconv();
 8001448:	f7ff fd16 	bl	8000e78 <ADC_startconv>
			//wait for conversion to finish
			ADC_waitconv();
 800144c:	f7ff fd24 	bl	8000e98 <ADC_waitconv>
			//store converted data to a variable
			adc_value = ADC_GetVal();
 8001450:	f7ff fd34 	bl	8000ebc <ADC_GetVal>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <main+0x4d8>)
 800145a:	801a      	strh	r2, [r3, #0]

			PPM_int = round(getPPM(adc_value));
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <main+0x4d8>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fd55 	bl	8000f10 <getPPM>
 8001466:	ee10 3a10 	vmov	r3, s0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f874 	bl	8000558 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	ec43 2b10 	vmov	d0, r2, r3
 8001478:	f001 f98e 	bl	8002798 <round>
 800147c:	ec53 2b10 	vmov	r2, r3, d0
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb98 	bl	8000bb8 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

			SmokeSense(PPM_int); // for pre-deployment testing
 800148e:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 0a90 	vmov	r0, s15
 800149a:	f7ff fd1b 	bl	8000ed4 <SmokeSense>
			///////////////////////////// END FOR MQ2 /////////////////////////////

			// Send the received data
			if (wifi_status == 8 && current_send_data_time - last_send_data_time >= SEND_DATA_DELAY) {
 800149e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	f47f adfc 	bne.w	80010a0 <main+0xa4>
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <main+0x4dc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80014b6:	4293      	cmp	r3, r2
 80014b8:	f4ff adf2 	bcc.w	80010a0 <main+0xa4>
				// Record the current time
				last_send_data_time = current_send_data_time;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <main+0x4dc>)
 80014be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80014c2:	6013      	str	r3, [r2, #0]
				wifi_status -= 4;
 80014c4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80014c8:	3b04      	subs	r3, #4
 80014ca:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	for (;;) {
 80014ce:	e5e7      	b.n	80010a0 <main+0xa4>
 80014d0:	08003b14 	.word	0x08003b14
 80014d4:	20000084 	.word	0x20000084
 80014d8:	2000008c 	.word	0x2000008c

080014dc <delay>:
	// This line is supposed to never be reached.
	return 1;
}

//delay; not accurate but just there for the initial reset, no need to be accurate since arbitrary chosen naman
void delay(int d){
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	int i;
	for(; d>0 ;d--){
 80014e4:	e00c      	b.n	8001500 <delay+0x24>
		for(i =0; i<2657;i++);
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e002      	b.n	80014f2 <delay+0x16>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f5b3 6f26 	cmp.w	r3, #2656	; 0xa60
 80014f8:	ddf8      	ble.n	80014ec <delay+0x10>
	for(; d>0 ;d--){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	dcef      	bgt.n	80014e6 <delay+0xa>
	}
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f000 fbe6 	bl	8001d14 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	20000090 	.word	0x20000090
 800157c:	20000510 	.word	0x20000510

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <USART2_IRQHandler>:
static volatile unsigned int idx_rxf_1 = 0;
static volatile unsigned int idx_rxf_2 = 0;
static volatile unsigned int ctr_rxf = 0;
static volatile struct usart_rx_event fifo_rx[RXFIFO_LEN];
void USART2_IRQHandler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
	 * Notes:
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */
	unsigned int val_sr = USART2->SR;
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <USART2_IRQHandler+0x148>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr = USART2->DR;
 80015b0:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <USART2_IRQHandler+0x148>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60bb      	str	r3, [r7, #8]
	struct usart_rx_event evt = {
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]

	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */
	if (val_sr & (1 << 5)) {
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d036      	beq.n	8001632 <USART2_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr & 0xff);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 80015ca:	797b      	ldrb	r3, [r7, #5]
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	717b      	strb	r3, [r7, #5]
		
		// Parity errors can only be detected here.
		if (val_sr & (1 << 1)) {
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <USART2_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr == 0) {
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10e      	bne.n	8001608 <USART2_IRQHandler+0x64>
				evt.is_break = 1;
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 80015f2:	797b      	ldrb	r3, [r7, #5]
 80015f4:	f36f 03c3 	bfc	r3, #3, #1
 80015f8:	717b      	strb	r3, [r7, #5]
				USART2->CR1 &= ~(1 << 5);
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <USART2_IRQHandler+0x148>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	4a3b      	ldr	r2, [pc, #236]	; (80016ec <USART2_IRQHandler+0x148>)
 8001600:	f023 0320 	bic.w	r3, r3, #32
 8001604:	60d3      	str	r3, [r2, #12]
 8001606:	e003      	b.n	8001610 <USART2_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8001608:	797b      	ldrb	r3, [r7, #5]
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	717b      	strb	r3, [r7, #5]
			}
		}
		if (val_sr & (1 << 0)) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <USART2_IRQHandler+0x8e>
			// Parity error detected (PE bit is set)
			evt.err_parity = 1;
 800161a:	797b      	ldrb	r3, [r7, #5]
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8001622:	797b      	ldrb	r3, [r7, #5]
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 800162a:	797b      	ldrb	r3, [r7, #5]
 800162c:	f36f 03c3 	bfc	r3, #3, #1
 8001630:	717b      	strb	r3, [r7, #5]
	
	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr & (1 << 4)) {
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00d      	beq.n	8001658 <USART2_IRQHandler+0xb4>
		/*
		 * IDLE line
		 * 
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 800163c:	797b      	ldrb	r3, [r7, #5]
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8001644:	797b      	ldrb	r3, [r7, #5]
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	717b      	strb	r3, [r7, #5]
		USART2->CR1 |= (1 << 5);
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <USART2_IRQHandler+0x148>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <USART2_IRQHandler+0x148>)
 8001652:	f043 0320 	orr.w	r3, r3, #32
 8001656:	60d3      	str	r3, [r2, #12]
	}
	
	// Put it into the RX FIFO queue
	if (evt.valid) {
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d018      	beq.n	8001696 <USART2_IRQHandler+0xf2>
		fifo_rx[idx_rxf_1++] = evt;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <USART2_IRQHandler+0x14c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	4921      	ldr	r1, [pc, #132]	; (80016f0 <USART2_IRQHandler+0x14c>)
 800166c:	600a      	str	r2, [r1, #0]
 800166e:	4921      	ldr	r1, [pc, #132]	; (80016f4 <USART2_IRQHandler+0x150>)
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_1 >= RXFIFO_LEN)
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <USART2_IRQHandler+0x14c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b3f      	cmp	r3, #63	; 0x3f
 800167c:	d902      	bls.n	8001684 <USART2_IRQHandler+0xe0>
			idx_rxf_1 = 0;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <USART2_IRQHandler+0x14c>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
		if (ctr_rxf < RXFIFO_LEN)
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <USART2_IRQHandler+0x154>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b3f      	cmp	r3, #63	; 0x3f
 800168a:	d804      	bhi.n	8001696 <USART2_IRQHandler+0xf2>
			++ctr_rxf;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <USART2_IRQHandler+0x154>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <USART2_IRQHandler+0x154>)
 8001694:	6013      	str	r3, [r2, #0]
	
	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr & (1 << 7)) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01e      	beq.n	80016de <USART2_IRQHandler+0x13a>
		 * Because TXE is only cleared by writing to the USART2_DR
		 * register, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len > 0) {
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <USART2_IRQHandler+0x158>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00e      	beq.n	80016c6 <USART2_IRQHandler+0x122>
			// Queue not empty
			USART2->DR = *(fifo_tx_buf++);
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <USART2_IRQHandler+0x15c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	4914      	ldr	r1, [pc, #80]	; (8001700 <USART2_IRQHandler+0x15c>)
 80016b0:	600a      	str	r2, [r1, #0]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <USART2_IRQHandler+0x148>)
 80016b8:	605a      	str	r2, [r3, #4]
			--fifo_tx_len;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <USART2_IRQHandler+0x158>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3b01      	subs	r3, #1
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <USART2_IRQHandler+0x158>)
 80016c2:	6013      	str	r3, [r2, #0]
			USART2->CR1 &= ~(1 << 7);
			fifo_tx_len = 0;
			fifo_tx_buf = 0;
		}
	}
}
 80016c4:	e00b      	b.n	80016de <USART2_IRQHandler+0x13a>
			USART2->CR1 &= ~(1 << 7);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <USART2_IRQHandler+0x148>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <USART2_IRQHandler+0x148>)
 80016cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016d0:	60d3      	str	r3, [r2, #12]
			fifo_tx_len = 0;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <USART2_IRQHandler+0x158>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
			fifo_tx_buf = 0;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <USART2_IRQHandler+0x15c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40004400 	.word	0x40004400
 80016f0:	2000009c 	.word	0x2000009c
 80016f4:	200000a4 	.word	0x200000a4
 80016f8:	200000a0 	.word	0x200000a0
 80016fc:	20000098 	.word	0x20000098
 8001700:	20000094 	.word	0x20000094

08001704 <USART1_IRQHandler>:
static volatile unsigned int idx_rxf_11 = 0;
static volatile unsigned int idx_rxf_21 = 0;
static volatile unsigned int ctr_rxf1 = 0;
static volatile struct usart1_rx_event fifo_rx1[RXFIFO_LEN1];
void USART1_IRQHandler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */

	unsigned int val_sr1 = USART1->SR; // val_sr contains the configuration of status register
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <USART1_IRQHandler+0x148>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr1 = USART1->DR; // val_dr contains the configuration of data register
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <USART1_IRQHandler+0x148>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60bb      	str	r3, [r7, #8]

	struct usart1_rx_event evt = {
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */

	if (val_sr1 & (1 << 5)) {
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d036      	beq.n	8001792 <USART1_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set or bit 5 of SR is 1). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr1 & 0xff); // puts data (lower 8 bits of DR) into the character attribute of evt
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 800172a:	797b      	ldrb	r3, [r7, #5]
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	717b      	strb	r3, [r7, #5]
		
		// Parity errors can only be detected here.
		if (val_sr1 & (1 << 1)) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d015      	beq.n	8001770 <USART1_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr1 == 0 ) {
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10e      	bne.n	8001768 <USART1_IRQHandler+0x64>
				//if data register is empty
				evt.is_break = 1;
 800174a:	797b      	ldrb	r3, [r7, #5]
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 8001752:	797b      	ldrb	r3, [r7, #5]
 8001754:	f36f 03c3 	bfc	r3, #3, #1
 8001758:	717b      	strb	r3, [r7, #5]
				USART1->CR1 &= ~(1 << 5); //inhibits interrupt because there is no data yet
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <USART1_IRQHandler+0x148>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <USART1_IRQHandler+0x148>)
 8001760:	f023 0320 	bic.w	r3, r3, #32
 8001764:	60d3      	str	r3, [r2, #12]
 8001766:	e003      	b.n	8001770 <USART1_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	717b      	strb	r3, [r7, #5]
			}
		}
		
		if (val_sr1 & (1 << 0)) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <USART1_IRQHandler+0x8e>
			// Parity error detected (PE bit 0 of SR is set)
			evt.err_parity = 1;
 800177a:	797b      	ldrb	r3, [r7, #5]
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8001782:	797b      	ldrb	r3, [r7, #5]
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 800178a:	797b      	ldrb	r3, [r7, #5]
 800178c:	f36f 03c3 	bfc	r3, #3, #1
 8001790:	717b      	strb	r3, [r7, #5]
	
	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr1 & (1 << 4)) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00d      	beq.n	80017b8 <USART1_IRQHandler+0xb4>
		/*
		 * IDLE line is detected bit 4 is 1
		 * 
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 800179c:	797b      	ldrb	r3, [r7, #5]
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 80017a4:	797b      	ldrb	r3, [r7, #5]
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	717b      	strb	r3, [r7, #5]
		// set bit 5 RXNEIE to 1
		USART1->CR1 |= (1 << 5); // interrupt is generated whenever read data register is not empty and is ready to be read i.e RXNE bit 5 = 1
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <USART1_IRQHandler+0x148>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <USART1_IRQHandler+0x148>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	60d3      	str	r3, [r2, #12]
	}
	
	// Put it into the RX FIFO queue
	if (evt.valid) {
 80017b8:	797b      	ldrb	r3, [r7, #5]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d018      	beq.n	80017f6 <USART1_IRQHandler+0xf2>
		fifo_rx1[idx_rxf_11++] = evt; //stores evt at fifo_rx buffer at index 0 then increments indx by 1
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <USART1_IRQHandler+0x14c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4921      	ldr	r1, [pc, #132]	; (8001850 <USART1_IRQHandler+0x14c>)
 80017cc:	600a      	str	r2, [r1, #0]
 80017ce:	4921      	ldr	r1, [pc, #132]	; (8001854 <USART1_IRQHandler+0x150>)
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_11 >= RXFIFO_LEN1)
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <USART1_IRQHandler+0x14c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b3f      	cmp	r3, #63	; 0x3f
 80017dc:	d902      	bls.n	80017e4 <USART1_IRQHandler+0xe0>
			idx_rxf_11 = 0; // meaning buffer is full
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <USART1_IRQHandler+0x14c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		if (ctr_rxf1 < RXFIFO_LEN1)
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <USART1_IRQHandler+0x154>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b3f      	cmp	r3, #63	; 0x3f
 80017ea:	d804      	bhi.n	80017f6 <USART1_IRQHandler+0xf2>
			++ctr_rxf1; // increments counter for receiveing buffer by 1 if buffer is not full
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <USART1_IRQHandler+0x154>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <USART1_IRQHandler+0x154>)
 80017f4:	6013      	str	r3, [r2, #0]
	
	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr1 & (1 << 7)) {
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01e      	beq.n	800183e <USART1_IRQHandler+0x13a>
		 * Because TXE bit 7 is only cleared by writing to the USART2_DR
		 * register i.e. not empty, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len1 > 0) {
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <USART1_IRQHandler+0x158>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00e      	beq.n	8001826 <USART1_IRQHandler+0x122>
			// Queue not empty
			USART1->DR = *(fifo_tx_buf1++); //just iterates through the contents of the transmitter buffer
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <USART1_IRQHandler+0x15c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <USART1_IRQHandler+0x15c>)
 8001810:	600a      	str	r2, [r1, #0]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <USART1_IRQHandler+0x148>)
 8001818:	605a      	str	r2, [r3, #4]
			--fifo_tx_len1; //subtracts the length of buffer
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <USART1_IRQHandler+0x158>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3b01      	subs	r3, #1
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <USART1_IRQHandler+0x158>)
 8001822:	6013      	str	r3, [r2, #0]
			USART1->CR1 &= ~(1 << 7); //disable interrupt
			fifo_tx_len1 = 0;
			fifo_tx_buf1 = 0;
		}
	}
}
 8001824:	e00b      	b.n	800183e <USART1_IRQHandler+0x13a>
			USART1->CR1 &= ~(1 << 7); //disable interrupt
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <USART1_IRQHandler+0x148>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <USART1_IRQHandler+0x148>)
 800182c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001830:	60d3      	str	r3, [r2, #12]
			fifo_tx_len1 = 0;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <USART1_IRQHandler+0x158>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
			fifo_tx_buf1 = 0;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <USART1_IRQHandler+0x15c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40011000 	.word	0x40011000
 8001850:	200001ac 	.word	0x200001ac
 8001854:	200001b4 	.word	0x200001b4
 8001858:	200001b0 	.word	0x200001b0
 800185c:	200001a8 	.word	0x200001a8
 8001860:	200001a4 	.word	0x200001a4

08001864 <USART6_IRQHandler>:
static volatile unsigned int idx_rxf_16 = 0;
static volatile unsigned int idx_rxf_26 = 0;
static volatile unsigned int ctr_rxf6 = 0;
static volatile struct usart6_rx_event fifo_rx6[RXFIFO_LEN6];
void USART6_IRQHandler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */

	unsigned int val_sr6 = USART6->SR; // val_sr contains the configuration of status register
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <USART6_IRQHandler+0x148>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr6 = USART6->DR; // val_dr contains the configuration of data register
 8001870:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <USART6_IRQHandler+0x148>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60bb      	str	r3, [r7, #8]

	struct usart6_rx_event evt = {
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */

	if (val_sr6 & (1 << 5)) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d036      	beq.n	80018f2 <USART6_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set or bit 5 of SR is 1). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr6 & 0xff); // puts data (lower 8 bits of DR) into the character attribute of evt
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 800188a:	797b      	ldrb	r3, [r7, #5]
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	717b      	strb	r3, [r7, #5]

		// Parity errors can only be detected here.
		if (val_sr6 & (1 << 1)) {
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <USART6_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr6 == 0 ) {
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10e      	bne.n	80018c8 <USART6_IRQHandler+0x64>
				//if data register is empty
				evt.is_break = 1;
 80018aa:	797b      	ldrb	r3, [r7, #5]
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	f36f 03c3 	bfc	r3, #3, #1
 80018b8:	717b      	strb	r3, [r7, #5]
				USART6->CR1 &= ~(1 << 5); //inhibits interrupt because there is no data yet
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <USART6_IRQHandler+0x148>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <USART6_IRQHandler+0x148>)
 80018c0:	f023 0320 	bic.w	r3, r3, #32
 80018c4:	60d3      	str	r3, [r2, #12]
 80018c6:	e003      	b.n	80018d0 <USART6_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 80018c8:	797b      	ldrb	r3, [r7, #5]
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	717b      	strb	r3, [r7, #5]
			}
		}

		if (val_sr6 & (1 << 0)) {
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <USART6_IRQHandler+0x8e>
			// Parity error detected (PE bit 0 of SR is set)
			evt.err_parity = 1;
 80018da:	797b      	ldrb	r3, [r7, #5]
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 80018ea:	797b      	ldrb	r3, [r7, #5]
 80018ec:	f36f 03c3 	bfc	r3, #3, #1
 80018f0:	717b      	strb	r3, [r7, #5]

	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr6 & (1 << 4)) {
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00d      	beq.n	8001918 <USART6_IRQHandler+0xb4>
		/*
		 * IDLE line is detected bit 4 is 1
		 *
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 80018fc:	797b      	ldrb	r3, [r7, #5]
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	717b      	strb	r3, [r7, #5]
		// set bit 5 RXNEIE to 1
		USART6->CR1 |= (1 << 5); // interrupt is generated whenever read data register is not empty and is ready to be read i.e RXNE bit 5 = 1
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <USART6_IRQHandler+0x148>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <USART6_IRQHandler+0x148>)
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	60d3      	str	r3, [r2, #12]
	}

	// Put it into the RX FIFO queue
	if (evt.valid) {
 8001918:	797b      	ldrb	r3, [r7, #5]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d018      	beq.n	8001956 <USART6_IRQHandler+0xf2>
		fifo_rx6[idx_rxf_16++] = evt; //stores evt at fifo_rx buffer at index 0 then increments indx by 1
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <USART6_IRQHandler+0x14c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	4921      	ldr	r1, [pc, #132]	; (80019b0 <USART6_IRQHandler+0x14c>)
 800192c:	600a      	str	r2, [r1, #0]
 800192e:	4921      	ldr	r1, [pc, #132]	; (80019b4 <USART6_IRQHandler+0x150>)
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_16 >= RXFIFO_LEN6)
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <USART6_IRQHandler+0x14c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b3f      	cmp	r3, #63	; 0x3f
 800193c:	d902      	bls.n	8001944 <USART6_IRQHandler+0xe0>
			idx_rxf_16 = 0; // meaning buffer is full
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <USART6_IRQHandler+0x14c>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
		if (ctr_rxf6 < RXFIFO_LEN6)
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <USART6_IRQHandler+0x154>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b3f      	cmp	r3, #63	; 0x3f
 800194a:	d804      	bhi.n	8001956 <USART6_IRQHandler+0xf2>
			++ctr_rxf6; // increments counter for receiveing buffer by 1 if buffer is not full
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <USART6_IRQHandler+0x154>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <USART6_IRQHandler+0x154>)
 8001954:	6013      	str	r3, [r2, #0]

	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr6 & (1 << 7)) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01e      	beq.n	800199e <USART6_IRQHandler+0x13a>
		 * Because TXE bit 7 is only cleared by writing to the USART2_DR
		 * register i.e. not empty, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len6 > 0) {
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <USART6_IRQHandler+0x158>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <USART6_IRQHandler+0x122>
			// Queue not empty
			USART6->DR = *(fifo_tx_buf6++); //just iterates through the contents of the transmitter buffer
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <USART6_IRQHandler+0x15c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	4914      	ldr	r1, [pc, #80]	; (80019c0 <USART6_IRQHandler+0x15c>)
 8001970:	600a      	str	r2, [r1, #0]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <USART6_IRQHandler+0x148>)
 8001978:	605a      	str	r2, [r3, #4]
			--fifo_tx_len6; //subtracts the length of buffer
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <USART6_IRQHandler+0x158>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <USART6_IRQHandler+0x158>)
 8001982:	6013      	str	r3, [r2, #0]
			USART6->CR1 &= ~(1 << 7); //disable interrupt
			fifo_tx_len6 = 0;
			fifo_tx_buf6 = 0;
		}
	}
}
 8001984:	e00b      	b.n	800199e <USART6_IRQHandler+0x13a>
			USART6->CR1 &= ~(1 << 7); //disable interrupt
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <USART6_IRQHandler+0x148>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <USART6_IRQHandler+0x148>)
 800198c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001990:	60d3      	str	r3, [r2, #12]
			fifo_tx_len6 = 0;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <USART6_IRQHandler+0x158>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
			fifo_tx_buf6 = 0;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <USART6_IRQHandler+0x15c>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40011400 	.word	0x40011400
 80019b0:	200002bc 	.word	0x200002bc
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	200002c4 	.word	0x200002c4
 80019bc:	200002b8 	.word	0x200002b8
 80019c0:	200002b4 	.word	0x200002b4

080019c4 <usart6_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART1
void usart6_init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_16 = 0;
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <usart6_init+0x160>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
	idx_rxf_26 = 0;
 80019ce:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <usart6_init+0x164>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
	ctr_rxf6 =0;
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <usart6_init+0x168>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
	memset(fifo_rx6, 0, sizeof(fifo_rx6)); //fills a block with 0, starting address, value, and size of the memory block to be filled i.e. this initializes the buffer
 80019da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019de:	2100      	movs	r1, #0
 80019e0:	4853      	ldr	r0, [pc, #332]	; (8001b30 <usart6_init+0x16c>)
 80019e2:	f000 f96b 	bl	8001cbc <memset>

	// Configure the GPIO first before configuring the USART.

	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA10 & PA9
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <usart6_init+0x170>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <usart6_init+0x170>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(0b11 << 22);	// Set PA11 as input...
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <usart6_init+0x174>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a50      	ldr	r2, [pc, #320]	; (8001b38 <usart6_init+0x174>)
 80019f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019fc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 22);	// ... then set it as alternate function.
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <usart6_init+0x174>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a4d      	ldr	r2, [pc, #308]	; (8001b38 <usart6_init+0x174>)
 8001a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a08:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 24);	// Set PA12 as input ...
 8001a0a:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <usart6_init+0x174>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <usart6_init+0x174>)
 8001a10:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a14:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 24);	// ... then set it as alternate function.
 8001a16:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <usart6_init+0x174>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <usart6_init+0x174>)
 8001a1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a20:	6013      	str	r3, [r2, #0]
	 *
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 11);	// PA9 = push-pull output
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <usart6_init+0x174>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a44      	ldr	r2, [pc, #272]	; (8001b38 <usart6_init+0x174>)
 8001a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a2c:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 22);	// High-speed mode
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <usart6_init+0x174>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	4a41      	ldr	r2, [pc, #260]	; (8001b38 <usart6_init+0x174>)
 8001a34:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8001a38:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 *
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 24);
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <usart6_init+0x174>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	; (8001b38 <usart6_init+0x174>)
 8001a40:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a44:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 24);
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <usart6_init+0x174>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <usart6_init+0x174>)
 8001a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a50:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 *
	 * USART6_TX = AF08 @ PA11
	 * USART6_RX = AF08 @ PA12
	 */
	GPIOA->AFR[1] &= ~(0x000FF000);  // Clear bits for PA11
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <usart6_init+0x174>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <usart6_init+0x174>)
 8001a58:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8001a5c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00088000);  // Set AF08 for PA11
 8001a5e:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <usart6_init+0x174>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <usart6_init+0x174>)
 8001a64:	f443 2308 	orr.w	r3, r3, #557056	; 0x88000
 8001a68:	6253      	str	r3, [r2, #36]	; 0x24
	/////////////////////////////////////////////////////////////////////

	RCC->APB2ENR |= (1 << 5);   // Enable USART6 peripheral clock enabled bit 5
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <usart6_init+0x170>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <usart6_init+0x170>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 5);	// Reset the whole peripheral resets usart 2
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <usart6_init+0x170>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <usart6_init+0x170>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 5);
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <usart6_init+0x170>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <usart6_init+0x170>)
 8001a88:	f023 0320 	bic.w	r3, r3, #32
 8001a8c:	6253      	str	r3, [r2, #36]	; 0x24
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */

	 //pins 9 and 10 are in usart1
	USART6->CR1 &= ~(0b11 << 2); //disable receiver
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <usart6_init+0x178>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <usart6_init+0x178>)
 8001a94:	f023 030c 	bic.w	r3, r3, #12
 8001a98:	60d3      	str	r3, [r2, #12]
	USART6->CR1 |=  (1 << 13); // usart enable
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <usart6_init+0x178>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <usart6_init+0x178>)
 8001aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa4:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART6->BRR &= ~(0x0000FFFF);
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <usart6_init+0x178>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <usart6_init+0x178>)
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	6093      	str	r3, [r2, #8]
	USART6->BRR |=  (0x0000008B);   //115200 8bits basta same lang
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <usart6_init+0x178>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <usart6_init+0x178>)
 8001ab8:	f043 038b 	orr.w	r3, r3, #139	; 0x8b
 8001abc:	6093      	str	r3, [r2, #8]
	USART6->CR1 &= ~(1 << 15);		// OVER8 = 0
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <usart6_init+0x178>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <usart6_init+0x178>)
 8001ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ac8:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <usart6_init+0x178>)
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <usart6_init+0x178>)
 8001ad0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad4:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 10);		// No parity
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <usart6_init+0x178>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <usart6_init+0x178>)
 8001adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ae0:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 *
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART6->CR2 &= ~(1 << 11);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <usart6_init+0x178>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <usart6_init+0x178>)
 8001ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aec:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 *
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART6->CR1 &= ~(1 << 12);
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <usart6_init+0x178>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <usart6_init+0x178>)
 8001af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af8:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 *
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART6->CR3 &= ~(0b11 << 8);
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <usart6_init+0x178>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <usart6_init+0x178>)
 8001b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b04:	6153      	str	r3, [r2, #20]
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */

	NVIC->IP[71] = (3 << 4);
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <usart6_init+0x17c>)
 8001b08:	2230      	movs	r2, #48	; 0x30
 8001b0a:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 71 in the NVIC table would be at I{S/C}ER[2][7:7].
	 */
	NVIC->ISER[2] = (1 << 7);   // Note: Writing '0' is a no-op
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <usart6_init+0x17c>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	609a      	str	r2, [r3, #8]

	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART6->CR1 |= (0b1111 << 2);
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <usart6_init+0x178>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <usart6_init+0x178>)
 8001b1a:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8001b1e:	60d3      	str	r3, [r2, #12]
	return;
 8001b20:	bf00      	nop
}
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200002bc 	.word	0x200002bc
 8001b28:	200002c0 	.word	0x200002c0
 8001b2c:	200002c4 	.word	0x200002c4
 8001b30:	200002c8 	.word	0x200002c8
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40011400 	.word	0x40011400
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <usart6_rx_get_event>:
	return;
}

// Get an event from the RX queue
bool usart6_rx_get_event(struct usart6_rx_event *evt)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	if (ctr_rxf6 > 0 && evt != 0) {
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <usart6_rx_get_event+0x54>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01a      	beq.n	8001b8a <usart6_rx_get_event+0x46>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d017      	beq.n	8001b8a <usart6_rx_get_event+0x46>
		*evt = fifo_rx6[idx_rxf_26++];
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <usart6_rx_get_event+0x58>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <usart6_rx_get_event+0x58>)
 8001b62:	600a      	str	r2, [r1, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <usart6_rx_get_event+0x5c>)
 8001b68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b6c:	6013      	str	r3, [r2, #0]
		--ctr_rxf6;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <usart6_rx_get_event+0x54>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <usart6_rx_get_event+0x54>)
 8001b76:	6013      	str	r3, [r2, #0]
		if (idx_rxf_26 >= RXFIFO_LEN6)
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <usart6_rx_get_event+0x58>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b7e:	d902      	bls.n	8001b86 <usart6_rx_get_event+0x42>
			idx_rxf_26 = 0;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <usart6_rx_get_event+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
		return true;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <usart6_rx_get_event+0x48>
	} else {
		return false;
 8001b8a:	2300      	movs	r3, #0
	}
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	200002c4 	.word	0x200002c4
 8001b9c:	200002c0 	.word	0x200002c0
 8001ba0:	200002c8 	.word	0x200002c8

08001ba4 <usart6_tx_is_busy>:

// Enqueue a buffer to be transmitted
bool usart6_tx_is_busy(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	return (fifo_tx_buf6 != 0 || fifo_tx_len6 > 0);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <usart6_tx_is_busy+0x2c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d103      	bne.n	8001bb8 <usart6_tx_is_busy+0x14>
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <usart6_tx_is_busy+0x30>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <usart6_tx_is_busy+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <usart6_tx_is_busy+0x1a>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	200002b4 	.word	0x200002b4
 8001bd4:	200002b8 	.word	0x200002b8

08001bd8 <usart6_tx_send>:
bool usart6_tx_send(const char *buf, unsigned int len)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
	if (fifo_tx_buf6 != 0 || fifo_tx_len6 > 0)
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <usart6_tx_send+0x44>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <usart6_tx_send+0x1a>
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <usart6_tx_send+0x48>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <usart6_tx_send+0x1e>
		return false;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e00c      	b.n	8001c10 <usart6_tx_send+0x38>

	fifo_tx_buf6 = buf;
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <usart6_tx_send+0x44>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6013      	str	r3, [r2, #0]
	fifo_tx_len6 = len;
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <usart6_tx_send+0x48>)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6013      	str	r3, [r2, #0]
	USART6->CR1 |= (1 << 7);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <usart6_tx_send+0x4c>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <usart6_tx_send+0x4c>)
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	60d3      	str	r3, [r2, #12]
	return true;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200002b4 	.word	0x200002b4
 8001c20:	200002b8 	.word	0x200002b8
 8001c24:	40011400 	.word	0x40011400

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c2e:	490e      	ldr	r1, [pc, #56]	; (8001c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c30:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c44:	4c0b      	ldr	r4, [pc, #44]	; (8001c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c52:	f7ff fc95 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f000 f863 	bl	8001d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7ff f9cf 	bl	8000ffc <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c6c:	08003b88 	.word	0x08003b88
  ldr r2, =_sbss
 8001c70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c74:	20000510 	.word	0x20000510

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <siprintf>:
 8001c7c:	b40e      	push	{r1, r2, r3}
 8001c7e:	b500      	push	{lr}
 8001c80:	b09c      	sub	sp, #112	; 0x70
 8001c82:	ab1d      	add	r3, sp, #116	; 0x74
 8001c84:	9002      	str	r0, [sp, #8]
 8001c86:	9006      	str	r0, [sp, #24]
 8001c88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <siprintf+0x38>)
 8001c8e:	9107      	str	r1, [sp, #28]
 8001c90:	9104      	str	r1, [sp, #16]
 8001c92:	4909      	ldr	r1, [pc, #36]	; (8001cb8 <siprintf+0x3c>)
 8001c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c98:	9105      	str	r1, [sp, #20]
 8001c9a:	6800      	ldr	r0, [r0, #0]
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	a902      	add	r1, sp, #8
 8001ca0:	f000 f9b6 	bl	8002010 <_svfiprintf_r>
 8001ca4:	9b02      	ldr	r3, [sp, #8]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	b01c      	add	sp, #112	; 0x70
 8001cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cb0:	b003      	add	sp, #12
 8001cb2:	4770      	bx	lr
 8001cb4:	2000004c 	.word	0x2000004c
 8001cb8:	ffff0208 	.word	0xffff0208

08001cbc <memset>:
 8001cbc:	4402      	add	r2, r0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <memset+0xa>
 8001cc4:	4770      	bx	lr
 8001cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cca:	e7f9      	b.n	8001cc0 <memset+0x4>

08001ccc <strchr>:
 8001ccc:	b2c9      	uxtb	r1, r1
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cd4:	b11a      	cbz	r2, 8001cde <strchr+0x12>
 8001cd6:	428a      	cmp	r2, r1
 8001cd8:	d1f9      	bne.n	8001cce <strchr+0x2>
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4770      	bx	lr
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	bf18      	it	ne
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	e7f9      	b.n	8001cda <strchr+0xe>

08001ce6 <strstr>:
 8001ce6:	780a      	ldrb	r2, [r1, #0]
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	b96a      	cbnz	r2, 8001d08 <strstr+0x22>
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d109      	bne.n	8001d06 <strstr+0x20>
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f6      	beq.n	8001cec <strstr+0x6>
 8001cfe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001d02:	429e      	cmp	r6, r3
 8001d04:	d0f7      	beq.n	8001cf6 <strstr+0x10>
 8001d06:	3001      	adds	r0, #1
 8001d08:	7803      	ldrb	r3, [r0, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ef      	bne.n	8001cee <strstr+0x8>
 8001d0e:	4618      	mov	r0, r3
 8001d10:	e7ec      	b.n	8001cec <strstr+0x6>
	...

08001d14 <__errno>:
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__errno+0x8>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	2000004c 	.word	0x2000004c

08001d20 <__libc_init_array>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	4d0d      	ldr	r5, [pc, #52]	; (8001d58 <__libc_init_array+0x38>)
 8001d24:	4c0d      	ldr	r4, [pc, #52]	; (8001d5c <__libc_init_array+0x3c>)
 8001d26:	1b64      	subs	r4, r4, r5
 8001d28:	10a4      	asrs	r4, r4, #2
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	42a6      	cmp	r6, r4
 8001d2e:	d109      	bne.n	8001d44 <__libc_init_array+0x24>
 8001d30:	4d0b      	ldr	r5, [pc, #44]	; (8001d60 <__libc_init_array+0x40>)
 8001d32:	4c0c      	ldr	r4, [pc, #48]	; (8001d64 <__libc_init_array+0x44>)
 8001d34:	f001 fe7a 	bl	8003a2c <_init>
 8001d38:	1b64      	subs	r4, r4, r5
 8001d3a:	10a4      	asrs	r4, r4, #2
 8001d3c:	2600      	movs	r6, #0
 8001d3e:	42a6      	cmp	r6, r4
 8001d40:	d105      	bne.n	8001d4e <__libc_init_array+0x2e>
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
 8001d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d48:	4798      	blx	r3
 8001d4a:	3601      	adds	r6, #1
 8001d4c:	e7ee      	b.n	8001d2c <__libc_init_array+0xc>
 8001d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d52:	4798      	blx	r3
 8001d54:	3601      	adds	r6, #1
 8001d56:	e7f2      	b.n	8001d3e <__libc_init_array+0x1e>
 8001d58:	08003b80 	.word	0x08003b80
 8001d5c:	08003b80 	.word	0x08003b80
 8001d60:	08003b80 	.word	0x08003b80
 8001d64:	08003b84 	.word	0x08003b84

08001d68 <__retarget_lock_acquire_recursive>:
 8001d68:	4770      	bx	lr

08001d6a <__retarget_lock_release_recursive>:
 8001d6a:	4770      	bx	lr

08001d6c <_free_r>:
 8001d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d6e:	2900      	cmp	r1, #0
 8001d70:	d044      	beq.n	8001dfc <_free_r+0x90>
 8001d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d76:	9001      	str	r0, [sp, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8001d7e:	bfb8      	it	lt
 8001d80:	18e4      	addlt	r4, r4, r3
 8001d82:	f000 f8df 	bl	8001f44 <__malloc_lock>
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <_free_r+0x94>)
 8001d88:	9801      	ldr	r0, [sp, #4]
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	b933      	cbnz	r3, 8001d9c <_free_r+0x30>
 8001d8e:	6063      	str	r3, [r4, #4]
 8001d90:	6014      	str	r4, [r2, #0]
 8001d92:	b003      	add	sp, #12
 8001d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d98:	f000 b8da 	b.w	8001f50 <__malloc_unlock>
 8001d9c:	42a3      	cmp	r3, r4
 8001d9e:	d908      	bls.n	8001db2 <_free_r+0x46>
 8001da0:	6825      	ldr	r5, [r4, #0]
 8001da2:	1961      	adds	r1, r4, r5
 8001da4:	428b      	cmp	r3, r1
 8001da6:	bf01      	itttt	eq
 8001da8:	6819      	ldreq	r1, [r3, #0]
 8001daa:	685b      	ldreq	r3, [r3, #4]
 8001dac:	1949      	addeq	r1, r1, r5
 8001dae:	6021      	streq	r1, [r4, #0]
 8001db0:	e7ed      	b.n	8001d8e <_free_r+0x22>
 8001db2:	461a      	mov	r2, r3
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b10b      	cbz	r3, 8001dbc <_free_r+0x50>
 8001db8:	42a3      	cmp	r3, r4
 8001dba:	d9fa      	bls.n	8001db2 <_free_r+0x46>
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	1855      	adds	r5, r2, r1
 8001dc0:	42a5      	cmp	r5, r4
 8001dc2:	d10b      	bne.n	8001ddc <_free_r+0x70>
 8001dc4:	6824      	ldr	r4, [r4, #0]
 8001dc6:	4421      	add	r1, r4
 8001dc8:	1854      	adds	r4, r2, r1
 8001dca:	42a3      	cmp	r3, r4
 8001dcc:	6011      	str	r1, [r2, #0]
 8001dce:	d1e0      	bne.n	8001d92 <_free_r+0x26>
 8001dd0:	681c      	ldr	r4, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	6053      	str	r3, [r2, #4]
 8001dd6:	440c      	add	r4, r1
 8001dd8:	6014      	str	r4, [r2, #0]
 8001dda:	e7da      	b.n	8001d92 <_free_r+0x26>
 8001ddc:	d902      	bls.n	8001de4 <_free_r+0x78>
 8001dde:	230c      	movs	r3, #12
 8001de0:	6003      	str	r3, [r0, #0]
 8001de2:	e7d6      	b.n	8001d92 <_free_r+0x26>
 8001de4:	6825      	ldr	r5, [r4, #0]
 8001de6:	1961      	adds	r1, r4, r5
 8001de8:	428b      	cmp	r3, r1
 8001dea:	bf04      	itt	eq
 8001dec:	6819      	ldreq	r1, [r3, #0]
 8001dee:	685b      	ldreq	r3, [r3, #4]
 8001df0:	6063      	str	r3, [r4, #4]
 8001df2:	bf04      	itt	eq
 8001df4:	1949      	addeq	r1, r1, r5
 8001df6:	6021      	streq	r1, [r4, #0]
 8001df8:	6054      	str	r4, [r2, #4]
 8001dfa:	e7ca      	b.n	8001d92 <_free_r+0x26>
 8001dfc:	b003      	add	sp, #12
 8001dfe:	bd30      	pop	{r4, r5, pc}
 8001e00:	20000508 	.word	0x20000508

08001e04 <sbrk_aligned>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	4e0e      	ldr	r6, [pc, #56]	; (8001e40 <sbrk_aligned+0x3c>)
 8001e08:	460c      	mov	r4, r1
 8001e0a:	6831      	ldr	r1, [r6, #0]
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	b911      	cbnz	r1, 8001e16 <sbrk_aligned+0x12>
 8001e10:	f000 fba6 	bl	8002560 <_sbrk_r>
 8001e14:	6030      	str	r0, [r6, #0]
 8001e16:	4621      	mov	r1, r4
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 fba1 	bl	8002560 <_sbrk_r>
 8001e1e:	1c43      	adds	r3, r0, #1
 8001e20:	d00a      	beq.n	8001e38 <sbrk_aligned+0x34>
 8001e22:	1cc4      	adds	r4, r0, #3
 8001e24:	f024 0403 	bic.w	r4, r4, #3
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	d007      	beq.n	8001e3c <sbrk_aligned+0x38>
 8001e2c:	1a21      	subs	r1, r4, r0
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f000 fb96 	bl	8002560 <_sbrk_r>
 8001e34:	3001      	adds	r0, #1
 8001e36:	d101      	bne.n	8001e3c <sbrk_aligned+0x38>
 8001e38:	f04f 34ff 	mov.w	r4, #4294967295
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
 8001e40:	2000050c 	.word	0x2000050c

08001e44 <_malloc_r>:
 8001e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e48:	1ccd      	adds	r5, r1, #3
 8001e4a:	f025 0503 	bic.w	r5, r5, #3
 8001e4e:	3508      	adds	r5, #8
 8001e50:	2d0c      	cmp	r5, #12
 8001e52:	bf38      	it	cc
 8001e54:	250c      	movcc	r5, #12
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	4607      	mov	r7, r0
 8001e5a:	db01      	blt.n	8001e60 <_malloc_r+0x1c>
 8001e5c:	42a9      	cmp	r1, r5
 8001e5e:	d905      	bls.n	8001e6c <_malloc_r+0x28>
 8001e60:	230c      	movs	r3, #12
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	2600      	movs	r6, #0
 8001e66:	4630      	mov	r0, r6
 8001e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f40 <_malloc_r+0xfc>
 8001e70:	f000 f868 	bl	8001f44 <__malloc_lock>
 8001e74:	f8d8 3000 	ldr.w	r3, [r8]
 8001e78:	461c      	mov	r4, r3
 8001e7a:	bb5c      	cbnz	r4, 8001ed4 <_malloc_r+0x90>
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	4638      	mov	r0, r7
 8001e80:	f7ff ffc0 	bl	8001e04 <sbrk_aligned>
 8001e84:	1c43      	adds	r3, r0, #1
 8001e86:	4604      	mov	r4, r0
 8001e88:	d155      	bne.n	8001f36 <_malloc_r+0xf2>
 8001e8a:	f8d8 4000 	ldr.w	r4, [r8]
 8001e8e:	4626      	mov	r6, r4
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d145      	bne.n	8001f20 <_malloc_r+0xdc>
 8001e94:	2c00      	cmp	r4, #0
 8001e96:	d048      	beq.n	8001f2a <_malloc_r+0xe6>
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	4631      	mov	r1, r6
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	eb04 0903 	add.w	r9, r4, r3
 8001ea2:	f000 fb5d 	bl	8002560 <_sbrk_r>
 8001ea6:	4581      	cmp	r9, r0
 8001ea8:	d13f      	bne.n	8001f2a <_malloc_r+0xe6>
 8001eaa:	6821      	ldr	r1, [r4, #0]
 8001eac:	1a6d      	subs	r5, r5, r1
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	f7ff ffa7 	bl	8001e04 <sbrk_aligned>
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	d037      	beq.n	8001f2a <_malloc_r+0xe6>
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	442b      	add	r3, r5
 8001ebe:	6023      	str	r3, [r4, #0]
 8001ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d038      	beq.n	8001f3a <_malloc_r+0xf6>
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	42a2      	cmp	r2, r4
 8001ecc:	d12b      	bne.n	8001f26 <_malloc_r+0xe2>
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e00f      	b.n	8001ef4 <_malloc_r+0xb0>
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	1b52      	subs	r2, r2, r5
 8001ed8:	d41f      	bmi.n	8001f1a <_malloc_r+0xd6>
 8001eda:	2a0b      	cmp	r2, #11
 8001edc:	d917      	bls.n	8001f0e <_malloc_r+0xca>
 8001ede:	1961      	adds	r1, r4, r5
 8001ee0:	42a3      	cmp	r3, r4
 8001ee2:	6025      	str	r5, [r4, #0]
 8001ee4:	bf18      	it	ne
 8001ee6:	6059      	strne	r1, [r3, #4]
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	bf08      	it	eq
 8001eec:	f8c8 1000 	streq.w	r1, [r8]
 8001ef0:	5162      	str	r2, [r4, r5]
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	f104 060b 	add.w	r6, r4, #11
 8001efa:	f000 f829 	bl	8001f50 <__malloc_unlock>
 8001efe:	f026 0607 	bic.w	r6, r6, #7
 8001f02:	1d23      	adds	r3, r4, #4
 8001f04:	1af2      	subs	r2, r6, r3
 8001f06:	d0ae      	beq.n	8001e66 <_malloc_r+0x22>
 8001f08:	1b9b      	subs	r3, r3, r6
 8001f0a:	50a3      	str	r3, [r4, r2]
 8001f0c:	e7ab      	b.n	8001e66 <_malloc_r+0x22>
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	6862      	ldr	r2, [r4, #4]
 8001f12:	d1dd      	bne.n	8001ed0 <_malloc_r+0x8c>
 8001f14:	f8c8 2000 	str.w	r2, [r8]
 8001f18:	e7ec      	b.n	8001ef4 <_malloc_r+0xb0>
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	6864      	ldr	r4, [r4, #4]
 8001f1e:	e7ac      	b.n	8001e7a <_malloc_r+0x36>
 8001f20:	4634      	mov	r4, r6
 8001f22:	6876      	ldr	r6, [r6, #4]
 8001f24:	e7b4      	b.n	8001e90 <_malloc_r+0x4c>
 8001f26:	4613      	mov	r3, r2
 8001f28:	e7cc      	b.n	8001ec4 <_malloc_r+0x80>
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4638      	mov	r0, r7
 8001f30:	f000 f80e 	bl	8001f50 <__malloc_unlock>
 8001f34:	e797      	b.n	8001e66 <_malloc_r+0x22>
 8001f36:	6025      	str	r5, [r4, #0]
 8001f38:	e7dc      	b.n	8001ef4 <_malloc_r+0xb0>
 8001f3a:	605b      	str	r3, [r3, #4]
 8001f3c:	deff      	udf	#255	; 0xff
 8001f3e:	bf00      	nop
 8001f40:	20000508 	.word	0x20000508

08001f44 <__malloc_lock>:
 8001f44:	4801      	ldr	r0, [pc, #4]	; (8001f4c <__malloc_lock+0x8>)
 8001f46:	f7ff bf0f 	b.w	8001d68 <__retarget_lock_acquire_recursive>
 8001f4a:	bf00      	nop
 8001f4c:	20000504 	.word	0x20000504

08001f50 <__malloc_unlock>:
 8001f50:	4801      	ldr	r0, [pc, #4]	; (8001f58 <__malloc_unlock+0x8>)
 8001f52:	f7ff bf0a 	b.w	8001d6a <__retarget_lock_release_recursive>
 8001f56:	bf00      	nop
 8001f58:	20000504 	.word	0x20000504

08001f5c <__ssputs_r>:
 8001f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f60:	688e      	ldr	r6, [r1, #8]
 8001f62:	461f      	mov	r7, r3
 8001f64:	42be      	cmp	r6, r7
 8001f66:	680b      	ldr	r3, [r1, #0]
 8001f68:	4682      	mov	sl, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	4690      	mov	r8, r2
 8001f6e:	d82c      	bhi.n	8001fca <__ssputs_r+0x6e>
 8001f70:	898a      	ldrh	r2, [r1, #12]
 8001f72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f76:	d026      	beq.n	8001fc6 <__ssputs_r+0x6a>
 8001f78:	6965      	ldr	r5, [r4, #20]
 8001f7a:	6909      	ldr	r1, [r1, #16]
 8001f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f80:	eba3 0901 	sub.w	r9, r3, r1
 8001f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f88:	1c7b      	adds	r3, r7, #1
 8001f8a:	444b      	add	r3, r9
 8001f8c:	106d      	asrs	r5, r5, #1
 8001f8e:	429d      	cmp	r5, r3
 8001f90:	bf38      	it	cc
 8001f92:	461d      	movcc	r5, r3
 8001f94:	0553      	lsls	r3, r2, #21
 8001f96:	d527      	bpl.n	8001fe8 <__ssputs_r+0x8c>
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7ff ff53 	bl	8001e44 <_malloc_r>
 8001f9e:	4606      	mov	r6, r0
 8001fa0:	b360      	cbz	r0, 8001ffc <__ssputs_r+0xa0>
 8001fa2:	6921      	ldr	r1, [r4, #16]
 8001fa4:	464a      	mov	r2, r9
 8001fa6:	f000 faeb 	bl	8002580 <memcpy>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	81a3      	strh	r3, [r4, #12]
 8001fb6:	6126      	str	r6, [r4, #16]
 8001fb8:	6165      	str	r5, [r4, #20]
 8001fba:	444e      	add	r6, r9
 8001fbc:	eba5 0509 	sub.w	r5, r5, r9
 8001fc0:	6026      	str	r6, [r4, #0]
 8001fc2:	60a5      	str	r5, [r4, #8]
 8001fc4:	463e      	mov	r6, r7
 8001fc6:	42be      	cmp	r6, r7
 8001fc8:	d900      	bls.n	8001fcc <__ssputs_r+0x70>
 8001fca:	463e      	mov	r6, r7
 8001fcc:	6820      	ldr	r0, [r4, #0]
 8001fce:	4632      	mov	r2, r6
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	f000 faab 	bl	800252c <memmove>
 8001fd6:	68a3      	ldr	r3, [r4, #8]
 8001fd8:	1b9b      	subs	r3, r3, r6
 8001fda:	60a3      	str	r3, [r4, #8]
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	4433      	add	r3, r6
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe8:	462a      	mov	r2, r5
 8001fea:	f000 fad7 	bl	800259c <_realloc_r>
 8001fee:	4606      	mov	r6, r0
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d1e0      	bne.n	8001fb6 <__ssputs_r+0x5a>
 8001ff4:	6921      	ldr	r1, [r4, #16]
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	f7ff feb8 	bl	8001d6c <_free_r>
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	f8ca 3000 	str.w	r3, [sl]
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
 800200e:	e7e9      	b.n	8001fe4 <__ssputs_r+0x88>

08002010 <_svfiprintf_r>:
 8002010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002014:	4698      	mov	r8, r3
 8002016:	898b      	ldrh	r3, [r1, #12]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	b09d      	sub	sp, #116	; 0x74
 800201c:	4607      	mov	r7, r0
 800201e:	460d      	mov	r5, r1
 8002020:	4614      	mov	r4, r2
 8002022:	d50e      	bpl.n	8002042 <_svfiprintf_r+0x32>
 8002024:	690b      	ldr	r3, [r1, #16]
 8002026:	b963      	cbnz	r3, 8002042 <_svfiprintf_r+0x32>
 8002028:	2140      	movs	r1, #64	; 0x40
 800202a:	f7ff ff0b 	bl	8001e44 <_malloc_r>
 800202e:	6028      	str	r0, [r5, #0]
 8002030:	6128      	str	r0, [r5, #16]
 8002032:	b920      	cbnz	r0, 800203e <_svfiprintf_r+0x2e>
 8002034:	230c      	movs	r3, #12
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	e0d0      	b.n	80021e0 <_svfiprintf_r+0x1d0>
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	616b      	str	r3, [r5, #20]
 8002042:	2300      	movs	r3, #0
 8002044:	9309      	str	r3, [sp, #36]	; 0x24
 8002046:	2320      	movs	r3, #32
 8002048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800204c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002050:	2330      	movs	r3, #48	; 0x30
 8002052:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80021f8 <_svfiprintf_r+0x1e8>
 8002056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800205a:	f04f 0901 	mov.w	r9, #1
 800205e:	4623      	mov	r3, r4
 8002060:	469a      	mov	sl, r3
 8002062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002066:	b10a      	cbz	r2, 800206c <_svfiprintf_r+0x5c>
 8002068:	2a25      	cmp	r2, #37	; 0x25
 800206a:	d1f9      	bne.n	8002060 <_svfiprintf_r+0x50>
 800206c:	ebba 0b04 	subs.w	fp, sl, r4
 8002070:	d00b      	beq.n	800208a <_svfiprintf_r+0x7a>
 8002072:	465b      	mov	r3, fp
 8002074:	4622      	mov	r2, r4
 8002076:	4629      	mov	r1, r5
 8002078:	4638      	mov	r0, r7
 800207a:	f7ff ff6f 	bl	8001f5c <__ssputs_r>
 800207e:	3001      	adds	r0, #1
 8002080:	f000 80a9 	beq.w	80021d6 <_svfiprintf_r+0x1c6>
 8002084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002086:	445a      	add	r2, fp
 8002088:	9209      	str	r2, [sp, #36]	; 0x24
 800208a:	f89a 3000 	ldrb.w	r3, [sl]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80a1 	beq.w	80021d6 <_svfiprintf_r+0x1c6>
 8002094:	2300      	movs	r3, #0
 8002096:	f04f 32ff 	mov.w	r2, #4294967295
 800209a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800209e:	f10a 0a01 	add.w	sl, sl, #1
 80020a2:	9304      	str	r3, [sp, #16]
 80020a4:	9307      	str	r3, [sp, #28]
 80020a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020aa:	931a      	str	r3, [sp, #104]	; 0x68
 80020ac:	4654      	mov	r4, sl
 80020ae:	2205      	movs	r2, #5
 80020b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020b4:	4850      	ldr	r0, [pc, #320]	; (80021f8 <_svfiprintf_r+0x1e8>)
 80020b6:	f7fe f89b 	bl	80001f0 <memchr>
 80020ba:	9a04      	ldr	r2, [sp, #16]
 80020bc:	b9d8      	cbnz	r0, 80020f6 <_svfiprintf_r+0xe6>
 80020be:	06d0      	lsls	r0, r2, #27
 80020c0:	bf44      	itt	mi
 80020c2:	2320      	movmi	r3, #32
 80020c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020c8:	0711      	lsls	r1, r2, #28
 80020ca:	bf44      	itt	mi
 80020cc:	232b      	movmi	r3, #43	; 0x2b
 80020ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020d2:	f89a 3000 	ldrb.w	r3, [sl]
 80020d6:	2b2a      	cmp	r3, #42	; 0x2a
 80020d8:	d015      	beq.n	8002106 <_svfiprintf_r+0xf6>
 80020da:	9a07      	ldr	r2, [sp, #28]
 80020dc:	4654      	mov	r4, sl
 80020de:	2000      	movs	r0, #0
 80020e0:	f04f 0c0a 	mov.w	ip, #10
 80020e4:	4621      	mov	r1, r4
 80020e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020ea:	3b30      	subs	r3, #48	; 0x30
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d94d      	bls.n	800218c <_svfiprintf_r+0x17c>
 80020f0:	b1b0      	cbz	r0, 8002120 <_svfiprintf_r+0x110>
 80020f2:	9207      	str	r2, [sp, #28]
 80020f4:	e014      	b.n	8002120 <_svfiprintf_r+0x110>
 80020f6:	eba0 0308 	sub.w	r3, r0, r8
 80020fa:	fa09 f303 	lsl.w	r3, r9, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	9304      	str	r3, [sp, #16]
 8002102:	46a2      	mov	sl, r4
 8002104:	e7d2      	b.n	80020ac <_svfiprintf_r+0x9c>
 8002106:	9b03      	ldr	r3, [sp, #12]
 8002108:	1d19      	adds	r1, r3, #4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	9103      	str	r1, [sp, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	bfbb      	ittet	lt
 8002112:	425b      	neglt	r3, r3
 8002114:	f042 0202 	orrlt.w	r2, r2, #2
 8002118:	9307      	strge	r3, [sp, #28]
 800211a:	9307      	strlt	r3, [sp, #28]
 800211c:	bfb8      	it	lt
 800211e:	9204      	strlt	r2, [sp, #16]
 8002120:	7823      	ldrb	r3, [r4, #0]
 8002122:	2b2e      	cmp	r3, #46	; 0x2e
 8002124:	d10c      	bne.n	8002140 <_svfiprintf_r+0x130>
 8002126:	7863      	ldrb	r3, [r4, #1]
 8002128:	2b2a      	cmp	r3, #42	; 0x2a
 800212a:	d134      	bne.n	8002196 <_svfiprintf_r+0x186>
 800212c:	9b03      	ldr	r3, [sp, #12]
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	9203      	str	r2, [sp, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	bfb8      	it	lt
 8002138:	f04f 33ff 	movlt.w	r3, #4294967295
 800213c:	3402      	adds	r4, #2
 800213e:	9305      	str	r3, [sp, #20]
 8002140:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002208 <_svfiprintf_r+0x1f8>
 8002144:	7821      	ldrb	r1, [r4, #0]
 8002146:	2203      	movs	r2, #3
 8002148:	4650      	mov	r0, sl
 800214a:	f7fe f851 	bl	80001f0 <memchr>
 800214e:	b138      	cbz	r0, 8002160 <_svfiprintf_r+0x150>
 8002150:	9b04      	ldr	r3, [sp, #16]
 8002152:	eba0 000a 	sub.w	r0, r0, sl
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	4082      	lsls	r2, r0
 800215a:	4313      	orrs	r3, r2
 800215c:	3401      	adds	r4, #1
 800215e:	9304      	str	r3, [sp, #16]
 8002160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002164:	4825      	ldr	r0, [pc, #148]	; (80021fc <_svfiprintf_r+0x1ec>)
 8002166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800216a:	2206      	movs	r2, #6
 800216c:	f7fe f840 	bl	80001f0 <memchr>
 8002170:	2800      	cmp	r0, #0
 8002172:	d038      	beq.n	80021e6 <_svfiprintf_r+0x1d6>
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <_svfiprintf_r+0x1f0>)
 8002176:	bb1b      	cbnz	r3, 80021c0 <_svfiprintf_r+0x1b0>
 8002178:	9b03      	ldr	r3, [sp, #12]
 800217a:	3307      	adds	r3, #7
 800217c:	f023 0307 	bic.w	r3, r3, #7
 8002180:	3308      	adds	r3, #8
 8002182:	9303      	str	r3, [sp, #12]
 8002184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002186:	4433      	add	r3, r6
 8002188:	9309      	str	r3, [sp, #36]	; 0x24
 800218a:	e768      	b.n	800205e <_svfiprintf_r+0x4e>
 800218c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002190:	460c      	mov	r4, r1
 8002192:	2001      	movs	r0, #1
 8002194:	e7a6      	b.n	80020e4 <_svfiprintf_r+0xd4>
 8002196:	2300      	movs	r3, #0
 8002198:	3401      	adds	r4, #1
 800219a:	9305      	str	r3, [sp, #20]
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 0c0a 	mov.w	ip, #10
 80021a2:	4620      	mov	r0, r4
 80021a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021a8:	3a30      	subs	r2, #48	; 0x30
 80021aa:	2a09      	cmp	r2, #9
 80021ac:	d903      	bls.n	80021b6 <_svfiprintf_r+0x1a6>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0c6      	beq.n	8002140 <_svfiprintf_r+0x130>
 80021b2:	9105      	str	r1, [sp, #20]
 80021b4:	e7c4      	b.n	8002140 <_svfiprintf_r+0x130>
 80021b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80021ba:	4604      	mov	r4, r0
 80021bc:	2301      	movs	r3, #1
 80021be:	e7f0      	b.n	80021a2 <_svfiprintf_r+0x192>
 80021c0:	ab03      	add	r3, sp, #12
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	462a      	mov	r2, r5
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <_svfiprintf_r+0x1f4>)
 80021c8:	a904      	add	r1, sp, #16
 80021ca:	4638      	mov	r0, r7
 80021cc:	f3af 8000 	nop.w
 80021d0:	1c42      	adds	r2, r0, #1
 80021d2:	4606      	mov	r6, r0
 80021d4:	d1d6      	bne.n	8002184 <_svfiprintf_r+0x174>
 80021d6:	89ab      	ldrh	r3, [r5, #12]
 80021d8:	065b      	lsls	r3, r3, #25
 80021da:	f53f af2d 	bmi.w	8002038 <_svfiprintf_r+0x28>
 80021de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021e0:	b01d      	add	sp, #116	; 0x74
 80021e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e6:	ab03      	add	r3, sp, #12
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	462a      	mov	r2, r5
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <_svfiprintf_r+0x1f4>)
 80021ee:	a904      	add	r1, sp, #16
 80021f0:	4638      	mov	r0, r7
 80021f2:	f000 f879 	bl	80022e8 <_printf_i>
 80021f6:	e7eb      	b.n	80021d0 <_svfiprintf_r+0x1c0>
 80021f8:	08003b17 	.word	0x08003b17
 80021fc:	08003b21 	.word	0x08003b21
 8002200:	00000000 	.word	0x00000000
 8002204:	08001f5d 	.word	0x08001f5d
 8002208:	08003b1d 	.word	0x08003b1d

0800220c <_printf_common>:
 800220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	4616      	mov	r6, r2
 8002212:	4699      	mov	r9, r3
 8002214:	688a      	ldr	r2, [r1, #8]
 8002216:	690b      	ldr	r3, [r1, #16]
 8002218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800221c:	4293      	cmp	r3, r2
 800221e:	bfb8      	it	lt
 8002220:	4613      	movlt	r3, r2
 8002222:	6033      	str	r3, [r6, #0]
 8002224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002228:	4607      	mov	r7, r0
 800222a:	460c      	mov	r4, r1
 800222c:	b10a      	cbz	r2, 8002232 <_printf_common+0x26>
 800222e:	3301      	adds	r3, #1
 8002230:	6033      	str	r3, [r6, #0]
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	0699      	lsls	r1, r3, #26
 8002236:	bf42      	ittt	mi
 8002238:	6833      	ldrmi	r3, [r6, #0]
 800223a:	3302      	addmi	r3, #2
 800223c:	6033      	strmi	r3, [r6, #0]
 800223e:	6825      	ldr	r5, [r4, #0]
 8002240:	f015 0506 	ands.w	r5, r5, #6
 8002244:	d106      	bne.n	8002254 <_printf_common+0x48>
 8002246:	f104 0a19 	add.w	sl, r4, #25
 800224a:	68e3      	ldr	r3, [r4, #12]
 800224c:	6832      	ldr	r2, [r6, #0]
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	42ab      	cmp	r3, r5
 8002252:	dc26      	bgt.n	80022a2 <_printf_common+0x96>
 8002254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002258:	1e13      	subs	r3, r2, #0
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	bf18      	it	ne
 800225e:	2301      	movne	r3, #1
 8002260:	0692      	lsls	r2, r2, #26
 8002262:	d42b      	bmi.n	80022bc <_printf_common+0xb0>
 8002264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002268:	4649      	mov	r1, r9
 800226a:	4638      	mov	r0, r7
 800226c:	47c0      	blx	r8
 800226e:	3001      	adds	r0, #1
 8002270:	d01e      	beq.n	80022b0 <_printf_common+0xa4>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	6922      	ldr	r2, [r4, #16]
 8002276:	f003 0306 	and.w	r3, r3, #6
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf02      	ittt	eq
 800227e:	68e5      	ldreq	r5, [r4, #12]
 8002280:	6833      	ldreq	r3, [r6, #0]
 8002282:	1aed      	subeq	r5, r5, r3
 8002284:	68a3      	ldr	r3, [r4, #8]
 8002286:	bf0c      	ite	eq
 8002288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800228c:	2500      	movne	r5, #0
 800228e:	4293      	cmp	r3, r2
 8002290:	bfc4      	itt	gt
 8002292:	1a9b      	subgt	r3, r3, r2
 8002294:	18ed      	addgt	r5, r5, r3
 8002296:	2600      	movs	r6, #0
 8002298:	341a      	adds	r4, #26
 800229a:	42b5      	cmp	r5, r6
 800229c:	d11a      	bne.n	80022d4 <_printf_common+0xc8>
 800229e:	2000      	movs	r0, #0
 80022a0:	e008      	b.n	80022b4 <_printf_common+0xa8>
 80022a2:	2301      	movs	r3, #1
 80022a4:	4652      	mov	r2, sl
 80022a6:	4649      	mov	r1, r9
 80022a8:	4638      	mov	r0, r7
 80022aa:	47c0      	blx	r8
 80022ac:	3001      	adds	r0, #1
 80022ae:	d103      	bne.n	80022b8 <_printf_common+0xac>
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b8:	3501      	adds	r5, #1
 80022ba:	e7c6      	b.n	800224a <_printf_common+0x3e>
 80022bc:	18e1      	adds	r1, r4, r3
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	2030      	movs	r0, #48	; 0x30
 80022c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022c6:	4422      	add	r2, r4
 80022c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022d0:	3302      	adds	r3, #2
 80022d2:	e7c7      	b.n	8002264 <_printf_common+0x58>
 80022d4:	2301      	movs	r3, #1
 80022d6:	4622      	mov	r2, r4
 80022d8:	4649      	mov	r1, r9
 80022da:	4638      	mov	r0, r7
 80022dc:	47c0      	blx	r8
 80022de:	3001      	adds	r0, #1
 80022e0:	d0e6      	beq.n	80022b0 <_printf_common+0xa4>
 80022e2:	3601      	adds	r6, #1
 80022e4:	e7d9      	b.n	800229a <_printf_common+0x8e>
	...

080022e8 <_printf_i>:
 80022e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022ec:	7e0f      	ldrb	r7, [r1, #24]
 80022ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022f0:	2f78      	cmp	r7, #120	; 0x78
 80022f2:	4691      	mov	r9, r2
 80022f4:	4680      	mov	r8, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	469a      	mov	sl, r3
 80022fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022fe:	d807      	bhi.n	8002310 <_printf_i+0x28>
 8002300:	2f62      	cmp	r7, #98	; 0x62
 8002302:	d80a      	bhi.n	800231a <_printf_i+0x32>
 8002304:	2f00      	cmp	r7, #0
 8002306:	f000 80d4 	beq.w	80024b2 <_printf_i+0x1ca>
 800230a:	2f58      	cmp	r7, #88	; 0x58
 800230c:	f000 80c0 	beq.w	8002490 <_printf_i+0x1a8>
 8002310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002318:	e03a      	b.n	8002390 <_printf_i+0xa8>
 800231a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800231e:	2b15      	cmp	r3, #21
 8002320:	d8f6      	bhi.n	8002310 <_printf_i+0x28>
 8002322:	a101      	add	r1, pc, #4	; (adr r1, 8002328 <_printf_i+0x40>)
 8002324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002328:	08002381 	.word	0x08002381
 800232c:	08002395 	.word	0x08002395
 8002330:	08002311 	.word	0x08002311
 8002334:	08002311 	.word	0x08002311
 8002338:	08002311 	.word	0x08002311
 800233c:	08002311 	.word	0x08002311
 8002340:	08002395 	.word	0x08002395
 8002344:	08002311 	.word	0x08002311
 8002348:	08002311 	.word	0x08002311
 800234c:	08002311 	.word	0x08002311
 8002350:	08002311 	.word	0x08002311
 8002354:	08002499 	.word	0x08002499
 8002358:	080023c1 	.word	0x080023c1
 800235c:	08002453 	.word	0x08002453
 8002360:	08002311 	.word	0x08002311
 8002364:	08002311 	.word	0x08002311
 8002368:	080024bb 	.word	0x080024bb
 800236c:	08002311 	.word	0x08002311
 8002370:	080023c1 	.word	0x080023c1
 8002374:	08002311 	.word	0x08002311
 8002378:	08002311 	.word	0x08002311
 800237c:	0800245b 	.word	0x0800245b
 8002380:	682b      	ldr	r3, [r5, #0]
 8002382:	1d1a      	adds	r2, r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	602a      	str	r2, [r5, #0]
 8002388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800238c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002390:	2301      	movs	r3, #1
 8002392:	e09f      	b.n	80024d4 <_printf_i+0x1ec>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	0607      	lsls	r7, r0, #24
 800239a:	f103 0104 	add.w	r1, r3, #4
 800239e:	6029      	str	r1, [r5, #0]
 80023a0:	d501      	bpl.n	80023a6 <_printf_i+0xbe>
 80023a2:	681e      	ldr	r6, [r3, #0]
 80023a4:	e003      	b.n	80023ae <_printf_i+0xc6>
 80023a6:	0646      	lsls	r6, r0, #25
 80023a8:	d5fb      	bpl.n	80023a2 <_printf_i+0xba>
 80023aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	da03      	bge.n	80023ba <_printf_i+0xd2>
 80023b2:	232d      	movs	r3, #45	; 0x2d
 80023b4:	4276      	negs	r6, r6
 80023b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ba:	485a      	ldr	r0, [pc, #360]	; (8002524 <_printf_i+0x23c>)
 80023bc:	230a      	movs	r3, #10
 80023be:	e012      	b.n	80023e6 <_printf_i+0xfe>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	1d19      	adds	r1, r3, #4
 80023c6:	6029      	str	r1, [r5, #0]
 80023c8:	0605      	lsls	r5, r0, #24
 80023ca:	d501      	bpl.n	80023d0 <_printf_i+0xe8>
 80023cc:	681e      	ldr	r6, [r3, #0]
 80023ce:	e002      	b.n	80023d6 <_printf_i+0xee>
 80023d0:	0641      	lsls	r1, r0, #25
 80023d2:	d5fb      	bpl.n	80023cc <_printf_i+0xe4>
 80023d4:	881e      	ldrh	r6, [r3, #0]
 80023d6:	4853      	ldr	r0, [pc, #332]	; (8002524 <_printf_i+0x23c>)
 80023d8:	2f6f      	cmp	r7, #111	; 0x6f
 80023da:	bf0c      	ite	eq
 80023dc:	2308      	moveq	r3, #8
 80023de:	230a      	movne	r3, #10
 80023e0:	2100      	movs	r1, #0
 80023e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023e6:	6865      	ldr	r5, [r4, #4]
 80023e8:	60a5      	str	r5, [r4, #8]
 80023ea:	2d00      	cmp	r5, #0
 80023ec:	bfa2      	ittt	ge
 80023ee:	6821      	ldrge	r1, [r4, #0]
 80023f0:	f021 0104 	bicge.w	r1, r1, #4
 80023f4:	6021      	strge	r1, [r4, #0]
 80023f6:	b90e      	cbnz	r6, 80023fc <_printf_i+0x114>
 80023f8:	2d00      	cmp	r5, #0
 80023fa:	d04b      	beq.n	8002494 <_printf_i+0x1ac>
 80023fc:	4615      	mov	r5, r2
 80023fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8002402:	fb03 6711 	mls	r7, r3, r1, r6
 8002406:	5dc7      	ldrb	r7, [r0, r7]
 8002408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800240c:	4637      	mov	r7, r6
 800240e:	42bb      	cmp	r3, r7
 8002410:	460e      	mov	r6, r1
 8002412:	d9f4      	bls.n	80023fe <_printf_i+0x116>
 8002414:	2b08      	cmp	r3, #8
 8002416:	d10b      	bne.n	8002430 <_printf_i+0x148>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	07de      	lsls	r6, r3, #31
 800241c:	d508      	bpl.n	8002430 <_printf_i+0x148>
 800241e:	6923      	ldr	r3, [r4, #16]
 8002420:	6861      	ldr	r1, [r4, #4]
 8002422:	4299      	cmp	r1, r3
 8002424:	bfde      	ittt	le
 8002426:	2330      	movle	r3, #48	; 0x30
 8002428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800242c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002430:	1b52      	subs	r2, r2, r5
 8002432:	6122      	str	r2, [r4, #16]
 8002434:	f8cd a000 	str.w	sl, [sp]
 8002438:	464b      	mov	r3, r9
 800243a:	aa03      	add	r2, sp, #12
 800243c:	4621      	mov	r1, r4
 800243e:	4640      	mov	r0, r8
 8002440:	f7ff fee4 	bl	800220c <_printf_common>
 8002444:	3001      	adds	r0, #1
 8002446:	d14a      	bne.n	80024de <_printf_i+0x1f6>
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	b004      	add	sp, #16
 800244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	4833      	ldr	r0, [pc, #204]	; (8002528 <_printf_i+0x240>)
 800245c:	2778      	movs	r7, #120	; 0x78
 800245e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	6829      	ldr	r1, [r5, #0]
 8002466:	061f      	lsls	r7, r3, #24
 8002468:	f851 6b04 	ldr.w	r6, [r1], #4
 800246c:	d402      	bmi.n	8002474 <_printf_i+0x18c>
 800246e:	065f      	lsls	r7, r3, #25
 8002470:	bf48      	it	mi
 8002472:	b2b6      	uxthmi	r6, r6
 8002474:	07df      	lsls	r7, r3, #31
 8002476:	bf48      	it	mi
 8002478:	f043 0320 	orrmi.w	r3, r3, #32
 800247c:	6029      	str	r1, [r5, #0]
 800247e:	bf48      	it	mi
 8002480:	6023      	strmi	r3, [r4, #0]
 8002482:	b91e      	cbnz	r6, 800248c <_printf_i+0x1a4>
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	f023 0320 	bic.w	r3, r3, #32
 800248a:	6023      	str	r3, [r4, #0]
 800248c:	2310      	movs	r3, #16
 800248e:	e7a7      	b.n	80023e0 <_printf_i+0xf8>
 8002490:	4824      	ldr	r0, [pc, #144]	; (8002524 <_printf_i+0x23c>)
 8002492:	e7e4      	b.n	800245e <_printf_i+0x176>
 8002494:	4615      	mov	r5, r2
 8002496:	e7bd      	b.n	8002414 <_printf_i+0x12c>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	6826      	ldr	r6, [r4, #0]
 800249c:	6961      	ldr	r1, [r4, #20]
 800249e:	1d18      	adds	r0, r3, #4
 80024a0:	6028      	str	r0, [r5, #0]
 80024a2:	0635      	lsls	r5, r6, #24
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	d501      	bpl.n	80024ac <_printf_i+0x1c4>
 80024a8:	6019      	str	r1, [r3, #0]
 80024aa:	e002      	b.n	80024b2 <_printf_i+0x1ca>
 80024ac:	0670      	lsls	r0, r6, #25
 80024ae:	d5fb      	bpl.n	80024a8 <_printf_i+0x1c0>
 80024b0:	8019      	strh	r1, [r3, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	6123      	str	r3, [r4, #16]
 80024b6:	4615      	mov	r5, r2
 80024b8:	e7bc      	b.n	8002434 <_printf_i+0x14c>
 80024ba:	682b      	ldr	r3, [r5, #0]
 80024bc:	1d1a      	adds	r2, r3, #4
 80024be:	602a      	str	r2, [r5, #0]
 80024c0:	681d      	ldr	r5, [r3, #0]
 80024c2:	6862      	ldr	r2, [r4, #4]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4628      	mov	r0, r5
 80024c8:	f7fd fe92 	bl	80001f0 <memchr>
 80024cc:	b108      	cbz	r0, 80024d2 <_printf_i+0x1ea>
 80024ce:	1b40      	subs	r0, r0, r5
 80024d0:	6060      	str	r0, [r4, #4]
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	6123      	str	r3, [r4, #16]
 80024d6:	2300      	movs	r3, #0
 80024d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024dc:	e7aa      	b.n	8002434 <_printf_i+0x14c>
 80024de:	6923      	ldr	r3, [r4, #16]
 80024e0:	462a      	mov	r2, r5
 80024e2:	4649      	mov	r1, r9
 80024e4:	4640      	mov	r0, r8
 80024e6:	47d0      	blx	sl
 80024e8:	3001      	adds	r0, #1
 80024ea:	d0ad      	beq.n	8002448 <_printf_i+0x160>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	079b      	lsls	r3, r3, #30
 80024f0:	d413      	bmi.n	800251a <_printf_i+0x232>
 80024f2:	68e0      	ldr	r0, [r4, #12]
 80024f4:	9b03      	ldr	r3, [sp, #12]
 80024f6:	4298      	cmp	r0, r3
 80024f8:	bfb8      	it	lt
 80024fa:	4618      	movlt	r0, r3
 80024fc:	e7a6      	b.n	800244c <_printf_i+0x164>
 80024fe:	2301      	movs	r3, #1
 8002500:	4632      	mov	r2, r6
 8002502:	4649      	mov	r1, r9
 8002504:	4640      	mov	r0, r8
 8002506:	47d0      	blx	sl
 8002508:	3001      	adds	r0, #1
 800250a:	d09d      	beq.n	8002448 <_printf_i+0x160>
 800250c:	3501      	adds	r5, #1
 800250e:	68e3      	ldr	r3, [r4, #12]
 8002510:	9903      	ldr	r1, [sp, #12]
 8002512:	1a5b      	subs	r3, r3, r1
 8002514:	42ab      	cmp	r3, r5
 8002516:	dcf2      	bgt.n	80024fe <_printf_i+0x216>
 8002518:	e7eb      	b.n	80024f2 <_printf_i+0x20a>
 800251a:	2500      	movs	r5, #0
 800251c:	f104 0619 	add.w	r6, r4, #25
 8002520:	e7f5      	b.n	800250e <_printf_i+0x226>
 8002522:	bf00      	nop
 8002524:	08003b28 	.word	0x08003b28
 8002528:	08003b39 	.word	0x08003b39

0800252c <memmove>:
 800252c:	4288      	cmp	r0, r1
 800252e:	b510      	push	{r4, lr}
 8002530:	eb01 0402 	add.w	r4, r1, r2
 8002534:	d902      	bls.n	800253c <memmove+0x10>
 8002536:	4284      	cmp	r4, r0
 8002538:	4623      	mov	r3, r4
 800253a:	d807      	bhi.n	800254c <memmove+0x20>
 800253c:	1e43      	subs	r3, r0, #1
 800253e:	42a1      	cmp	r1, r4
 8002540:	d008      	beq.n	8002554 <memmove+0x28>
 8002542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800254a:	e7f8      	b.n	800253e <memmove+0x12>
 800254c:	4402      	add	r2, r0
 800254e:	4601      	mov	r1, r0
 8002550:	428a      	cmp	r2, r1
 8002552:	d100      	bne.n	8002556 <memmove+0x2a>
 8002554:	bd10      	pop	{r4, pc}
 8002556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800255a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800255e:	e7f7      	b.n	8002550 <memmove+0x24>

08002560 <_sbrk_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4d06      	ldr	r5, [pc, #24]	; (800257c <_sbrk_r+0x1c>)
 8002564:	2300      	movs	r3, #0
 8002566:	4604      	mov	r4, r0
 8002568:	4608      	mov	r0, r1
 800256a:	602b      	str	r3, [r5, #0]
 800256c:	f7fe ffd2 	bl	8001514 <_sbrk>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d102      	bne.n	800257a <_sbrk_r+0x1a>
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	b103      	cbz	r3, 800257a <_sbrk_r+0x1a>
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	bd38      	pop	{r3, r4, r5, pc}
 800257c:	20000500 	.word	0x20000500

08002580 <memcpy>:
 8002580:	440a      	add	r2, r1
 8002582:	4291      	cmp	r1, r2
 8002584:	f100 33ff 	add.w	r3, r0, #4294967295
 8002588:	d100      	bne.n	800258c <memcpy+0xc>
 800258a:	4770      	bx	lr
 800258c:	b510      	push	{r4, lr}
 800258e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002596:	4291      	cmp	r1, r2
 8002598:	d1f9      	bne.n	800258e <memcpy+0xe>
 800259a:	bd10      	pop	{r4, pc}

0800259c <_realloc_r>:
 800259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a0:	4680      	mov	r8, r0
 80025a2:	4614      	mov	r4, r2
 80025a4:	460e      	mov	r6, r1
 80025a6:	b921      	cbnz	r1, 80025b2 <_realloc_r+0x16>
 80025a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025ac:	4611      	mov	r1, r2
 80025ae:	f7ff bc49 	b.w	8001e44 <_malloc_r>
 80025b2:	b92a      	cbnz	r2, 80025c0 <_realloc_r+0x24>
 80025b4:	f7ff fbda 	bl	8001d6c <_free_r>
 80025b8:	4625      	mov	r5, r4
 80025ba:	4628      	mov	r0, r5
 80025bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025c0:	f000 f81b 	bl	80025fa <_malloc_usable_size_r>
 80025c4:	4284      	cmp	r4, r0
 80025c6:	4607      	mov	r7, r0
 80025c8:	d802      	bhi.n	80025d0 <_realloc_r+0x34>
 80025ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80025ce:	d812      	bhi.n	80025f6 <_realloc_r+0x5a>
 80025d0:	4621      	mov	r1, r4
 80025d2:	4640      	mov	r0, r8
 80025d4:	f7ff fc36 	bl	8001e44 <_malloc_r>
 80025d8:	4605      	mov	r5, r0
 80025da:	2800      	cmp	r0, #0
 80025dc:	d0ed      	beq.n	80025ba <_realloc_r+0x1e>
 80025de:	42bc      	cmp	r4, r7
 80025e0:	4622      	mov	r2, r4
 80025e2:	4631      	mov	r1, r6
 80025e4:	bf28      	it	cs
 80025e6:	463a      	movcs	r2, r7
 80025e8:	f7ff ffca 	bl	8002580 <memcpy>
 80025ec:	4631      	mov	r1, r6
 80025ee:	4640      	mov	r0, r8
 80025f0:	f7ff fbbc 	bl	8001d6c <_free_r>
 80025f4:	e7e1      	b.n	80025ba <_realloc_r+0x1e>
 80025f6:	4635      	mov	r5, r6
 80025f8:	e7df      	b.n	80025ba <_realloc_r+0x1e>

080025fa <_malloc_usable_size_r>:
 80025fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025fe:	1f18      	subs	r0, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	bfbc      	itt	lt
 8002604:	580b      	ldrlt	r3, [r1, r0]
 8002606:	18c0      	addlt	r0, r0, r3
 8002608:	4770      	bx	lr
 800260a:	0000      	movs	r0, r0
 800260c:	0000      	movs	r0, r0
	...

08002610 <log10>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	ed2d 8b02 	vpush	{d8}
 8002616:	ec55 4b10 	vmov	r4, r5, d0
 800261a:	f000 f905 	bl	8002828 <__ieee754_log10>
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	eeb0 8a40 	vmov.f32	s16, s0
 800262a:	eef0 8a60 	vmov.f32	s17, s1
 800262e:	f7fe fa85 	bl	8000b3c <__aeabi_dcmpun>
 8002632:	b998      	cbnz	r0, 800265c <log10+0x4c>
 8002634:	2200      	movs	r2, #0
 8002636:	2300      	movs	r3, #0
 8002638:	4620      	mov	r0, r4
 800263a:	4629      	mov	r1, r5
 800263c:	f7fe fa60 	bl	8000b00 <__aeabi_dcmple>
 8002640:	b160      	cbz	r0, 800265c <log10+0x4c>
 8002642:	2200      	movs	r2, #0
 8002644:	2300      	movs	r3, #0
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f7fe fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800264e:	b160      	cbz	r0, 800266a <log10+0x5a>
 8002650:	f7ff fb60 	bl	8001d14 <__errno>
 8002654:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8002680 <log10+0x70>
 8002658:	2322      	movs	r3, #34	; 0x22
 800265a:	6003      	str	r3, [r0, #0]
 800265c:	eeb0 0a48 	vmov.f32	s0, s16
 8002660:	eef0 0a68 	vmov.f32	s1, s17
 8002664:	ecbd 8b02 	vpop	{d8}
 8002668:	bd38      	pop	{r3, r4, r5, pc}
 800266a:	f7ff fb53 	bl	8001d14 <__errno>
 800266e:	ecbd 8b02 	vpop	{d8}
 8002672:	2321      	movs	r3, #33	; 0x21
 8002674:	6003      	str	r3, [r0, #0]
 8002676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800267a:	4803      	ldr	r0, [pc, #12]	; (8002688 <log10+0x78>)
 800267c:	f000 b884 	b.w	8002788 <nan>
 8002680:	00000000 	.word	0x00000000
 8002684:	fff00000 	.word	0xfff00000
 8002688:	08003b1c 	.word	0x08003b1c

0800268c <pow>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	ed2d 8b02 	vpush	{d8}
 8002692:	eeb0 8a40 	vmov.f32	s16, s0
 8002696:	eef0 8a60 	vmov.f32	s17, s1
 800269a:	ec55 4b11 	vmov	r4, r5, d1
 800269e:	f000 f94f 	bl	8002940 <__ieee754_pow>
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	4620      	mov	r0, r4
 80026a8:	4629      	mov	r1, r5
 80026aa:	ec57 6b10 	vmov	r6, r7, d0
 80026ae:	f7fe fa45 	bl	8000b3c <__aeabi_dcmpun>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d13b      	bne.n	800272e <pow+0xa2>
 80026b6:	ec51 0b18 	vmov	r0, r1, d8
 80026ba:	2200      	movs	r2, #0
 80026bc:	2300      	movs	r3, #0
 80026be:	f7fe fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80026c2:	b1b8      	cbz	r0, 80026f4 <pow+0x68>
 80026c4:	2200      	movs	r2, #0
 80026c6:	2300      	movs	r3, #0
 80026c8:	4620      	mov	r0, r4
 80026ca:	4629      	mov	r1, r5
 80026cc:	f7fe fa04 	bl	8000ad8 <__aeabi_dcmpeq>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d146      	bne.n	8002762 <pow+0xd6>
 80026d4:	ec45 4b10 	vmov	d0, r4, r5
 80026d8:	f000 f848 	bl	800276c <finite>
 80026dc:	b338      	cbz	r0, 800272e <pow+0xa2>
 80026de:	2200      	movs	r2, #0
 80026e0:	2300      	movs	r3, #0
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fe fa01 	bl	8000aec <__aeabi_dcmplt>
 80026ea:	b300      	cbz	r0, 800272e <pow+0xa2>
 80026ec:	f7ff fb12 	bl	8001d14 <__errno>
 80026f0:	2322      	movs	r3, #34	; 0x22
 80026f2:	e01b      	b.n	800272c <pow+0xa0>
 80026f4:	ec47 6b10 	vmov	d0, r6, r7
 80026f8:	f000 f838 	bl	800276c <finite>
 80026fc:	b9e0      	cbnz	r0, 8002738 <pow+0xac>
 80026fe:	eeb0 0a48 	vmov.f32	s0, s16
 8002702:	eef0 0a68 	vmov.f32	s1, s17
 8002706:	f000 f831 	bl	800276c <finite>
 800270a:	b1a8      	cbz	r0, 8002738 <pow+0xac>
 800270c:	ec45 4b10 	vmov	d0, r4, r5
 8002710:	f000 f82c 	bl	800276c <finite>
 8002714:	b180      	cbz	r0, 8002738 <pow+0xac>
 8002716:	4632      	mov	r2, r6
 8002718:	463b      	mov	r3, r7
 800271a:	4630      	mov	r0, r6
 800271c:	4639      	mov	r1, r7
 800271e:	f7fe fa0d 	bl	8000b3c <__aeabi_dcmpun>
 8002722:	2800      	cmp	r0, #0
 8002724:	d0e2      	beq.n	80026ec <pow+0x60>
 8002726:	f7ff faf5 	bl	8001d14 <__errno>
 800272a:	2321      	movs	r3, #33	; 0x21
 800272c:	6003      	str	r3, [r0, #0]
 800272e:	ecbd 8b02 	vpop	{d8}
 8002732:	ec47 6b10 	vmov	d0, r6, r7
 8002736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002738:	2200      	movs	r2, #0
 800273a:	2300      	movs	r3, #0
 800273c:	4630      	mov	r0, r6
 800273e:	4639      	mov	r1, r7
 8002740:	f7fe f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8002744:	2800      	cmp	r0, #0
 8002746:	d0f2      	beq.n	800272e <pow+0xa2>
 8002748:	eeb0 0a48 	vmov.f32	s0, s16
 800274c:	eef0 0a68 	vmov.f32	s1, s17
 8002750:	f000 f80c 	bl	800276c <finite>
 8002754:	2800      	cmp	r0, #0
 8002756:	d0ea      	beq.n	800272e <pow+0xa2>
 8002758:	ec45 4b10 	vmov	d0, r4, r5
 800275c:	f000 f806 	bl	800276c <finite>
 8002760:	e7c3      	b.n	80026ea <pow+0x5e>
 8002762:	4f01      	ldr	r7, [pc, #4]	; (8002768 <pow+0xdc>)
 8002764:	2600      	movs	r6, #0
 8002766:	e7e2      	b.n	800272e <pow+0xa2>
 8002768:	3ff00000 	.word	0x3ff00000

0800276c <finite>:
 800276c:	b082      	sub	sp, #8
 800276e:	ed8d 0b00 	vstr	d0, [sp]
 8002772:	9801      	ldr	r0, [sp, #4]
 8002774:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002778:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800277c:	0fc0      	lsrs	r0, r0, #31
 800277e:	b002      	add	sp, #8
 8002780:	4770      	bx	lr
 8002782:	0000      	movs	r0, r0
 8002784:	0000      	movs	r0, r0
	...

08002788 <nan>:
 8002788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8002790 <nan+0x8>
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	00000000 	.word	0x00000000
 8002794:	7ff80000 	.word	0x7ff80000

08002798 <round>:
 8002798:	ec53 2b10 	vmov	r2, r3, d0
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80027a2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80027a6:	2813      	cmp	r0, #19
 80027a8:	ee10 5a10 	vmov	r5, s0
 80027ac:	4619      	mov	r1, r3
 80027ae:	dc18      	bgt.n	80027e2 <round+0x4a>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	da09      	bge.n	80027c8 <round+0x30>
 80027b4:	3001      	adds	r0, #1
 80027b6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80027ba:	d103      	bne.n	80027c4 <round+0x2c>
 80027bc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80027c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80027c4:	2300      	movs	r3, #0
 80027c6:	e02a      	b.n	800281e <round+0x86>
 80027c8:	4c16      	ldr	r4, [pc, #88]	; (8002824 <round+0x8c>)
 80027ca:	4104      	asrs	r4, r0
 80027cc:	ea03 0604 	and.w	r6, r3, r4
 80027d0:	4316      	orrs	r6, r2
 80027d2:	d011      	beq.n	80027f8 <round+0x60>
 80027d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027d8:	4103      	asrs	r3, r0
 80027da:	440b      	add	r3, r1
 80027dc:	ea23 0104 	bic.w	r1, r3, r4
 80027e0:	e7f0      	b.n	80027c4 <round+0x2c>
 80027e2:	2833      	cmp	r0, #51	; 0x33
 80027e4:	dd0b      	ble.n	80027fe <round+0x66>
 80027e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80027ea:	d105      	bne.n	80027f8 <round+0x60>
 80027ec:	ee10 0a10 	vmov	r0, s0
 80027f0:	f7fd fd54 	bl	800029c <__adddf3>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	ec43 2b10 	vmov	d0, r2, r3
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
 80027fe:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8002802:	f04f 34ff 	mov.w	r4, #4294967295
 8002806:	40f4      	lsrs	r4, r6
 8002808:	4214      	tst	r4, r2
 800280a:	d0f5      	beq.n	80027f8 <round+0x60>
 800280c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8002810:	2301      	movs	r3, #1
 8002812:	4083      	lsls	r3, r0
 8002814:	195b      	adds	r3, r3, r5
 8002816:	bf28      	it	cs
 8002818:	3101      	addcs	r1, #1
 800281a:	ea23 0304 	bic.w	r3, r3, r4
 800281e:	461a      	mov	r2, r3
 8002820:	460b      	mov	r3, r1
 8002822:	e7e9      	b.n	80027f8 <round+0x60>
 8002824:	000fffff 	.word	0x000fffff

08002828 <__ieee754_log10>:
 8002828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800282c:	ec55 4b10 	vmov	r4, r5, d0
 8002830:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8002834:	462b      	mov	r3, r5
 8002836:	da2f      	bge.n	8002898 <__ieee754_log10+0x70>
 8002838:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800283c:	4322      	orrs	r2, r4
 800283e:	d109      	bne.n	8002854 <__ieee754_log10+0x2c>
 8002840:	493b      	ldr	r1, [pc, #236]	; (8002930 <__ieee754_log10+0x108>)
 8002842:	2200      	movs	r2, #0
 8002844:	2300      	movs	r3, #0
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f808 	bl	800085c <__aeabi_ddiv>
 800284c:	ec41 0b10 	vmov	d0, r0, r1
 8002850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002854:	2d00      	cmp	r5, #0
 8002856:	da09      	bge.n	800286c <__ieee754_log10+0x44>
 8002858:	ee10 2a10 	vmov	r2, s0
 800285c:	ee10 0a10 	vmov	r0, s0
 8002860:	4629      	mov	r1, r5
 8002862:	f7fd fd19 	bl	8000298 <__aeabi_dsub>
 8002866:	2200      	movs	r2, #0
 8002868:	2300      	movs	r3, #0
 800286a:	e7ed      	b.n	8002848 <__ieee754_log10+0x20>
 800286c:	4b31      	ldr	r3, [pc, #196]	; (8002934 <__ieee754_log10+0x10c>)
 800286e:	2200      	movs	r2, #0
 8002870:	4629      	mov	r1, r5
 8002872:	ee10 0a10 	vmov	r0, s0
 8002876:	f7fd fec7 	bl	8000608 <__aeabi_dmul>
 800287a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800287e:	4604      	mov	r4, r0
 8002880:	460d      	mov	r5, r1
 8002882:	460b      	mov	r3, r1
 8002884:	492c      	ldr	r1, [pc, #176]	; (8002938 <__ieee754_log10+0x110>)
 8002886:	428b      	cmp	r3, r1
 8002888:	dd08      	ble.n	800289c <__ieee754_log10+0x74>
 800288a:	4622      	mov	r2, r4
 800288c:	462b      	mov	r3, r5
 800288e:	4620      	mov	r0, r4
 8002890:	4629      	mov	r1, r5
 8002892:	f7fd fd03 	bl	800029c <__adddf3>
 8002896:	e7d9      	b.n	800284c <__ieee754_log10+0x24>
 8002898:	2200      	movs	r2, #0
 800289a:	e7f3      	b.n	8002884 <__ieee754_log10+0x5c>
 800289c:	1518      	asrs	r0, r3, #20
 800289e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80028a2:	4410      	add	r0, r2
 80028a4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80028a8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80028ac:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80028b0:	f7fd fe40 	bl	8000534 <__aeabi_i2d>
 80028b4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80028b8:	3303      	adds	r3, #3
 80028ba:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80028be:	ec45 4b10 	vmov	d0, r4, r5
 80028c2:	4606      	mov	r6, r0
 80028c4:	460f      	mov	r7, r1
 80028c6:	f000 fef7 	bl	80036b8 <__ieee754_log>
 80028ca:	a313      	add	r3, pc, #76	; (adr r3, 8002918 <__ieee754_log10+0xf0>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	4630      	mov	r0, r6
 80028d2:	4639      	mov	r1, r7
 80028d4:	ec59 8b10 	vmov	r8, r9, d0
 80028d8:	f7fd fe96 	bl	8000608 <__aeabi_dmul>
 80028dc:	a310      	add	r3, pc, #64	; (adr r3, 8002920 <__ieee754_log10+0xf8>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	4604      	mov	r4, r0
 80028e4:	460d      	mov	r5, r1
 80028e6:	4640      	mov	r0, r8
 80028e8:	4649      	mov	r1, r9
 80028ea:	f7fd fe8d 	bl	8000608 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4620      	mov	r0, r4
 80028f4:	4629      	mov	r1, r5
 80028f6:	f7fd fcd1 	bl	800029c <__adddf3>
 80028fa:	a30b      	add	r3, pc, #44	; (adr r3, 8002928 <__ieee754_log10+0x100>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	4604      	mov	r4, r0
 8002902:	460d      	mov	r5, r1
 8002904:	4630      	mov	r0, r6
 8002906:	4639      	mov	r1, r7
 8002908:	f7fd fe7e 	bl	8000608 <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	e7bd      	b.n	8002892 <__ieee754_log10+0x6a>
 8002916:	bf00      	nop
 8002918:	11f12b36 	.word	0x11f12b36
 800291c:	3d59fef3 	.word	0x3d59fef3
 8002920:	1526e50e 	.word	0x1526e50e
 8002924:	3fdbcb7b 	.word	0x3fdbcb7b
 8002928:	509f6000 	.word	0x509f6000
 800292c:	3fd34413 	.word	0x3fd34413
 8002930:	c3500000 	.word	0xc3500000
 8002934:	43500000 	.word	0x43500000
 8002938:	7fefffff 	.word	0x7fefffff
 800293c:	00000000 	.word	0x00000000

08002940 <__ieee754_pow>:
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	ed2d 8b06 	vpush	{d8-d10}
 8002948:	b089      	sub	sp, #36	; 0x24
 800294a:	ed8d 1b00 	vstr	d1, [sp]
 800294e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8002952:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002956:	ea58 0102 	orrs.w	r1, r8, r2
 800295a:	ec57 6b10 	vmov	r6, r7, d0
 800295e:	d115      	bne.n	800298c <__ieee754_pow+0x4c>
 8002960:	19b3      	adds	r3, r6, r6
 8002962:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8002966:	4152      	adcs	r2, r2
 8002968:	4299      	cmp	r1, r3
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <__ieee754_pow+0x250>)
 800296c:	4193      	sbcs	r3, r2
 800296e:	f080 84d1 	bcs.w	8003314 <__ieee754_pow+0x9d4>
 8002972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002976:	4630      	mov	r0, r6
 8002978:	4639      	mov	r1, r7
 800297a:	f7fd fc8f 	bl	800029c <__adddf3>
 800297e:	ec41 0b10 	vmov	d0, r0, r1
 8002982:	b009      	add	sp, #36	; 0x24
 8002984:	ecbd 8b06 	vpop	{d8-d10}
 8002988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298c:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <__ieee754_pow+0x254>)
 800298e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002992:	429c      	cmp	r4, r3
 8002994:	ee10 aa10 	vmov	sl, s0
 8002998:	463d      	mov	r5, r7
 800299a:	dc06      	bgt.n	80029aa <__ieee754_pow+0x6a>
 800299c:	d101      	bne.n	80029a2 <__ieee754_pow+0x62>
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d1e7      	bne.n	8002972 <__ieee754_pow+0x32>
 80029a2:	4598      	cmp	r8, r3
 80029a4:	dc01      	bgt.n	80029aa <__ieee754_pow+0x6a>
 80029a6:	d10f      	bne.n	80029c8 <__ieee754_pow+0x88>
 80029a8:	b172      	cbz	r2, 80029c8 <__ieee754_pow+0x88>
 80029aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80029ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80029b2:	ea55 050a 	orrs.w	r5, r5, sl
 80029b6:	d1dc      	bne.n	8002972 <__ieee754_pow+0x32>
 80029b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80029bc:	18db      	adds	r3, r3, r3
 80029be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80029c2:	4152      	adcs	r2, r2
 80029c4:	429d      	cmp	r5, r3
 80029c6:	e7d0      	b.n	800296a <__ieee754_pow+0x2a>
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	da3b      	bge.n	8002a44 <__ieee754_pow+0x104>
 80029cc:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <__ieee754_pow+0x258>)
 80029ce:	4598      	cmp	r8, r3
 80029d0:	dc51      	bgt.n	8002a76 <__ieee754_pow+0x136>
 80029d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80029d6:	4598      	cmp	r8, r3
 80029d8:	f340 84ab 	ble.w	8003332 <__ieee754_pow+0x9f2>
 80029dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80029e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80029e4:	2b14      	cmp	r3, #20
 80029e6:	dd0f      	ble.n	8002a08 <__ieee754_pow+0xc8>
 80029e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80029ec:	fa22 f103 	lsr.w	r1, r2, r3
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f040 849c 	bne.w	8003332 <__ieee754_pow+0x9f2>
 80029fa:	f001 0101 	and.w	r1, r1, #1
 80029fe:	f1c1 0302 	rsb	r3, r1, #2
 8002a02:	9304      	str	r3, [sp, #16]
 8002a04:	b182      	cbz	r2, 8002a28 <__ieee754_pow+0xe8>
 8002a06:	e05f      	b.n	8002ac8 <__ieee754_pow+0x188>
 8002a08:	2a00      	cmp	r2, #0
 8002a0a:	d15b      	bne.n	8002ac4 <__ieee754_pow+0x184>
 8002a0c:	f1c3 0314 	rsb	r3, r3, #20
 8002a10:	fa48 f103 	asr.w	r1, r8, r3
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	4543      	cmp	r3, r8
 8002a1a:	f040 8487 	bne.w	800332c <__ieee754_pow+0x9ec>
 8002a1e:	f001 0101 	and.w	r1, r1, #1
 8002a22:	f1c1 0302 	rsb	r3, r1, #2
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <__ieee754_pow+0x25c>)
 8002a2a:	4598      	cmp	r8, r3
 8002a2c:	d132      	bne.n	8002a94 <__ieee754_pow+0x154>
 8002a2e:	f1b9 0f00 	cmp.w	r9, #0
 8002a32:	f280 8477 	bge.w	8003324 <__ieee754_pow+0x9e4>
 8002a36:	4959      	ldr	r1, [pc, #356]	; (8002b9c <__ieee754_pow+0x25c>)
 8002a38:	4632      	mov	r2, r6
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ff0d 	bl	800085c <__aeabi_ddiv>
 8002a42:	e79c      	b.n	800297e <__ieee754_pow+0x3e>
 8002a44:	2300      	movs	r3, #0
 8002a46:	9304      	str	r3, [sp, #16]
 8002a48:	2a00      	cmp	r2, #0
 8002a4a:	d13d      	bne.n	8002ac8 <__ieee754_pow+0x188>
 8002a4c:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <__ieee754_pow+0x254>)
 8002a4e:	4598      	cmp	r8, r3
 8002a50:	d1ea      	bne.n	8002a28 <__ieee754_pow+0xe8>
 8002a52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002a56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002a5a:	ea53 030a 	orrs.w	r3, r3, sl
 8002a5e:	f000 8459 	beq.w	8003314 <__ieee754_pow+0x9d4>
 8002a62:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <__ieee754_pow+0x260>)
 8002a64:	429c      	cmp	r4, r3
 8002a66:	dd08      	ble.n	8002a7a <__ieee754_pow+0x13a>
 8002a68:	f1b9 0f00 	cmp.w	r9, #0
 8002a6c:	f2c0 8456 	blt.w	800331c <__ieee754_pow+0x9dc>
 8002a70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a74:	e783      	b.n	800297e <__ieee754_pow+0x3e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e7e5      	b.n	8002a46 <__ieee754_pow+0x106>
 8002a7a:	f1b9 0f00 	cmp.w	r9, #0
 8002a7e:	f04f 0000 	mov.w	r0, #0
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	f6bf af7a 	bge.w	800297e <__ieee754_pow+0x3e>
 8002a8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002a8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002a92:	e774      	b.n	800297e <__ieee754_pow+0x3e>
 8002a94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002a98:	d106      	bne.n	8002aa8 <__ieee754_pow+0x168>
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	4639      	mov	r1, r7
 8002aa2:	f7fd fdb1 	bl	8000608 <__aeabi_dmul>
 8002aa6:	e76a      	b.n	800297e <__ieee754_pow+0x3e>
 8002aa8:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <__ieee754_pow+0x264>)
 8002aaa:	4599      	cmp	r9, r3
 8002aac:	d10c      	bne.n	8002ac8 <__ieee754_pow+0x188>
 8002aae:	2d00      	cmp	r5, #0
 8002ab0:	db0a      	blt.n	8002ac8 <__ieee754_pow+0x188>
 8002ab2:	ec47 6b10 	vmov	d0, r6, r7
 8002ab6:	b009      	add	sp, #36	; 0x24
 8002ab8:	ecbd 8b06 	vpop	{d8-d10}
 8002abc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	f000 bd20 	b.w	8003504 <__ieee754_sqrt>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9304      	str	r3, [sp, #16]
 8002ac8:	ec47 6b10 	vmov	d0, r6, r7
 8002acc:	f000 fc62 	bl	8003394 <fabs>
 8002ad0:	ec51 0b10 	vmov	r0, r1, d0
 8002ad4:	f1ba 0f00 	cmp.w	sl, #0
 8002ad8:	d129      	bne.n	8002b2e <__ieee754_pow+0x1ee>
 8002ada:	b124      	cbz	r4, 8002ae6 <__ieee754_pow+0x1a6>
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <__ieee754_pow+0x25c>)
 8002ade:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d123      	bne.n	8002b2e <__ieee754_pow+0x1ee>
 8002ae6:	f1b9 0f00 	cmp.w	r9, #0
 8002aea:	da05      	bge.n	8002af8 <__ieee754_pow+0x1b8>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	2000      	movs	r0, #0
 8002af2:	492a      	ldr	r1, [pc, #168]	; (8002b9c <__ieee754_pow+0x25c>)
 8002af4:	f7fd feb2 	bl	800085c <__aeabi_ddiv>
 8002af8:	2d00      	cmp	r5, #0
 8002afa:	f6bf af40 	bge.w	800297e <__ieee754_pow+0x3e>
 8002afe:	9b04      	ldr	r3, [sp, #16]
 8002b00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002b04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002b08:	431c      	orrs	r4, r3
 8002b0a:	d108      	bne.n	8002b1e <__ieee754_pow+0x1de>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fd fbc0 	bl	8000298 <__aeabi_dsub>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	e78f      	b.n	8002a3e <__ieee754_pow+0xfe>
 8002b1e:	9b04      	ldr	r3, [sp, #16]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f47f af2c 	bne.w	800297e <__ieee754_pow+0x3e>
 8002b26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	e727      	b.n	800297e <__ieee754_pow+0x3e>
 8002b2e:	0feb      	lsrs	r3, r5, #31
 8002b30:	3b01      	subs	r3, #1
 8002b32:	9306      	str	r3, [sp, #24]
 8002b34:	9a06      	ldr	r2, [sp, #24]
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	d102      	bne.n	8002b42 <__ieee754_pow+0x202>
 8002b3c:	4632      	mov	r2, r6
 8002b3e:	463b      	mov	r3, r7
 8002b40:	e7e6      	b.n	8002b10 <__ieee754_pow+0x1d0>
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <__ieee754_pow+0x268>)
 8002b44:	4598      	cmp	r8, r3
 8002b46:	f340 80fb 	ble.w	8002d40 <__ieee754_pow+0x400>
 8002b4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002b4e:	4598      	cmp	r8, r3
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <__ieee754_pow+0x260>)
 8002b52:	dd0c      	ble.n	8002b6e <__ieee754_pow+0x22e>
 8002b54:	429c      	cmp	r4, r3
 8002b56:	dc0f      	bgt.n	8002b78 <__ieee754_pow+0x238>
 8002b58:	f1b9 0f00 	cmp.w	r9, #0
 8002b5c:	da0f      	bge.n	8002b7e <__ieee754_pow+0x23e>
 8002b5e:	2000      	movs	r0, #0
 8002b60:	b009      	add	sp, #36	; 0x24
 8002b62:	ecbd 8b06 	vpop	{d8-d10}
 8002b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	f000 bcc2 	b.w	80034f2 <__math_oflow>
 8002b6e:	429c      	cmp	r4, r3
 8002b70:	dbf2      	blt.n	8002b58 <__ieee754_pow+0x218>
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <__ieee754_pow+0x25c>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	dd19      	ble.n	8002bac <__ieee754_pow+0x26c>
 8002b78:	f1b9 0f00 	cmp.w	r9, #0
 8002b7c:	dcef      	bgt.n	8002b5e <__ieee754_pow+0x21e>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	b009      	add	sp, #36	; 0x24
 8002b82:	ecbd 8b06 	vpop	{d8-d10}
 8002b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8a:	f000 bca9 	b.w	80034e0 <__math_uflow>
 8002b8e:	bf00      	nop
 8002b90:	fff00000 	.word	0xfff00000
 8002b94:	7ff00000 	.word	0x7ff00000
 8002b98:	433fffff 	.word	0x433fffff
 8002b9c:	3ff00000 	.word	0x3ff00000
 8002ba0:	3fefffff 	.word	0x3fefffff
 8002ba4:	3fe00000 	.word	0x3fe00000
 8002ba8:	41e00000 	.word	0x41e00000
 8002bac:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <__ieee754_pow+0x3f0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f7fd fb72 	bl	8000298 <__aeabi_dsub>
 8002bb4:	a354      	add	r3, pc, #336	; (adr r3, 8002d08 <__ieee754_pow+0x3c8>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	4604      	mov	r4, r0
 8002bbc:	460d      	mov	r5, r1
 8002bbe:	f7fd fd23 	bl	8000608 <__aeabi_dmul>
 8002bc2:	a353      	add	r3, pc, #332	; (adr r3, 8002d10 <__ieee754_pow+0x3d0>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	4606      	mov	r6, r0
 8002bca:	460f      	mov	r7, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fd1a 	bl	8000608 <__aeabi_dmul>
 8002bd4:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <__ieee754_pow+0x3f4>)
 8002bd6:	4682      	mov	sl, r0
 8002bd8:	468b      	mov	fp, r1
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd fd12 	bl	8000608 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	a14b      	add	r1, pc, #300	; (adr r1, 8002d18 <__ieee754_pow+0x3d8>)
 8002bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bee:	f7fd fb53 	bl	8000298 <__aeabi_dsub>
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	f7fd fd07 	bl	8000608 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	2000      	movs	r0, #0
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <__ieee754_pow+0x3f8>)
 8002c02:	f7fd fb49 	bl	8000298 <__aeabi_dsub>
 8002c06:	4622      	mov	r2, r4
 8002c08:	4680      	mov	r8, r0
 8002c0a:	4689      	mov	r9, r1
 8002c0c:	462b      	mov	r3, r5
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	f7fd fcf9 	bl	8000608 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	f7fd fcf3 	bl	8000608 <__aeabi_dmul>
 8002c22:	a33f      	add	r3, pc, #252	; (adr r3, 8002d20 <__ieee754_pow+0x3e0>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd fcee 	bl	8000608 <__aeabi_dmul>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4650      	mov	r0, sl
 8002c32:	4659      	mov	r1, fp
 8002c34:	f7fd fb30 	bl	8000298 <__aeabi_dsub>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4680      	mov	r8, r0
 8002c3e:	4689      	mov	r9, r1
 8002c40:	4630      	mov	r0, r6
 8002c42:	4639      	mov	r1, r7
 8002c44:	f7fd fb2a 	bl	800029c <__adddf3>
 8002c48:	2000      	movs	r0, #0
 8002c4a:	4632      	mov	r2, r6
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	4604      	mov	r4, r0
 8002c50:	460d      	mov	r5, r1
 8002c52:	f7fd fb21 	bl	8000298 <__aeabi_dsub>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4640      	mov	r0, r8
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	f7fd fb1b 	bl	8000298 <__aeabi_dsub>
 8002c62:	9b04      	ldr	r3, [sp, #16]
 8002c64:	9a06      	ldr	r2, [sp, #24]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4682      	mov	sl, r0
 8002c6c:	468b      	mov	fp, r1
 8002c6e:	f040 81e7 	bne.w	8003040 <__ieee754_pow+0x700>
 8002c72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8002d28 <__ieee754_pow+0x3e8>
 8002c76:	eeb0 8a47 	vmov.f32	s16, s14
 8002c7a:	eef0 8a67 	vmov.f32	s17, s15
 8002c7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002c82:	2600      	movs	r6, #0
 8002c84:	4632      	mov	r2, r6
 8002c86:	463b      	mov	r3, r7
 8002c88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c8c:	f7fd fb04 	bl	8000298 <__aeabi_dsub>
 8002c90:	4622      	mov	r2, r4
 8002c92:	462b      	mov	r3, r5
 8002c94:	f7fd fcb8 	bl	8000608 <__aeabi_dmul>
 8002c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c9c:	4680      	mov	r8, r0
 8002c9e:	4689      	mov	r9, r1
 8002ca0:	4650      	mov	r0, sl
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	f7fd fcb0 	bl	8000608 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4640      	mov	r0, r8
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f7fd faf4 	bl	800029c <__adddf3>
 8002cb4:	4632      	mov	r2, r6
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4680      	mov	r8, r0
 8002cba:	4689      	mov	r9, r1
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	f7fd fca2 	bl	8000608 <__aeabi_dmul>
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4649      	mov	r1, r9
 8002cce:	4640      	mov	r0, r8
 8002cd0:	f7fd fae4 	bl	800029c <__adddf3>
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <__ieee754_pow+0x3fc>)
 8002cd6:	4299      	cmp	r1, r3
 8002cd8:	ec45 4b19 	vmov	d9, r4, r5
 8002cdc:	4606      	mov	r6, r0
 8002cde:	460f      	mov	r7, r1
 8002ce0:	468b      	mov	fp, r1
 8002ce2:	f340 82f0 	ble.w	80032c6 <__ieee754_pow+0x986>
 8002ce6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002cea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002cee:	4303      	orrs	r3, r0
 8002cf0:	f000 81e4 	beq.w	80030bc <__ieee754_pow+0x77c>
 8002cf4:	ec51 0b18 	vmov	r0, r1, d8
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f7fd fef6 	bl	8000aec <__aeabi_dcmplt>
 8002d00:	3800      	subs	r0, #0
 8002d02:	bf18      	it	ne
 8002d04:	2001      	movne	r0, #1
 8002d06:	e72b      	b.n	8002b60 <__ieee754_pow+0x220>
 8002d08:	60000000 	.word	0x60000000
 8002d0c:	3ff71547 	.word	0x3ff71547
 8002d10:	f85ddf44 	.word	0xf85ddf44
 8002d14:	3e54ae0b 	.word	0x3e54ae0b
 8002d18:	55555555 	.word	0x55555555
 8002d1c:	3fd55555 	.word	0x3fd55555
 8002d20:	652b82fe 	.word	0x652b82fe
 8002d24:	3ff71547 	.word	0x3ff71547
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	bff00000 	.word	0xbff00000
 8002d30:	3ff00000 	.word	0x3ff00000
 8002d34:	3fd00000 	.word	0x3fd00000
 8002d38:	3fe00000 	.word	0x3fe00000
 8002d3c:	408fffff 	.word	0x408fffff
 8002d40:	4bd5      	ldr	r3, [pc, #852]	; (8003098 <__ieee754_pow+0x758>)
 8002d42:	402b      	ands	r3, r5
 8002d44:	2200      	movs	r2, #0
 8002d46:	b92b      	cbnz	r3, 8002d54 <__ieee754_pow+0x414>
 8002d48:	4bd4      	ldr	r3, [pc, #848]	; (800309c <__ieee754_pow+0x75c>)
 8002d4a:	f7fd fc5d 	bl	8000608 <__aeabi_dmul>
 8002d4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002d52:	460c      	mov	r4, r1
 8002d54:	1523      	asrs	r3, r4, #20
 8002d56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d5a:	4413      	add	r3, r2
 8002d5c:	9305      	str	r3, [sp, #20]
 8002d5e:	4bd0      	ldr	r3, [pc, #832]	; (80030a0 <__ieee754_pow+0x760>)
 8002d60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002d64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002d68:	429c      	cmp	r4, r3
 8002d6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002d6e:	dd08      	ble.n	8002d82 <__ieee754_pow+0x442>
 8002d70:	4bcc      	ldr	r3, [pc, #816]	; (80030a4 <__ieee754_pow+0x764>)
 8002d72:	429c      	cmp	r4, r3
 8002d74:	f340 8162 	ble.w	800303c <__ieee754_pow+0x6fc>
 8002d78:	9b05      	ldr	r3, [sp, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	9305      	str	r3, [sp, #20]
 8002d7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002d82:	2400      	movs	r4, #0
 8002d84:	00e3      	lsls	r3, r4, #3
 8002d86:	9307      	str	r3, [sp, #28]
 8002d88:	4bc7      	ldr	r3, [pc, #796]	; (80030a8 <__ieee754_pow+0x768>)
 8002d8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002d8e:	ed93 7b00 	vldr	d7, [r3]
 8002d92:	4629      	mov	r1, r5
 8002d94:	ec53 2b17 	vmov	r2, r3, d7
 8002d98:	eeb0 9a47 	vmov.f32	s18, s14
 8002d9c:	eef0 9a67 	vmov.f32	s19, s15
 8002da0:	4682      	mov	sl, r0
 8002da2:	f7fd fa79 	bl	8000298 <__aeabi_dsub>
 8002da6:	4652      	mov	r2, sl
 8002da8:	4606      	mov	r6, r0
 8002daa:	460f      	mov	r7, r1
 8002dac:	462b      	mov	r3, r5
 8002dae:	ec51 0b19 	vmov	r0, r1, d9
 8002db2:	f7fd fa73 	bl	800029c <__adddf3>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	2000      	movs	r0, #0
 8002dbc:	49bb      	ldr	r1, [pc, #748]	; (80030ac <__ieee754_pow+0x76c>)
 8002dbe:	f7fd fd4d 	bl	800085c <__aeabi_ddiv>
 8002dc2:	ec41 0b1a 	vmov	d10, r0, r1
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4630      	mov	r0, r6
 8002dcc:	4639      	mov	r1, r7
 8002dce:	f7fd fc1b 	bl	8000608 <__aeabi_dmul>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dd8:	9302      	str	r3, [sp, #8]
 8002dda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002dde:	46ab      	mov	fp, r5
 8002de0:	106d      	asrs	r5, r5, #1
 8002de2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002de6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002dea:	ec41 0b18 	vmov	d8, r0, r1
 8002dee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002df2:	2200      	movs	r2, #0
 8002df4:	4640      	mov	r0, r8
 8002df6:	4649      	mov	r1, r9
 8002df8:	4614      	mov	r4, r2
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	f7fd fc04 	bl	8000608 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4630      	mov	r0, r6
 8002e06:	4639      	mov	r1, r7
 8002e08:	f7fd fa46 	bl	8000298 <__aeabi_dsub>
 8002e0c:	ec53 2b19 	vmov	r2, r3, d9
 8002e10:	4606      	mov	r6, r0
 8002e12:	460f      	mov	r7, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd fa3e 	bl	8000298 <__aeabi_dsub>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4650      	mov	r0, sl
 8002e22:	4659      	mov	r1, fp
 8002e24:	f7fd fa38 	bl	8000298 <__aeabi_dsub>
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	f7fd fbec 	bl	8000608 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4630      	mov	r0, r6
 8002e36:	4639      	mov	r1, r7
 8002e38:	f7fd fa2e 	bl	8000298 <__aeabi_dsub>
 8002e3c:	ec53 2b1a 	vmov	r2, r3, d10
 8002e40:	f7fd fbe2 	bl	8000608 <__aeabi_dmul>
 8002e44:	ec53 2b18 	vmov	r2, r3, d8
 8002e48:	ec41 0b19 	vmov	d9, r0, r1
 8002e4c:	ec51 0b18 	vmov	r0, r1, d8
 8002e50:	f7fd fbda 	bl	8000608 <__aeabi_dmul>
 8002e54:	a37c      	add	r3, pc, #496	; (adr r3, 8003048 <__ieee754_pow+0x708>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	460d      	mov	r5, r1
 8002e5e:	f7fd fbd3 	bl	8000608 <__aeabi_dmul>
 8002e62:	a37b      	add	r3, pc, #492	; (adr r3, 8003050 <__ieee754_pow+0x710>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd fa18 	bl	800029c <__adddf3>
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	462b      	mov	r3, r5
 8002e70:	f7fd fbca 	bl	8000608 <__aeabi_dmul>
 8002e74:	a378      	add	r3, pc, #480	; (adr r3, 8003058 <__ieee754_pow+0x718>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd fa0f 	bl	800029c <__adddf3>
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	f7fd fbc1 	bl	8000608 <__aeabi_dmul>
 8002e86:	a376      	add	r3, pc, #472	; (adr r3, 8003060 <__ieee754_pow+0x720>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fa06 	bl	800029c <__adddf3>
 8002e90:	4622      	mov	r2, r4
 8002e92:	462b      	mov	r3, r5
 8002e94:	f7fd fbb8 	bl	8000608 <__aeabi_dmul>
 8002e98:	a373      	add	r3, pc, #460	; (adr r3, 8003068 <__ieee754_pow+0x728>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd f9fd 	bl	800029c <__adddf3>
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f7fd fbaf 	bl	8000608 <__aeabi_dmul>
 8002eaa:	a371      	add	r3, pc, #452	; (adr r3, 8003070 <__ieee754_pow+0x730>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd f9f4 	bl	800029c <__adddf3>
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	460f      	mov	r7, r1
 8002eba:	462b      	mov	r3, r5
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd fba2 	bl	8000608 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4630      	mov	r0, r6
 8002eca:	4639      	mov	r1, r7
 8002ecc:	f7fd fb9c 	bl	8000608 <__aeabi_dmul>
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	460d      	mov	r5, r1
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	ec51 0b18 	vmov	r0, r1, d8
 8002edc:	f7fd f9de 	bl	800029c <__adddf3>
 8002ee0:	ec53 2b19 	vmov	r2, r3, d9
 8002ee4:	f7fd fb90 	bl	8000608 <__aeabi_dmul>
 8002ee8:	4622      	mov	r2, r4
 8002eea:	462b      	mov	r3, r5
 8002eec:	f7fd f9d6 	bl	800029c <__adddf3>
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	4682      	mov	sl, r0
 8002ef4:	468b      	mov	fp, r1
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	4640      	mov	r0, r8
 8002efa:	4649      	mov	r1, r9
 8002efc:	f7fd fb84 	bl	8000608 <__aeabi_dmul>
 8002f00:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <__ieee754_pow+0x770>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	4606      	mov	r6, r0
 8002f06:	460f      	mov	r7, r1
 8002f08:	f7fd f9c8 	bl	800029c <__adddf3>
 8002f0c:	4652      	mov	r2, sl
 8002f0e:	465b      	mov	r3, fp
 8002f10:	f7fd f9c4 	bl	800029c <__adddf3>
 8002f14:	2000      	movs	r0, #0
 8002f16:	4604      	mov	r4, r0
 8002f18:	460d      	mov	r5, r1
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4640      	mov	r0, r8
 8002f20:	4649      	mov	r1, r9
 8002f22:	f7fd fb71 	bl	8000608 <__aeabi_dmul>
 8002f26:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <__ieee754_pow+0x770>)
 8002f28:	4680      	mov	r8, r0
 8002f2a:	4689      	mov	r9, r1
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4620      	mov	r0, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	f7fd f9b1 	bl	8000298 <__aeabi_dsub>
 8002f36:	4632      	mov	r2, r6
 8002f38:	463b      	mov	r3, r7
 8002f3a:	f7fd f9ad 	bl	8000298 <__aeabi_dsub>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4650      	mov	r0, sl
 8002f44:	4659      	mov	r1, fp
 8002f46:	f7fd f9a7 	bl	8000298 <__aeabi_dsub>
 8002f4a:	ec53 2b18 	vmov	r2, r3, d8
 8002f4e:	f7fd fb5b 	bl	8000608 <__aeabi_dmul>
 8002f52:	4622      	mov	r2, r4
 8002f54:	4606      	mov	r6, r0
 8002f56:	460f      	mov	r7, r1
 8002f58:	462b      	mov	r3, r5
 8002f5a:	ec51 0b19 	vmov	r0, r1, d9
 8002f5e:	f7fd fb53 	bl	8000608 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4630      	mov	r0, r6
 8002f68:	4639      	mov	r1, r7
 8002f6a:	f7fd f997 	bl	800029c <__adddf3>
 8002f6e:	4606      	mov	r6, r0
 8002f70:	460f      	mov	r7, r1
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4640      	mov	r0, r8
 8002f78:	4649      	mov	r1, r9
 8002f7a:	f7fd f98f 	bl	800029c <__adddf3>
 8002f7e:	a33e      	add	r3, pc, #248	; (adr r3, 8003078 <__ieee754_pow+0x738>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	2000      	movs	r0, #0
 8002f86:	4604      	mov	r4, r0
 8002f88:	460d      	mov	r5, r1
 8002f8a:	f7fd fb3d 	bl	8000608 <__aeabi_dmul>
 8002f8e:	4642      	mov	r2, r8
 8002f90:	ec41 0b18 	vmov	d8, r0, r1
 8002f94:	464b      	mov	r3, r9
 8002f96:	4620      	mov	r0, r4
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f7fd f97d 	bl	8000298 <__aeabi_dsub>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	4639      	mov	r1, r7
 8002fa6:	f7fd f977 	bl	8000298 <__aeabi_dsub>
 8002faa:	a335      	add	r3, pc, #212	; (adr r3, 8003080 <__ieee754_pow+0x740>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f7fd fb2a 	bl	8000608 <__aeabi_dmul>
 8002fb4:	a334      	add	r3, pc, #208	; (adr r3, 8003088 <__ieee754_pow+0x748>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	4606      	mov	r6, r0
 8002fbc:	460f      	mov	r7, r1
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd fb21 	bl	8000608 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4630      	mov	r0, r6
 8002fcc:	4639      	mov	r1, r7
 8002fce:	f7fd f965 	bl	800029c <__adddf3>
 8002fd2:	9a07      	ldr	r2, [sp, #28]
 8002fd4:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <__ieee754_pow+0x774>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f7fd f95e 	bl	800029c <__adddf3>
 8002fe0:	4682      	mov	sl, r0
 8002fe2:	9805      	ldr	r0, [sp, #20]
 8002fe4:	468b      	mov	fp, r1
 8002fe6:	f7fd faa5 	bl	8000534 <__aeabi_i2d>
 8002fea:	9a07      	ldr	r2, [sp, #28]
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <__ieee754_pow+0x778>)
 8002fee:	4413      	add	r3, r2
 8002ff0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	460f      	mov	r7, r1
 8002ff8:	4652      	mov	r2, sl
 8002ffa:	465b      	mov	r3, fp
 8002ffc:	ec51 0b18 	vmov	r0, r1, d8
 8003000:	f7fd f94c 	bl	800029c <__adddf3>
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	f7fd f948 	bl	800029c <__adddf3>
 800300c:	4632      	mov	r2, r6
 800300e:	463b      	mov	r3, r7
 8003010:	f7fd f944 	bl	800029c <__adddf3>
 8003014:	2000      	movs	r0, #0
 8003016:	4632      	mov	r2, r6
 8003018:	463b      	mov	r3, r7
 800301a:	4604      	mov	r4, r0
 800301c:	460d      	mov	r5, r1
 800301e:	f7fd f93b 	bl	8000298 <__aeabi_dsub>
 8003022:	4642      	mov	r2, r8
 8003024:	464b      	mov	r3, r9
 8003026:	f7fd f937 	bl	8000298 <__aeabi_dsub>
 800302a:	ec53 2b18 	vmov	r2, r3, d8
 800302e:	f7fd f933 	bl	8000298 <__aeabi_dsub>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4650      	mov	r0, sl
 8003038:	4659      	mov	r1, fp
 800303a:	e610      	b.n	8002c5e <__ieee754_pow+0x31e>
 800303c:	2401      	movs	r4, #1
 800303e:	e6a1      	b.n	8002d84 <__ieee754_pow+0x444>
 8003040:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003090 <__ieee754_pow+0x750>
 8003044:	e617      	b.n	8002c76 <__ieee754_pow+0x336>
 8003046:	bf00      	nop
 8003048:	4a454eef 	.word	0x4a454eef
 800304c:	3fca7e28 	.word	0x3fca7e28
 8003050:	93c9db65 	.word	0x93c9db65
 8003054:	3fcd864a 	.word	0x3fcd864a
 8003058:	a91d4101 	.word	0xa91d4101
 800305c:	3fd17460 	.word	0x3fd17460
 8003060:	518f264d 	.word	0x518f264d
 8003064:	3fd55555 	.word	0x3fd55555
 8003068:	db6fabff 	.word	0xdb6fabff
 800306c:	3fdb6db6 	.word	0x3fdb6db6
 8003070:	33333303 	.word	0x33333303
 8003074:	3fe33333 	.word	0x3fe33333
 8003078:	e0000000 	.word	0xe0000000
 800307c:	3feec709 	.word	0x3feec709
 8003080:	dc3a03fd 	.word	0xdc3a03fd
 8003084:	3feec709 	.word	0x3feec709
 8003088:	145b01f5 	.word	0x145b01f5
 800308c:	be3e2fe0 	.word	0xbe3e2fe0
 8003090:	00000000 	.word	0x00000000
 8003094:	3ff00000 	.word	0x3ff00000
 8003098:	7ff00000 	.word	0x7ff00000
 800309c:	43400000 	.word	0x43400000
 80030a0:	0003988e 	.word	0x0003988e
 80030a4:	000bb679 	.word	0x000bb679
 80030a8:	08003b50 	.word	0x08003b50
 80030ac:	3ff00000 	.word	0x3ff00000
 80030b0:	40080000 	.word	0x40080000
 80030b4:	08003b70 	.word	0x08003b70
 80030b8:	08003b60 	.word	0x08003b60
 80030bc:	a3b3      	add	r3, pc, #716	; (adr r3, 800338c <__ieee754_pow+0xa4c>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	4640      	mov	r0, r8
 80030c4:	4649      	mov	r1, r9
 80030c6:	f7fd f8e9 	bl	800029c <__adddf3>
 80030ca:	4622      	mov	r2, r4
 80030cc:	ec41 0b1a 	vmov	d10, r0, r1
 80030d0:	462b      	mov	r3, r5
 80030d2:	4630      	mov	r0, r6
 80030d4:	4639      	mov	r1, r7
 80030d6:	f7fd f8df 	bl	8000298 <__aeabi_dsub>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	ec51 0b1a 	vmov	r0, r1, d10
 80030e2:	f7fd fd21 	bl	8000b28 <__aeabi_dcmpgt>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	f47f ae04 	bne.w	8002cf4 <__ieee754_pow+0x3b4>
 80030ec:	4aa2      	ldr	r2, [pc, #648]	; (8003378 <__ieee754_pow+0xa38>)
 80030ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f340 8107 	ble.w	8003306 <__ieee754_pow+0x9c6>
 80030f8:	151b      	asrs	r3, r3, #20
 80030fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80030fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003102:	fa4a fa03 	asr.w	sl, sl, r3
 8003106:	44da      	add	sl, fp
 8003108:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800310c:	489b      	ldr	r0, [pc, #620]	; (800337c <__ieee754_pow+0xa3c>)
 800310e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003112:	4108      	asrs	r0, r1
 8003114:	ea00 030a 	and.w	r3, r0, sl
 8003118:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800311c:	f1c1 0114 	rsb	r1, r1, #20
 8003120:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003124:	fa4a fa01 	asr.w	sl, sl, r1
 8003128:	f1bb 0f00 	cmp.w	fp, #0
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	bfb8      	it	lt
 8003136:	f1ca 0a00 	rsblt	sl, sl, #0
 800313a:	f7fd f8ad 	bl	8000298 <__aeabi_dsub>
 800313e:	ec41 0b19 	vmov	d9, r0, r1
 8003142:	4642      	mov	r2, r8
 8003144:	464b      	mov	r3, r9
 8003146:	ec51 0b19 	vmov	r0, r1, d9
 800314a:	f7fd f8a7 	bl	800029c <__adddf3>
 800314e:	a37a      	add	r3, pc, #488	; (adr r3, 8003338 <__ieee754_pow+0x9f8>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	2000      	movs	r0, #0
 8003156:	4604      	mov	r4, r0
 8003158:	460d      	mov	r5, r1
 800315a:	f7fd fa55 	bl	8000608 <__aeabi_dmul>
 800315e:	ec53 2b19 	vmov	r2, r3, d9
 8003162:	4606      	mov	r6, r0
 8003164:	460f      	mov	r7, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd f895 	bl	8000298 <__aeabi_dsub>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4640      	mov	r0, r8
 8003174:	4649      	mov	r1, r9
 8003176:	f7fd f88f 	bl	8000298 <__aeabi_dsub>
 800317a:	a371      	add	r3, pc, #452	; (adr r3, 8003340 <__ieee754_pow+0xa00>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd fa42 	bl	8000608 <__aeabi_dmul>
 8003184:	a370      	add	r3, pc, #448	; (adr r3, 8003348 <__ieee754_pow+0xa08>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	4680      	mov	r8, r0
 800318c:	4689      	mov	r9, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd fa39 	bl	8000608 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4640      	mov	r0, r8
 800319c:	4649      	mov	r1, r9
 800319e:	f7fd f87d 	bl	800029c <__adddf3>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4630      	mov	r0, r6
 80031ac:	4639      	mov	r1, r7
 80031ae:	f7fd f875 	bl	800029c <__adddf3>
 80031b2:	4632      	mov	r2, r6
 80031b4:	463b      	mov	r3, r7
 80031b6:	4680      	mov	r8, r0
 80031b8:	4689      	mov	r9, r1
 80031ba:	f7fd f86d 	bl	8000298 <__aeabi_dsub>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f867 	bl	8000298 <__aeabi_dsub>
 80031ca:	4642      	mov	r2, r8
 80031cc:	4606      	mov	r6, r0
 80031ce:	460f      	mov	r7, r1
 80031d0:	464b      	mov	r3, r9
 80031d2:	4640      	mov	r0, r8
 80031d4:	4649      	mov	r1, r9
 80031d6:	f7fd fa17 	bl	8000608 <__aeabi_dmul>
 80031da:	a35d      	add	r3, pc, #372	; (adr r3, 8003350 <__ieee754_pow+0xa10>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	4604      	mov	r4, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	f7fd fa10 	bl	8000608 <__aeabi_dmul>
 80031e8:	a35b      	add	r3, pc, #364	; (adr r3, 8003358 <__ieee754_pow+0xa18>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fd f853 	bl	8000298 <__aeabi_dsub>
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	f7fd fa07 	bl	8000608 <__aeabi_dmul>
 80031fa:	a359      	add	r3, pc, #356	; (adr r3, 8003360 <__ieee754_pow+0xa20>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd f84c 	bl	800029c <__adddf3>
 8003204:	4622      	mov	r2, r4
 8003206:	462b      	mov	r3, r5
 8003208:	f7fd f9fe 	bl	8000608 <__aeabi_dmul>
 800320c:	a356      	add	r3, pc, #344	; (adr r3, 8003368 <__ieee754_pow+0xa28>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd f841 	bl	8000298 <__aeabi_dsub>
 8003216:	4622      	mov	r2, r4
 8003218:	462b      	mov	r3, r5
 800321a:	f7fd f9f5 	bl	8000608 <__aeabi_dmul>
 800321e:	a354      	add	r3, pc, #336	; (adr r3, 8003370 <__ieee754_pow+0xa30>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f7fd f83a 	bl	800029c <__adddf3>
 8003228:	4622      	mov	r2, r4
 800322a:	462b      	mov	r3, r5
 800322c:	f7fd f9ec 	bl	8000608 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4640      	mov	r0, r8
 8003236:	4649      	mov	r1, r9
 8003238:	f7fd f82e 	bl	8000298 <__aeabi_dsub>
 800323c:	4604      	mov	r4, r0
 800323e:	460d      	mov	r5, r1
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4640      	mov	r0, r8
 8003246:	4649      	mov	r1, r9
 8003248:	f7fd f9de 	bl	8000608 <__aeabi_dmul>
 800324c:	2200      	movs	r2, #0
 800324e:	ec41 0b19 	vmov	d9, r0, r1
 8003252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003256:	4620      	mov	r0, r4
 8003258:	4629      	mov	r1, r5
 800325a:	f7fd f81d 	bl	8000298 <__aeabi_dsub>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	ec51 0b19 	vmov	r0, r1, d9
 8003266:	f7fd faf9 	bl	800085c <__aeabi_ddiv>
 800326a:	4632      	mov	r2, r6
 800326c:	4604      	mov	r4, r0
 800326e:	460d      	mov	r5, r1
 8003270:	463b      	mov	r3, r7
 8003272:	4640      	mov	r0, r8
 8003274:	4649      	mov	r1, r9
 8003276:	f7fd f9c7 	bl	8000608 <__aeabi_dmul>
 800327a:	4632      	mov	r2, r6
 800327c:	463b      	mov	r3, r7
 800327e:	f7fd f80d 	bl	800029c <__adddf3>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4620      	mov	r0, r4
 8003288:	4629      	mov	r1, r5
 800328a:	f7fd f805 	bl	8000298 <__aeabi_dsub>
 800328e:	4642      	mov	r2, r8
 8003290:	464b      	mov	r3, r9
 8003292:	f7fd f801 	bl	8000298 <__aeabi_dsub>
 8003296:	460b      	mov	r3, r1
 8003298:	4602      	mov	r2, r0
 800329a:	4939      	ldr	r1, [pc, #228]	; (8003380 <__ieee754_pow+0xa40>)
 800329c:	2000      	movs	r0, #0
 800329e:	f7fc fffb 	bl	8000298 <__aeabi_dsub>
 80032a2:	ec41 0b10 	vmov	d0, r0, r1
 80032a6:	ee10 3a90 	vmov	r3, s1
 80032aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	da2b      	bge.n	800330c <__ieee754_pow+0x9cc>
 80032b4:	4650      	mov	r0, sl
 80032b6:	f000 f877 	bl	80033a8 <scalbn>
 80032ba:	ec51 0b10 	vmov	r0, r1, d0
 80032be:	ec53 2b18 	vmov	r2, r3, d8
 80032c2:	f7ff bbee 	b.w	8002aa2 <__ieee754_pow+0x162>
 80032c6:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <__ieee754_pow+0xa44>)
 80032c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80032cc:	429e      	cmp	r6, r3
 80032ce:	f77f af0d 	ble.w	80030ec <__ieee754_pow+0x7ac>
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <__ieee754_pow+0xa48>)
 80032d4:	440b      	add	r3, r1
 80032d6:	4303      	orrs	r3, r0
 80032d8:	d009      	beq.n	80032ee <__ieee754_pow+0x9ae>
 80032da:	ec51 0b18 	vmov	r0, r1, d8
 80032de:	2200      	movs	r2, #0
 80032e0:	2300      	movs	r3, #0
 80032e2:	f7fd fc03 	bl	8000aec <__aeabi_dcmplt>
 80032e6:	3800      	subs	r0, #0
 80032e8:	bf18      	it	ne
 80032ea:	2001      	movne	r0, #1
 80032ec:	e448      	b.n	8002b80 <__ieee754_pow+0x240>
 80032ee:	4622      	mov	r2, r4
 80032f0:	462b      	mov	r3, r5
 80032f2:	f7fc ffd1 	bl	8000298 <__aeabi_dsub>
 80032f6:	4642      	mov	r2, r8
 80032f8:	464b      	mov	r3, r9
 80032fa:	f7fd fc0b 	bl	8000b14 <__aeabi_dcmpge>
 80032fe:	2800      	cmp	r0, #0
 8003300:	f43f aef4 	beq.w	80030ec <__ieee754_pow+0x7ac>
 8003304:	e7e9      	b.n	80032da <__ieee754_pow+0x99a>
 8003306:	f04f 0a00 	mov.w	sl, #0
 800330a:	e71a      	b.n	8003142 <__ieee754_pow+0x802>
 800330c:	ec51 0b10 	vmov	r0, r1, d0
 8003310:	4619      	mov	r1, r3
 8003312:	e7d4      	b.n	80032be <__ieee754_pow+0x97e>
 8003314:	491a      	ldr	r1, [pc, #104]	; (8003380 <__ieee754_pow+0xa40>)
 8003316:	2000      	movs	r0, #0
 8003318:	f7ff bb31 	b.w	800297e <__ieee754_pow+0x3e>
 800331c:	2000      	movs	r0, #0
 800331e:	2100      	movs	r1, #0
 8003320:	f7ff bb2d 	b.w	800297e <__ieee754_pow+0x3e>
 8003324:	4630      	mov	r0, r6
 8003326:	4639      	mov	r1, r7
 8003328:	f7ff bb29 	b.w	800297e <__ieee754_pow+0x3e>
 800332c:	9204      	str	r2, [sp, #16]
 800332e:	f7ff bb7b 	b.w	8002a28 <__ieee754_pow+0xe8>
 8003332:	2300      	movs	r3, #0
 8003334:	f7ff bb65 	b.w	8002a02 <__ieee754_pow+0xc2>
 8003338:	00000000 	.word	0x00000000
 800333c:	3fe62e43 	.word	0x3fe62e43
 8003340:	fefa39ef 	.word	0xfefa39ef
 8003344:	3fe62e42 	.word	0x3fe62e42
 8003348:	0ca86c39 	.word	0x0ca86c39
 800334c:	be205c61 	.word	0xbe205c61
 8003350:	72bea4d0 	.word	0x72bea4d0
 8003354:	3e663769 	.word	0x3e663769
 8003358:	c5d26bf1 	.word	0xc5d26bf1
 800335c:	3ebbbd41 	.word	0x3ebbbd41
 8003360:	af25de2c 	.word	0xaf25de2c
 8003364:	3f11566a 	.word	0x3f11566a
 8003368:	16bebd93 	.word	0x16bebd93
 800336c:	3f66c16c 	.word	0x3f66c16c
 8003370:	5555553e 	.word	0x5555553e
 8003374:	3fc55555 	.word	0x3fc55555
 8003378:	3fe00000 	.word	0x3fe00000
 800337c:	fff00000 	.word	0xfff00000
 8003380:	3ff00000 	.word	0x3ff00000
 8003384:	4090cbff 	.word	0x4090cbff
 8003388:	3f6f3400 	.word	0x3f6f3400
 800338c:	652b82fe 	.word	0x652b82fe
 8003390:	3c971547 	.word	0x3c971547

08003394 <fabs>:
 8003394:	ec51 0b10 	vmov	r0, r1, d0
 8003398:	ee10 2a10 	vmov	r2, s0
 800339c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033a0:	ec43 2b10 	vmov	d0, r2, r3
 80033a4:	4770      	bx	lr
	...

080033a8 <scalbn>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	ec55 4b10 	vmov	r4, r5, d0
 80033ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80033b2:	4606      	mov	r6, r0
 80033b4:	462b      	mov	r3, r5
 80033b6:	b999      	cbnz	r1, 80033e0 <scalbn+0x38>
 80033b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80033bc:	4323      	orrs	r3, r4
 80033be:	d03f      	beq.n	8003440 <scalbn+0x98>
 80033c0:	4b35      	ldr	r3, [pc, #212]	; (8003498 <scalbn+0xf0>)
 80033c2:	4629      	mov	r1, r5
 80033c4:	ee10 0a10 	vmov	r0, s0
 80033c8:	2200      	movs	r2, #0
 80033ca:	f7fd f91d 	bl	8000608 <__aeabi_dmul>
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <scalbn+0xf4>)
 80033d0:	429e      	cmp	r6, r3
 80033d2:	4604      	mov	r4, r0
 80033d4:	460d      	mov	r5, r1
 80033d6:	da10      	bge.n	80033fa <scalbn+0x52>
 80033d8:	a327      	add	r3, pc, #156	; (adr r3, 8003478 <scalbn+0xd0>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	e01f      	b.n	8003420 <scalbn+0x78>
 80033e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033e4:	4291      	cmp	r1, r2
 80033e6:	d10c      	bne.n	8003402 <scalbn+0x5a>
 80033e8:	ee10 2a10 	vmov	r2, s0
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fc ff54 	bl	800029c <__adddf3>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	e022      	b.n	8003440 <scalbn+0x98>
 80033fa:	460b      	mov	r3, r1
 80033fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003400:	3936      	subs	r1, #54	; 0x36
 8003402:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003406:	4296      	cmp	r6, r2
 8003408:	dd0d      	ble.n	8003426 <scalbn+0x7e>
 800340a:	2d00      	cmp	r5, #0
 800340c:	a11c      	add	r1, pc, #112	; (adr r1, 8003480 <scalbn+0xd8>)
 800340e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003412:	da02      	bge.n	800341a <scalbn+0x72>
 8003414:	a11c      	add	r1, pc, #112	; (adr r1, 8003488 <scalbn+0xe0>)
 8003416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800341a:	a319      	add	r3, pc, #100	; (adr r3, 8003480 <scalbn+0xd8>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f8f2 	bl	8000608 <__aeabi_dmul>
 8003424:	e7e6      	b.n	80033f4 <scalbn+0x4c>
 8003426:	1872      	adds	r2, r6, r1
 8003428:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800342c:	428a      	cmp	r2, r1
 800342e:	dcec      	bgt.n	800340a <scalbn+0x62>
 8003430:	2a00      	cmp	r2, #0
 8003432:	dd08      	ble.n	8003446 <scalbn+0x9e>
 8003434:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003438:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800343c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003440:	ec45 4b10 	vmov	d0, r4, r5
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800344a:	da08      	bge.n	800345e <scalbn+0xb6>
 800344c:	2d00      	cmp	r5, #0
 800344e:	a10a      	add	r1, pc, #40	; (adr r1, 8003478 <scalbn+0xd0>)
 8003450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003454:	dac0      	bge.n	80033d8 <scalbn+0x30>
 8003456:	a10e      	add	r1, pc, #56	; (adr r1, 8003490 <scalbn+0xe8>)
 8003458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800345c:	e7bc      	b.n	80033d8 <scalbn+0x30>
 800345e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003462:	3236      	adds	r2, #54	; 0x36
 8003464:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003468:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800346c:	4620      	mov	r0, r4
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <scalbn+0xf8>)
 8003470:	2200      	movs	r2, #0
 8003472:	e7d5      	b.n	8003420 <scalbn+0x78>
 8003474:	f3af 8000 	nop.w
 8003478:	c2f8f359 	.word	0xc2f8f359
 800347c:	01a56e1f 	.word	0x01a56e1f
 8003480:	8800759c 	.word	0x8800759c
 8003484:	7e37e43c 	.word	0x7e37e43c
 8003488:	8800759c 	.word	0x8800759c
 800348c:	fe37e43c 	.word	0xfe37e43c
 8003490:	c2f8f359 	.word	0xc2f8f359
 8003494:	81a56e1f 	.word	0x81a56e1f
 8003498:	43500000 	.word	0x43500000
 800349c:	ffff3cb0 	.word	0xffff3cb0
 80034a0:	3c900000 	.word	0x3c900000

080034a4 <with_errno>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4604      	mov	r4, r0
 80034a8:	460d      	mov	r5, r1
 80034aa:	4616      	mov	r6, r2
 80034ac:	f7fe fc32 	bl	8001d14 <__errno>
 80034b0:	4629      	mov	r1, r5
 80034b2:	6006      	str	r6, [r0, #0]
 80034b4:	4620      	mov	r0, r4
 80034b6:	bd70      	pop	{r4, r5, r6, pc}

080034b8 <xflow>:
 80034b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ba:	4614      	mov	r4, r2
 80034bc:	461d      	mov	r5, r3
 80034be:	b108      	cbz	r0, 80034c4 <xflow+0xc>
 80034c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80034c4:	e9cd 2300 	strd	r2, r3, [sp]
 80034c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f89a 	bl	8000608 <__aeabi_dmul>
 80034d4:	2222      	movs	r2, #34	; 0x22
 80034d6:	b003      	add	sp, #12
 80034d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034dc:	f7ff bfe2 	b.w	80034a4 <with_errno>

080034e0 <__math_uflow>:
 80034e0:	b508      	push	{r3, lr}
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034e8:	f7ff ffe6 	bl	80034b8 <xflow>
 80034ec:	ec41 0b10 	vmov	d0, r0, r1
 80034f0:	bd08      	pop	{r3, pc}

080034f2 <__math_oflow>:
 80034f2:	b508      	push	{r3, lr}
 80034f4:	2200      	movs	r2, #0
 80034f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80034fa:	f7ff ffdd 	bl	80034b8 <xflow>
 80034fe:	ec41 0b10 	vmov	d0, r0, r1
 8003502:	bd08      	pop	{r3, pc}

08003504 <__ieee754_sqrt>:
 8003504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003508:	ec55 4b10 	vmov	r4, r5, d0
 800350c:	4e67      	ldr	r6, [pc, #412]	; (80036ac <__ieee754_sqrt+0x1a8>)
 800350e:	43ae      	bics	r6, r5
 8003510:	ee10 0a10 	vmov	r0, s0
 8003514:	ee10 2a10 	vmov	r2, s0
 8003518:	4629      	mov	r1, r5
 800351a:	462b      	mov	r3, r5
 800351c:	d10d      	bne.n	800353a <__ieee754_sqrt+0x36>
 800351e:	f7fd f873 	bl	8000608 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f7fc feb7 	bl	800029c <__adddf3>
 800352e:	4604      	mov	r4, r0
 8003530:	460d      	mov	r5, r1
 8003532:	ec45 4b10 	vmov	d0, r4, r5
 8003536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353a:	2d00      	cmp	r5, #0
 800353c:	dc0b      	bgt.n	8003556 <__ieee754_sqrt+0x52>
 800353e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003542:	4326      	orrs	r6, r4
 8003544:	d0f5      	beq.n	8003532 <__ieee754_sqrt+0x2e>
 8003546:	b135      	cbz	r5, 8003556 <__ieee754_sqrt+0x52>
 8003548:	f7fc fea6 	bl	8000298 <__aeabi_dsub>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	f7fd f984 	bl	800085c <__aeabi_ddiv>
 8003554:	e7eb      	b.n	800352e <__ieee754_sqrt+0x2a>
 8003556:	1509      	asrs	r1, r1, #20
 8003558:	f000 808d 	beq.w	8003676 <__ieee754_sqrt+0x172>
 800355c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003560:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8003564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003568:	07c9      	lsls	r1, r1, #31
 800356a:	bf5c      	itt	pl
 800356c:	005b      	lslpl	r3, r3, #1
 800356e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8003572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003576:	bf58      	it	pl
 8003578:	0052      	lslpl	r2, r2, #1
 800357a:	2500      	movs	r5, #0
 800357c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003580:	1076      	asrs	r6, r6, #1
 8003582:	0052      	lsls	r2, r2, #1
 8003584:	f04f 0e16 	mov.w	lr, #22
 8003588:	46ac      	mov	ip, r5
 800358a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800358e:	eb0c 0001 	add.w	r0, ip, r1
 8003592:	4298      	cmp	r0, r3
 8003594:	bfde      	ittt	le
 8003596:	1a1b      	suble	r3, r3, r0
 8003598:	eb00 0c01 	addle.w	ip, r0, r1
 800359c:	186d      	addle	r5, r5, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	f1be 0e01 	subs.w	lr, lr, #1
 80035a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80035a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80035ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80035b0:	d1ed      	bne.n	800358e <__ieee754_sqrt+0x8a>
 80035b2:	4674      	mov	r4, lr
 80035b4:	2720      	movs	r7, #32
 80035b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035ba:	4563      	cmp	r3, ip
 80035bc:	eb01 000e 	add.w	r0, r1, lr
 80035c0:	dc02      	bgt.n	80035c8 <__ieee754_sqrt+0xc4>
 80035c2:	d113      	bne.n	80035ec <__ieee754_sqrt+0xe8>
 80035c4:	4290      	cmp	r0, r2
 80035c6:	d811      	bhi.n	80035ec <__ieee754_sqrt+0xe8>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	eb00 0e01 	add.w	lr, r0, r1
 80035ce:	da57      	bge.n	8003680 <__ieee754_sqrt+0x17c>
 80035d0:	f1be 0f00 	cmp.w	lr, #0
 80035d4:	db54      	blt.n	8003680 <__ieee754_sqrt+0x17c>
 80035d6:	f10c 0801 	add.w	r8, ip, #1
 80035da:	eba3 030c 	sub.w	r3, r3, ip
 80035de:	4290      	cmp	r0, r2
 80035e0:	bf88      	it	hi
 80035e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80035e6:	1a12      	subs	r2, r2, r0
 80035e8:	440c      	add	r4, r1
 80035ea:	46c4      	mov	ip, r8
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	3f01      	subs	r7, #1
 80035f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80035f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80035f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80035fc:	d1dd      	bne.n	80035ba <__ieee754_sqrt+0xb6>
 80035fe:	4313      	orrs	r3, r2
 8003600:	d01b      	beq.n	800363a <__ieee754_sqrt+0x136>
 8003602:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80036b0 <__ieee754_sqrt+0x1ac>
 8003606:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80036b4 <__ieee754_sqrt+0x1b0>
 800360a:	e9da 0100 	ldrd	r0, r1, [sl]
 800360e:	e9db 2300 	ldrd	r2, r3, [fp]
 8003612:	f7fc fe41 	bl	8000298 <__aeabi_dsub>
 8003616:	e9da 8900 	ldrd	r8, r9, [sl]
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4640      	mov	r0, r8
 8003620:	4649      	mov	r1, r9
 8003622:	f7fd fa6d 	bl	8000b00 <__aeabi_dcmple>
 8003626:	b140      	cbz	r0, 800363a <__ieee754_sqrt+0x136>
 8003628:	f1b4 3fff 	cmp.w	r4, #4294967295
 800362c:	e9da 0100 	ldrd	r0, r1, [sl]
 8003630:	e9db 2300 	ldrd	r2, r3, [fp]
 8003634:	d126      	bne.n	8003684 <__ieee754_sqrt+0x180>
 8003636:	3501      	adds	r5, #1
 8003638:	463c      	mov	r4, r7
 800363a:	106a      	asrs	r2, r5, #1
 800363c:	0863      	lsrs	r3, r4, #1
 800363e:	07e9      	lsls	r1, r5, #31
 8003640:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003644:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003648:	bf48      	it	mi
 800364a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800364e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8003652:	461c      	mov	r4, r3
 8003654:	e76d      	b.n	8003532 <__ieee754_sqrt+0x2e>
 8003656:	0ad3      	lsrs	r3, r2, #11
 8003658:	3815      	subs	r0, #21
 800365a:	0552      	lsls	r2, r2, #21
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0fa      	beq.n	8003656 <__ieee754_sqrt+0x152>
 8003660:	02dc      	lsls	r4, r3, #11
 8003662:	d50a      	bpl.n	800367a <__ieee754_sqrt+0x176>
 8003664:	f1c1 0420 	rsb	r4, r1, #32
 8003668:	fa22 f404 	lsr.w	r4, r2, r4
 800366c:	1e4d      	subs	r5, r1, #1
 800366e:	408a      	lsls	r2, r1
 8003670:	4323      	orrs	r3, r4
 8003672:	1b41      	subs	r1, r0, r5
 8003674:	e772      	b.n	800355c <__ieee754_sqrt+0x58>
 8003676:	4608      	mov	r0, r1
 8003678:	e7f0      	b.n	800365c <__ieee754_sqrt+0x158>
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	3101      	adds	r1, #1
 800367e:	e7ef      	b.n	8003660 <__ieee754_sqrt+0x15c>
 8003680:	46e0      	mov	r8, ip
 8003682:	e7aa      	b.n	80035da <__ieee754_sqrt+0xd6>
 8003684:	f7fc fe0a 	bl	800029c <__adddf3>
 8003688:	e9da 8900 	ldrd	r8, r9, [sl]
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4640      	mov	r0, r8
 8003692:	4649      	mov	r1, r9
 8003694:	f7fd fa2a 	bl	8000aec <__aeabi_dcmplt>
 8003698:	b120      	cbz	r0, 80036a4 <__ieee754_sqrt+0x1a0>
 800369a:	1ca0      	adds	r0, r4, #2
 800369c:	bf08      	it	eq
 800369e:	3501      	addeq	r5, #1
 80036a0:	3402      	adds	r4, #2
 80036a2:	e7ca      	b.n	800363a <__ieee754_sqrt+0x136>
 80036a4:	3401      	adds	r4, #1
 80036a6:	f024 0401 	bic.w	r4, r4, #1
 80036aa:	e7c6      	b.n	800363a <__ieee754_sqrt+0x136>
 80036ac:	7ff00000 	.word	0x7ff00000
 80036b0:	20000050 	.word	0x20000050
 80036b4:	20000058 	.word	0x20000058

080036b8 <__ieee754_log>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	ec51 0b10 	vmov	r0, r1, d0
 80036c0:	ed2d 8b04 	vpush	{d8-d9}
 80036c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80036c8:	b083      	sub	sp, #12
 80036ca:	460d      	mov	r5, r1
 80036cc:	da29      	bge.n	8003722 <__ieee754_log+0x6a>
 80036ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036d2:	4303      	orrs	r3, r0
 80036d4:	ee10 2a10 	vmov	r2, s0
 80036d8:	d10c      	bne.n	80036f4 <__ieee754_log+0x3c>
 80036da:	49cf      	ldr	r1, [pc, #828]	; (8003a18 <__ieee754_log+0x360>)
 80036dc:	2200      	movs	r2, #0
 80036de:	2300      	movs	r3, #0
 80036e0:	2000      	movs	r0, #0
 80036e2:	f7fd f8bb 	bl	800085c <__aeabi_ddiv>
 80036e6:	ec41 0b10 	vmov	d0, r0, r1
 80036ea:	b003      	add	sp, #12
 80036ec:	ecbd 8b04 	vpop	{d8-d9}
 80036f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f4:	2900      	cmp	r1, #0
 80036f6:	da05      	bge.n	8003704 <__ieee754_log+0x4c>
 80036f8:	460b      	mov	r3, r1
 80036fa:	f7fc fdcd 	bl	8000298 <__aeabi_dsub>
 80036fe:	2200      	movs	r2, #0
 8003700:	2300      	movs	r3, #0
 8003702:	e7ee      	b.n	80036e2 <__ieee754_log+0x2a>
 8003704:	4bc5      	ldr	r3, [pc, #788]	; (8003a1c <__ieee754_log+0x364>)
 8003706:	2200      	movs	r2, #0
 8003708:	f7fc ff7e 	bl	8000608 <__aeabi_dmul>
 800370c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003710:	460d      	mov	r5, r1
 8003712:	4ac3      	ldr	r2, [pc, #780]	; (8003a20 <__ieee754_log+0x368>)
 8003714:	4295      	cmp	r5, r2
 8003716:	dd06      	ble.n	8003726 <__ieee754_log+0x6e>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	f7fc fdbe 	bl	800029c <__adddf3>
 8003720:	e7e1      	b.n	80036e6 <__ieee754_log+0x2e>
 8003722:	2300      	movs	r3, #0
 8003724:	e7f5      	b.n	8003712 <__ieee754_log+0x5a>
 8003726:	152c      	asrs	r4, r5, #20
 8003728:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800372c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003730:	441c      	add	r4, r3
 8003732:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8003736:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8003742:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8003746:	ea42 0105 	orr.w	r1, r2, r5
 800374a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800374e:	2200      	movs	r2, #0
 8003750:	4bb4      	ldr	r3, [pc, #720]	; (8003a24 <__ieee754_log+0x36c>)
 8003752:	f7fc fda1 	bl	8000298 <__aeabi_dsub>
 8003756:	1cab      	adds	r3, r5, #2
 8003758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800375c:	2b02      	cmp	r3, #2
 800375e:	4682      	mov	sl, r0
 8003760:	468b      	mov	fp, r1
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	dc53      	bgt.n	8003810 <__ieee754_log+0x158>
 8003768:	2300      	movs	r3, #0
 800376a:	f7fd f9b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800376e:	b1d0      	cbz	r0, 80037a6 <__ieee754_log+0xee>
 8003770:	2c00      	cmp	r4, #0
 8003772:	f000 8122 	beq.w	80039ba <__ieee754_log+0x302>
 8003776:	4620      	mov	r0, r4
 8003778:	f7fc fedc 	bl	8000534 <__aeabi_i2d>
 800377c:	a390      	add	r3, pc, #576	; (adr r3, 80039c0 <__ieee754_log+0x308>)
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	4606      	mov	r6, r0
 8003784:	460f      	mov	r7, r1
 8003786:	f7fc ff3f 	bl	8000608 <__aeabi_dmul>
 800378a:	a38f      	add	r3, pc, #572	; (adr r3, 80039c8 <__ieee754_log+0x310>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	4604      	mov	r4, r0
 8003792:	460d      	mov	r5, r1
 8003794:	4630      	mov	r0, r6
 8003796:	4639      	mov	r1, r7
 8003798:	f7fc ff36 	bl	8000608 <__aeabi_dmul>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4620      	mov	r0, r4
 80037a2:	4629      	mov	r1, r5
 80037a4:	e7ba      	b.n	800371c <__ieee754_log+0x64>
 80037a6:	a38a      	add	r3, pc, #552	; (adr r3, 80039d0 <__ieee754_log+0x318>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	4650      	mov	r0, sl
 80037ae:	4659      	mov	r1, fp
 80037b0:	f7fc ff2a 	bl	8000608 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	2000      	movs	r0, #0
 80037ba:	499b      	ldr	r1, [pc, #620]	; (8003a28 <__ieee754_log+0x370>)
 80037bc:	f7fc fd6c 	bl	8000298 <__aeabi_dsub>
 80037c0:	4652      	mov	r2, sl
 80037c2:	4606      	mov	r6, r0
 80037c4:	460f      	mov	r7, r1
 80037c6:	465b      	mov	r3, fp
 80037c8:	4650      	mov	r0, sl
 80037ca:	4659      	mov	r1, fp
 80037cc:	f7fc ff1c 	bl	8000608 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4630      	mov	r0, r6
 80037d6:	4639      	mov	r1, r7
 80037d8:	f7fc ff16 	bl	8000608 <__aeabi_dmul>
 80037dc:	4606      	mov	r6, r0
 80037de:	460f      	mov	r7, r1
 80037e0:	b914      	cbnz	r4, 80037e8 <__ieee754_log+0x130>
 80037e2:	4632      	mov	r2, r6
 80037e4:	463b      	mov	r3, r7
 80037e6:	e0a2      	b.n	800392e <__ieee754_log+0x276>
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7fc fea3 	bl	8000534 <__aeabi_i2d>
 80037ee:	a374      	add	r3, pc, #464	; (adr r3, 80039c0 <__ieee754_log+0x308>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	4680      	mov	r8, r0
 80037f6:	4689      	mov	r9, r1
 80037f8:	f7fc ff06 	bl	8000608 <__aeabi_dmul>
 80037fc:	a372      	add	r3, pc, #456	; (adr r3, 80039c8 <__ieee754_log+0x310>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	4604      	mov	r4, r0
 8003804:	460d      	mov	r5, r1
 8003806:	4640      	mov	r0, r8
 8003808:	4649      	mov	r1, r9
 800380a:	f7fc fefd 	bl	8000608 <__aeabi_dmul>
 800380e:	e0a7      	b.n	8003960 <__ieee754_log+0x2a8>
 8003810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003814:	f7fc fd42 	bl	800029c <__adddf3>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4650      	mov	r0, sl
 800381e:	4659      	mov	r1, fp
 8003820:	f7fd f81c 	bl	800085c <__aeabi_ddiv>
 8003824:	ec41 0b18 	vmov	d8, r0, r1
 8003828:	4620      	mov	r0, r4
 800382a:	f7fc fe83 	bl	8000534 <__aeabi_i2d>
 800382e:	ec53 2b18 	vmov	r2, r3, d8
 8003832:	ec41 0b19 	vmov	d9, r0, r1
 8003836:	ec51 0b18 	vmov	r0, r1, d8
 800383a:	f7fc fee5 	bl	8000608 <__aeabi_dmul>
 800383e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003842:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4680      	mov	r8, r0
 800384e:	4689      	mov	r9, r1
 8003850:	f7fc feda 	bl	8000608 <__aeabi_dmul>
 8003854:	a360      	add	r3, pc, #384	; (adr r3, 80039d8 <__ieee754_log+0x320>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	4606      	mov	r6, r0
 800385c:	460f      	mov	r7, r1
 800385e:	f7fc fed3 	bl	8000608 <__aeabi_dmul>
 8003862:	a35f      	add	r3, pc, #380	; (adr r3, 80039e0 <__ieee754_log+0x328>)
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f7fc fd18 	bl	800029c <__adddf3>
 800386c:	4632      	mov	r2, r6
 800386e:	463b      	mov	r3, r7
 8003870:	f7fc feca 	bl	8000608 <__aeabi_dmul>
 8003874:	a35c      	add	r3, pc, #368	; (adr r3, 80039e8 <__ieee754_log+0x330>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fd0f 	bl	800029c <__adddf3>
 800387e:	4632      	mov	r2, r6
 8003880:	463b      	mov	r3, r7
 8003882:	f7fc fec1 	bl	8000608 <__aeabi_dmul>
 8003886:	a35a      	add	r3, pc, #360	; (adr r3, 80039f0 <__ieee754_log+0x338>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fd06 	bl	800029c <__adddf3>
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	f7fc feb8 	bl	8000608 <__aeabi_dmul>
 8003898:	a357      	add	r3, pc, #348	; (adr r3, 80039f8 <__ieee754_log+0x340>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	4680      	mov	r8, r0
 80038a0:	4689      	mov	r9, r1
 80038a2:	4630      	mov	r0, r6
 80038a4:	4639      	mov	r1, r7
 80038a6:	f7fc feaf 	bl	8000608 <__aeabi_dmul>
 80038aa:	a355      	add	r3, pc, #340	; (adr r3, 8003a00 <__ieee754_log+0x348>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fcf4 	bl	800029c <__adddf3>
 80038b4:	4632      	mov	r2, r6
 80038b6:	463b      	mov	r3, r7
 80038b8:	f7fc fea6 	bl	8000608 <__aeabi_dmul>
 80038bc:	a352      	add	r3, pc, #328	; (adr r3, 8003a08 <__ieee754_log+0x350>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fceb 	bl	800029c <__adddf3>
 80038c6:	4632      	mov	r2, r6
 80038c8:	463b      	mov	r3, r7
 80038ca:	f7fc fe9d 	bl	8000608 <__aeabi_dmul>
 80038ce:	460b      	mov	r3, r1
 80038d0:	4602      	mov	r2, r0
 80038d2:	4649      	mov	r1, r9
 80038d4:	4640      	mov	r0, r8
 80038d6:	f7fc fce1 	bl	800029c <__adddf3>
 80038da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80038de:	9b01      	ldr	r3, [sp, #4]
 80038e0:	3551      	adds	r5, #81	; 0x51
 80038e2:	431d      	orrs	r5, r3
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	4680      	mov	r8, r0
 80038e8:	4689      	mov	r9, r1
 80038ea:	dd48      	ble.n	800397e <__ieee754_log+0x2c6>
 80038ec:	4b4e      	ldr	r3, [pc, #312]	; (8003a28 <__ieee754_log+0x370>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	4650      	mov	r0, sl
 80038f2:	4659      	mov	r1, fp
 80038f4:	f7fc fe88 	bl	8000608 <__aeabi_dmul>
 80038f8:	4652      	mov	r2, sl
 80038fa:	465b      	mov	r3, fp
 80038fc:	f7fc fe84 	bl	8000608 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4606      	mov	r6, r0
 8003906:	460f      	mov	r7, r1
 8003908:	4640      	mov	r0, r8
 800390a:	4649      	mov	r1, r9
 800390c:	f7fc fcc6 	bl	800029c <__adddf3>
 8003910:	ec53 2b18 	vmov	r2, r3, d8
 8003914:	f7fc fe78 	bl	8000608 <__aeabi_dmul>
 8003918:	4680      	mov	r8, r0
 800391a:	4689      	mov	r9, r1
 800391c:	b964      	cbnz	r4, 8003938 <__ieee754_log+0x280>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4630      	mov	r0, r6
 8003924:	4639      	mov	r1, r7
 8003926:	f7fc fcb7 	bl	8000298 <__aeabi_dsub>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4650      	mov	r0, sl
 8003930:	4659      	mov	r1, fp
 8003932:	f7fc fcb1 	bl	8000298 <__aeabi_dsub>
 8003936:	e6d6      	b.n	80036e6 <__ieee754_log+0x2e>
 8003938:	a321      	add	r3, pc, #132	; (adr r3, 80039c0 <__ieee754_log+0x308>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	ec51 0b19 	vmov	r0, r1, d9
 8003942:	f7fc fe61 	bl	8000608 <__aeabi_dmul>
 8003946:	a320      	add	r3, pc, #128	; (adr r3, 80039c8 <__ieee754_log+0x310>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	4604      	mov	r4, r0
 800394e:	460d      	mov	r5, r1
 8003950:	ec51 0b19 	vmov	r0, r1, d9
 8003954:	f7fc fe58 	bl	8000608 <__aeabi_dmul>
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	f7fc fc9e 	bl	800029c <__adddf3>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4630      	mov	r0, r6
 8003966:	4639      	mov	r1, r7
 8003968:	f7fc fc96 	bl	8000298 <__aeabi_dsub>
 800396c:	4652      	mov	r2, sl
 800396e:	465b      	mov	r3, fp
 8003970:	f7fc fc92 	bl	8000298 <__aeabi_dsub>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4620      	mov	r0, r4
 800397a:	4629      	mov	r1, r5
 800397c:	e7d9      	b.n	8003932 <__ieee754_log+0x27a>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4650      	mov	r0, sl
 8003984:	4659      	mov	r1, fp
 8003986:	f7fc fc87 	bl	8000298 <__aeabi_dsub>
 800398a:	ec53 2b18 	vmov	r2, r3, d8
 800398e:	f7fc fe3b 	bl	8000608 <__aeabi_dmul>
 8003992:	4606      	mov	r6, r0
 8003994:	460f      	mov	r7, r1
 8003996:	2c00      	cmp	r4, #0
 8003998:	f43f af23 	beq.w	80037e2 <__ieee754_log+0x12a>
 800399c:	a308      	add	r3, pc, #32	; (adr r3, 80039c0 <__ieee754_log+0x308>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	ec51 0b19 	vmov	r0, r1, d9
 80039a6:	f7fc fe2f 	bl	8000608 <__aeabi_dmul>
 80039aa:	a307      	add	r3, pc, #28	; (adr r3, 80039c8 <__ieee754_log+0x310>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	4604      	mov	r4, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	ec51 0b19 	vmov	r0, r1, d9
 80039b8:	e727      	b.n	800380a <__ieee754_log+0x152>
 80039ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003a10 <__ieee754_log+0x358>
 80039be:	e694      	b.n	80036ea <__ieee754_log+0x32>
 80039c0:	fee00000 	.word	0xfee00000
 80039c4:	3fe62e42 	.word	0x3fe62e42
 80039c8:	35793c76 	.word	0x35793c76
 80039cc:	3dea39ef 	.word	0x3dea39ef
 80039d0:	55555555 	.word	0x55555555
 80039d4:	3fd55555 	.word	0x3fd55555
 80039d8:	df3e5244 	.word	0xdf3e5244
 80039dc:	3fc2f112 	.word	0x3fc2f112
 80039e0:	96cb03de 	.word	0x96cb03de
 80039e4:	3fc74664 	.word	0x3fc74664
 80039e8:	94229359 	.word	0x94229359
 80039ec:	3fd24924 	.word	0x3fd24924
 80039f0:	55555593 	.word	0x55555593
 80039f4:	3fe55555 	.word	0x3fe55555
 80039f8:	d078c69f 	.word	0xd078c69f
 80039fc:	3fc39a09 	.word	0x3fc39a09
 8003a00:	1d8e78af 	.word	0x1d8e78af
 8003a04:	3fcc71c5 	.word	0x3fcc71c5
 8003a08:	9997fa04 	.word	0x9997fa04
 8003a0c:	3fd99999 	.word	0x3fd99999
	...
 8003a18:	c3500000 	.word	0xc3500000
 8003a1c:	43500000 	.word	0x43500000
 8003a20:	7fefffff 	.word	0x7fefffff
 8003a24:	3ff00000 	.word	0x3ff00000
 8003a28:	3fe00000 	.word	0x3fe00000

08003a2c <_init>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr

08003a38 <_fini>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr
