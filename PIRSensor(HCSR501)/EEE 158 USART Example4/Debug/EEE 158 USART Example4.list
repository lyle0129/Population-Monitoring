
EEE 158 USART Example4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dac  08001dac  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08001dac  08001dac  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dac  08001dac  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dac  08001dac  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001db0  08001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000050  08001e04  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08001e04  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002517  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a47  00000000  00000000  000225da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00023028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011c  00000000  00000000  000231b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f3af  00000000  00000000  000232cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002de0  00000000  00000000  0003267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054997  00000000  00000000  0003545b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009bc  00000000  00000000  00089df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0008a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c94 	.word	0x08001c94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08001c94 	.word	0x08001c94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <EXTI15_10_IRQHandler>:
 * This function name is special -- this name is used by the startup code (*.s)
 * to indicate the handler for this interrupt vector.
 */
void delay(int);
void EXTI15_10_IRQHandler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/*
	 * The hardware setup has PC13 being active-low. This must be taken
	 * into consideration to maintain logical consistency with the
	 * rest of the code.
	 */
	if (!(GPIOC->IDR & 0x2000))
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <EXTI15_10_IRQHandler+0x28>)
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d102      	bne.n	80002a6 <EXTI15_10_IRQHandler+0x16>
		irq_data.pressed = 1;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <EXTI15_10_IRQHandler+0x2c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]

	// Re-enable reception of interrupts on this line.
	EXTI->PR = (1 << 13);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <EXTI15_10_IRQHandler+0x30>)
 80002a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002ac:	615a      	str	r2, [r3, #20]
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	40020800 	.word	0x40020800
 80002bc:	2000006c 	.word	0x2000006c
 80002c0:	40013c00 	.word	0x40013c00

080002c4 <SysTick_Handler>:

// Handler for the system tick
void SysTick_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	irq_data.nr_tick += 1;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SysTick_Handler+0x20>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	3301      	adds	r3, #1
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <SysTick_Handler+0x20>)
 80002d0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <SysTick_Handler+0x24>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	2000006c 	.word	0x2000006c
 80002e8:	e000e010 	.word	0xe000e010

080002ec <do_sys_config>:

////////////////////////////////////////////////////////////////////////////

// Function to initialize the system; called only once on device reset
static void do_sys_config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	
	/*
	 * Enable tick counting; the idea is to allow main() to perform
	 * periodic tasks.
	 */
	SysTick->LOAD = (20000-1);	// Target is 100 Hz with 2MHz clock
 80002f0:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <do_sys_config+0xc0>)
 80002f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80002f6:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = 0;
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <do_sys_config+0xc0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(1 << 2);	// Clock base = 16MHz / 8 = 2MHz
 80002fe:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <do_sys_config+0xc0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a2a      	ldr	r2, [pc, #168]	; (80003ac <do_sys_config+0xc0>)
 8000304:	f023 0304 	bic.w	r3, r3, #4
 8000308:	6013      	str	r3, [r2, #0]
	SysTick->CTRL &= ~(1 << 16);
 800030a:	4b28      	ldr	r3, [pc, #160]	; (80003ac <do_sys_config+0xc0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a27      	ldr	r2, [pc, #156]	; (80003ac <do_sys_config+0xc0>)
 8000310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000314:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= (0b11 << 0);	// Enable the tick
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <do_sys_config+0xc0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a24      	ldr	r2, [pc, #144]	; (80003ac <do_sys_config+0xc0>)
 800031c:	f043 0303 	orr.w	r3, r3, #3
 8000320:	6013      	str	r3, [r2, #0]
	
	//for on-board LED initialization
	RCC->AHB1ENR |= (1<<0); // Enables GPIOA peripheral
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <do_sys_config+0xc4>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a22      	ldr	r2, [pc, #136]	; (80003b0 <do_sys_config+0xc4>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<1); // Enables GPIOB peripheral
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <do_sys_config+0xc4>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a1f      	ldr	r2, [pc, #124]	; (80003b0 <do_sys_config+0xc4>)
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1<<11); // PA5 as Output, MODER = 0b01
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <do_sys_config+0xc8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1d      	ldr	r2, [pc, #116]	; (80003b4 <do_sys_config+0xc8>)
 8000340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000344:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<10); // PA5 as Output, MODER = 0b01
 8000346:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <do_sys_config+0xc8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <do_sys_config+0xc8>)
 800034c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000350:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<5); // Sets GPIOA, PIN 5 as push-pull
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <do_sys_config+0xc8>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <do_sys_config+0xc8>)
 8000358:	f023 0320 	bic.w	r3, r3, #32
 800035c:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<5); // PA5 initially LOW
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <do_sys_config+0xc8>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <do_sys_config+0xc8>)
 8000364:	f023 0320 	bic.w	r3, r3, #32
 8000368:	6153      	str	r3, [r2, #20]

	//for motion sensor initialization

	//Set GPIOA, PIN 10 as Input (MODER[21:20] = 00)
	GPIOA->MODER &= ~(1<<21); // clear bit 21
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <do_sys_config+0xc8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <do_sys_config+0xc8>)
 8000370:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000374:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<20); // clear bit 20
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <do_sys_config+0xc8>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <do_sys_config+0xc8>)
 800037c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000380:	6013      	str	r3, [r2, #0]

	//Set GPIOA, PIN 10 as no pull-up, no pull-down
	GPIOA->PUPDR &= ~(1<<21); // clear bit 21
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <do_sys_config+0xc8>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <do_sys_config+0xc8>)
 8000388:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800038c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1<<20); // clear bit 20
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <do_sys_config+0xc8>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <do_sys_config+0xc8>)
 8000394:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000398:	60d3      	str	r3, [r2, #12]


	// Do the initialization of USART last.
	usart1_init();
 800039a:	f000 fce7 	bl	8000d6c <usart1_init>
	usart2_init();
 800039e:	f000 fb75 	bl	8000a8c <usart2_init>
	usart6_init();
 80003a2:	f000 fe53 	bl	800104c <usart6_init>

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	e000e010 	.word	0xe000e010
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020000 	.word	0x40020000

080003b8 <main>:
// Additional delay for wifi_status 5 and 7
const uint32_t ADDITIONAL_WIFI_DELAY_MS = 2000;// this is used for cipsend and sending the data itself

// The heart of the program
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0ce      	sub	sp, #312	; 0x138
 80003bc:	af00      	add	r7, sp, #0
	/*
	 * Buffer for storing data from the USART; necessary to properly parse
	 * multi-byte datagrams (eg. ANSI escape sequences).
	 */
	char		rxb6_data[100];
	unsigned int	rxb6_idx  = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	unsigned int	rxb6_size = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char *s = NULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	uint8_t wifi_status = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t wifi_setup = 0; //make this into 1 if the wifi has been setup already
 80003d6:	2300      	movs	r3, #0
 80003d8:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
	char local_buf1[100] = {0}; //storing the data do be sent
 80003dc:	2300      	movs	r3, #0
 80003de:	643b      	str	r3, [r7, #64]	; 0x40
 80003e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003e4:	2260      	movs	r2, #96	; 0x60
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 ffab 	bl	8001344 <memset>
	char local_buf2[30] = {0}; // storing the length of data cipsend to be sent
 80003ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80003f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	3304      	adds	r3, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	831a      	strh	r2, [r3, #24]
	char wifi_buf[30] = {0}; //for debugging only
 800040c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000410:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	3304      	adds	r3, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	831a      	strh	r2, [r3, #24]
	unsigned int 	motionDetected = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int	holdValue = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	// Configure the system
	do_sys_config();
 8000436:	f7ff ff59 	bl	80002ec <do_sys_config>

	// Wifi Reset
	if (!usart6_tx_is_busy()) {
 800043a:	f000 fef7 	bl	800122c <usart6_tx_is_busy>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d10d      	bne.n	8000460 <main+0xa8>
		usart6_tx_send("AT+RST\r\n", strlen("AT+RST\r\n"));
 8000444:	2108      	movs	r1, #8
 8000446:	48b5      	ldr	r0, [pc, #724]	; (800071c <main+0x364>)
 8000448:	f000 ff0a 	bl	8001260 <usart6_tx_send>
		while (usart6_tx_is_busy());
 800044c:	bf00      	nop
 800044e:	f000 feed 	bl	800122c <usart6_tx_is_busy>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d1fa      	bne.n	800044e <main+0x96>
		delay(5000); // need to wait since this has no OK to receive
 8000458:	f241 3088 	movw	r0, #5000	; 0x1388
 800045c:	f000 fa02 	bl	8000864 <delay>
	 */
	for (;;) {

		/////////////////////////////////////////////////////////////
		// Get the current time (for internal clock ticking = ito lang ang ginagamit ko rin para magresend when it failed to receive 'OK')
		uint32_t current_time_wifi = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 8000460:	4baf      	ldr	r3, [pc, #700]	; (8000720 <main+0x368>)
 8000462:	685a      	ldr	r2, [r3, #4]
 8000464:	4613      	mov	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4413      	add	r3, r2
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		uint32_t current_send_data_time = irq_data.nr_tick * 10; // Assuming ticks are every 10ms
 8000470:	4bab      	ldr	r3, [pc, #684]	; (8000720 <main+0x368>)
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

		//---------------------------- ESP8266 Configuration -------------------------------------//
		//configuring the esp8266 here
		uint32_t delay_time = WIFI_COUNT_DELAY_MS;
 8000480:	f241 3388 	movw	r3, #5000	; 0x1388
 8000484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		if (wifi_status == 5 || wifi_status == 7) {
 8000488:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800048c:	2b05      	cmp	r3, #5
 800048e:	d003      	beq.n	8000498 <main+0xe0>
 8000490:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000494:	2b07      	cmp	r3, #7
 8000496:	d106      	bne.n	80004a6 <main+0xee>
			delay_time += ADDITIONAL_WIFI_DELAY_MS;
 8000498:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800049c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80004a0:	4413      	add	r3, r2
 80004a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		}
		if (current_time_wifi - last_wifi_count_time >= delay_time && wifi_status < 8) {
 80004a6:	4b9f      	ldr	r3, [pc, #636]	; (8000724 <main+0x36c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80004b4:	429a      	cmp	r2, r3
 80004b6:	f200 80e8 	bhi.w	800068a <main+0x2d2>
 80004ba:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80004be:	2b07      	cmp	r3, #7
 80004c0:	f200 80e3 	bhi.w	800068a <main+0x2d2>
			rxb6_size = rxb6_idx = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80004ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80004ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (wifi_status == 0){
 80004d2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d112      	bne.n	8000500 <main+0x148>
				if (!usart6_tx_is_busy()) {
 80004da:	f000 fea7 	bl	800122c <usart6_tx_is_busy>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d10d      	bne.n	8000500 <main+0x148>
					usart6_tx_send("AT\r\n", strlen("AT\r\n"));
 80004e4:	2104      	movs	r1, #4
 80004e6:	4890      	ldr	r0, [pc, #576]	; (8000728 <main+0x370>)
 80004e8:	f000 feba 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80004ec:	bf00      	nop
 80004ee:	f000 fe9d 	bl	800122c <usart6_tx_is_busy>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1fa      	bne.n	80004ee <main+0x136>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 80004f8:	4a8a      	ldr	r2, [pc, #552]	; (8000724 <main+0x36c>)
 80004fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80004fe:	6013      	str	r3, [r2, #0]
				}
			}

			//Set to client mode
			if (wifi_status == 1){
 8000500:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000504:	2b01      	cmp	r3, #1
 8000506:	d112      	bne.n	800052e <main+0x176>
				if (!usart6_tx_is_busy()) {
 8000508:	f000 fe90 	bl	800122c <usart6_tx_is_busy>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10d      	bne.n	800052e <main+0x176>
					usart6_tx_send("AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"));
 8000512:	210d      	movs	r1, #13
 8000514:	4885      	ldr	r0, [pc, #532]	; (800072c <main+0x374>)
 8000516:	f000 fea3 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 800051a:	bf00      	nop
 800051c:	f000 fe86 	bl	800122c <usart6_tx_is_busy>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1fa      	bne.n	800051c <main+0x164>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000526:	4a7f      	ldr	r2, [pc, #508]	; (8000724 <main+0x36c>)
 8000528:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800052c:	6013      	str	r3, [r2, #0]
				}
			}
			// join network
			if (wifi_status == 2){
 800052e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000532:	2b02      	cmp	r3, #2
 8000534:	d112      	bne.n	800055c <main+0x1a4>
				if (!usart6_tx_is_busy()) {
 8000536:	f000 fe79 	bl	800122c <usart6_tx_is_busy>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10d      	bne.n	800055c <main+0x1a4>
					usart6_tx_send("AT+CWJAP=\"JRS\",\"JarJarPlaysYT\"\r\n", strlen("AT+CWJAP=\"JRS\",\"JarJarPlaysYT\"\r\n"));
 8000540:	2120      	movs	r1, #32
 8000542:	487b      	ldr	r0, [pc, #492]	; (8000730 <main+0x378>)
 8000544:	f000 fe8c 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000548:	bf00      	nop
 800054a:	f000 fe6f 	bl	800122c <usart6_tx_is_busy>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1fa      	bne.n	800054a <main+0x192>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000554:	4a73      	ldr	r2, [pc, #460]	; (8000724 <main+0x36c>)
 8000556:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800055a:	6013      	str	r3, [r2, #0]
				}
			}

			// TCP/UDP connection to single
			if (wifi_status == 3){
 800055c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000560:	2b03      	cmp	r3, #3
 8000562:	d112      	bne.n	800058a <main+0x1d2>
				if (!usart6_tx_is_busy()) {
 8000564:	f000 fe62 	bl	800122c <usart6_tx_is_busy>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10d      	bne.n	800058a <main+0x1d2>
					usart6_tx_send("AT+CIPMUX=0\r\n", strlen("AT+CIPMUX=0\r\n"));
 800056e:	210d      	movs	r1, #13
 8000570:	4870      	ldr	r0, [pc, #448]	; (8000734 <main+0x37c>)
 8000572:	f000 fe75 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000576:	bf00      	nop
 8000578:	f000 fe58 	bl	800122c <usart6_tx_is_busy>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1fa      	bne.n	8000578 <main+0x1c0>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000582:	4a68      	ldr	r2, [pc, #416]	; (8000724 <main+0x36c>)
 8000584:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000588:	6013      	str	r3, [r2, #0]
				}
			}

			//================== Sending Data Portion ====================//
			// TCP setting
			if (wifi_status == 4){
 800058a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800058e:	2b04      	cmp	r3, #4
 8000590:	d115      	bne.n	80005be <main+0x206>
				if (!usart6_tx_is_busy()) {
 8000592:	f000 fe4b 	bl	800122c <usart6_tx_is_busy>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d110      	bne.n	80005be <main+0x206>
					usart6_tx_send("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", strlen("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"));
 800059c:	2128      	movs	r1, #40	; 0x28
 800059e:	4866      	ldr	r0, [pc, #408]	; (8000738 <main+0x380>)
 80005a0:	f000 fe5e 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 80005a4:	bf00      	nop
 80005a6:	f000 fe41 	bl	800122c <usart6_tx_is_busy>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1fa      	bne.n	80005a6 <main+0x1ee>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 80005b0:	4a5c      	ldr	r2, [pc, #368]	; (8000724 <main+0x36c>)
 80005b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80005b6:	6013      	str	r3, [r2, #0]
					wifi_setup = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
				}
			}

			// Preparing the sensor that we will send has the info on how long the data we are sending
			if (wifi_status == 5){
 80005be:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d13a      	bne.n	800063c <main+0x284>
				// Clear the buffer
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 80005c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005ca:	2264      	movs	r2, #100	; 0x64
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 feb8 	bl	8001344 <memset>
				rxb6_size = rxb6_idx = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80005da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80005de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				sprintf (local_buf1, "GET /update?api_key=3B2EYQ6U0BX62HES&field1=%d\r\n", holdValue);
 80005e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80005ea:	4954      	ldr	r1, [pc, #336]	; (800073c <main+0x384>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fe89 	bl	8001304 <siprintf>
				int len = strlen (local_buf1);
 80005f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fdf2 	bl	80001e0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800060a:	494d      	ldr	r1, [pc, #308]	; (8000740 <main+0x388>)
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fe79 	bl	8001304 <siprintf>
				if (!usart6_tx_is_busy()) {
 8000612:	f000 fe0b 	bl	800122c <usart6_tx_is_busy>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10f      	bne.n	800063c <main+0x284>
					usart6_tx_send(local_buf2, sizeof(local_buf2));
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	211e      	movs	r1, #30
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fe1c 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000628:	bf00      	nop
 800062a:	f000 fdff 	bl	800122c <usart6_tx_is_busy>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1fa      	bne.n	800062a <main+0x272>
					//Record the current time
					last_wifi_count_time = current_time_wifi;
 8000634:	4a3b      	ldr	r2, [pc, #236]	; (8000724 <main+0x36c>)
 8000636:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800063a:	6013      	str	r3, [r2, #0]
				}
			}
			// sending data with the API key
			if (wifi_status == 7 ){
 800063c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000640:	2b07      	cmp	r3, #7
 8000642:	d122      	bne.n	800068a <main+0x2d2>

				if (!usart6_tx_is_busy()) {
 8000644:	f000 fdf2 	bl	800122c <usart6_tx_is_busy>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d11d      	bne.n	800068a <main+0x2d2>
					// Clear the buffer
					memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 800064e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000652:	2264      	movs	r2, #100	; 0x64
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe74 	bl	8001344 <memset>
					rxb6_size = rxb6_idx = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000662:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000666:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
					usart6_tx_send(local_buf1, sizeof(local_buf1));
 800066a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800066e:	2164      	movs	r1, #100	; 0x64
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fdf5 	bl	8001260 <usart6_tx_send>
					while (usart6_tx_is_busy());
 8000676:	bf00      	nop
 8000678:	f000 fdd8 	bl	800122c <usart6_tx_is_busy>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1fa      	bne.n	8000678 <main+0x2c0>
					last_wifi_count_time = current_time_wifi;
 8000682:	4a28      	ldr	r2, [pc, #160]	; (8000724 <main+0x36c>)
 8000684:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000688:	6013      	str	r3, [r2, #0]

		}
		//----------------------- Portion where receiving "OK" in my code ------------------------//
		//---------------------------- DO NOT EDIT ANYTHING HERE ---------------------------------//

		if (wifi_status < 8) {//will turn this off when not supposed to be receiving from esp8266
 800068a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800068e:	2b07      	cmp	r3, #7
 8000690:	f200 80a5 	bhi.w	80007de <main+0x426>
		// Check for any data received via USART6. This is for the ESP8266
			do {
				if (!usart6_rx_get_event(&usart6_evt))
 8000694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fd97 	bl	80011cc <usart6_rx_get_event>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d036      	beq.n	8000712 <main+0x35a>
					// Nothing to do here
					break;
				else if (!usart6_evt.valid)
 80006a4:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d031      	beq.n	8000716 <main+0x35e>
				/*
				 * [1] If an IDLE is detected, update the size.
				 *
				 * [2] If no data is present, we're done.
				 */
				if (usart6_evt.is_idle) {
 80006b2:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d004      	beq.n	80006ca <main+0x312>
					rxb6_size = rxb6_idx;
 80006c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80006c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
					break;
 80006c8:	e03d      	b.n	8000746 <main+0x38e>
				} else if (!usart6_evt.has_data) {
 80006ca:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d035      	beq.n	8000744 <main+0x38c>
					break;
				}

				// Store the data
				if (rxb6_idx >= sizeof(rxb6_data)) {
 80006d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80006dc:	2b63      	cmp	r3, #99	; 0x63
 80006de:	d904      	bls.n	80006ea <main+0x332>
					rxb6_size = rxb6_idx;
 80006e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80006e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
					break;
 80006e8:	e02d      	b.n	8000746 <main+0x38e>
				}
				rxb6_data[rxb6_idx++] = usart6_evt.c;
 80006ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80006f4:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 80006f8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c94 	strb.w	r2, [r3, #-148]
				rxb6_data[rxb6_idx] = '\0';
 8000702:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000706:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800070a:	4413      	add	r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				break;
 8000710:	e019      	b.n	8000746 <main+0x38e>
					break;
 8000712:	bf00      	nop
 8000714:	e017      	b.n	8000746 <main+0x38e>
					break;
 8000716:	bf00      	nop
 8000718:	e015      	b.n	8000746 <main+0x38e>
 800071a:	bf00      	nop
 800071c:	08001cac 	.word	0x08001cac
 8000720:	2000006c 	.word	0x2000006c
 8000724:	20000074 	.word	0x20000074
 8000728:	08001cb8 	.word	0x08001cb8
 800072c:	08001cc0 	.word	0x08001cc0
 8000730:	08001cd0 	.word	0x08001cd0
 8000734:	08001cf4 	.word	0x08001cf4
 8000738:	08001d04 	.word	0x08001d04
 800073c:	08001d30 	.word	0x08001d30
 8000740:	08001d64 	.word	0x08001d64
					break;
 8000744:	bf00      	nop
			}while (0);


			// Checking if "OK" is received
			// after naging 8 ng wifi_status no need to check if okay was received
			if ((s = strstr(rxb6_data, "OK")) && (wifi_status != 5)) {
 8000746:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800074a:	4943      	ldr	r1, [pc, #268]	; (8000858 <main+0x4a0>)
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fe0e 	bl	800136e <strstr>
 8000752:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8000756:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800075a:	2b00      	cmp	r3, #0
 800075c:	d019      	beq.n	8000792 <main+0x3da>
 800075e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000762:	2b05      	cmp	r3, #5
 8000764:	d015      	beq.n	8000792 <main+0x3da>
				// Clear the buffer and increment wifi_status
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 8000766:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800076a:	2264      	movs	r2, #100	; 0x64
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fde8 	bl	8001344 <memset>
				rxb6_size = rxb6_idx = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800077a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800077e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				wifi_status += 1;
 8000782:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000786:	3301      	adds	r3, #1
 8000788:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				s = NULL;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			}
			if ((wifi_status == 5) && (s = strstr(rxb6_data, ">"))) {
 8000792:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000796:	2b05      	cmp	r3, #5
 8000798:	d121      	bne.n	80007de <main+0x426>
 800079a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800079e:	213e      	movs	r1, #62	; 0x3e
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fdd7 	bl	8001354 <strchr>
 80007a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 80007aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d015      	beq.n	80007de <main+0x426>
				// Clear the buffer and increment wifi_status
				memset(rxb6_data, 0, sizeof(rxb6_data)); // Clear the buffer
 80007b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007b6:	2264      	movs	r2, #100	; 0x64
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fdc2 	bl	8001344 <memset>
				rxb6_size = rxb6_idx = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80007c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				wifi_status += 2;
 80007ce:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80007d2:	3302      	adds	r3, #2
 80007d4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				s = NULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			}
		}
//-------------------------------------------------------------------------------------------------------------------------------------------------------//
		// ---------------------------------- PLACE YOUR CODE HERE ---------------------------//
		if (wifi_setup == 1) {
 80007de:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	f47f ae3c 	bne.w	8000460 <main+0xa8>

			//do your running code computations here then after the delay has been met it will automatically send data
			// NOTE: !! change yung variable ng nasa wifi_status == 5, its says your_variable !!

			if(GPIOA->IDR & (1<<10)){ // if motion is detected
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <main+0x4a4>)
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00c      	beq.n	800080e <main+0x456>
				// motion_count++;
				GPIOA->ODR |= (1<<5); // PA5 to HIGH
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <main+0x4a4>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <main+0x4a4>)
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	6153      	str	r3, [r2, #20]
				motionDetected = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				holdValue = 1; //holds value 1 until it gets sent to Thingspeak
 8000806:	2301      	movs	r3, #1
 8000808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800080c:	e008      	b.n	8000820 <main+0x468>
			}
			else{	// if motion is NOT detected
				GPIOA->ODR &= ~(1<<5); // PA5 to LOW
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <main+0x4a4>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <main+0x4a4>)
 8000814:	f023 0320 	bic.w	r3, r3, #32
 8000818:	6153      	str	r3, [r2, #20]
				motionDetected = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			}


			// Send the received data
			if (wifi_status == 8 && current_send_data_time - last_send_data_time >= SEND_DATA_DELAY) {
 8000820:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8000824:	2b08      	cmp	r3, #8
 8000826:	f47f ae1b 	bne.w	8000460 <main+0xa8>
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <main+0x4a8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000838:	4293      	cmp	r3, r2
 800083a:	f4ff ae11 	bcc.w	8000460 <main+0xa8>
				// Record the current time
				last_send_data_time = current_send_data_time;
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <main+0x4a8>)
 8000840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000844:	6013      	str	r3, [r2, #0]
				wifi_status -= 4;
 8000846:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800084a:	3b04      	subs	r3, #4
 800084c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				holdValue = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	for (;;) {
 8000856:	e603      	b.n	8000460 <main+0xa8>
 8000858:	08001d74 	.word	0x08001d74
 800085c:	40020000 	.word	0x40020000
 8000860:	20000078 	.word	0x20000078

08000864 <delay>:
	// This line is supposed to never be reached.
	return 1;
}

//delay; not accurate but just there for the initial reset, no need to be accurate since arbitrary chosen naman
void delay(int d){
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	int i;
	for(; d>0 ;d--){
 800086c:	e00c      	b.n	8000888 <delay+0x24>
		for(i =0; i<2657;i++);
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e002      	b.n	800087a <delay+0x16>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3301      	adds	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f5b3 6f26 	cmp.w	r3, #2656	; 0xa60
 8000880:	ddf8      	ble.n	8000874 <delay+0x10>
	for(; d>0 ;d--){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dcef      	bgt.n	800086e <delay+0xa>
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f000 fd66 	bl	800139c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	2000007c 	.word	0x2000007c
 8000904:	20000508 	.word	0x20000508

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <USART2_IRQHandler>:
static volatile unsigned int idx_rxf_1 = 0;
static volatile unsigned int idx_rxf_2 = 0;
static volatile unsigned int ctr_rxf = 0;
static volatile struct usart_rx_event fifo_rx[RXFIFO_LEN];
void USART2_IRQHandler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
	 * Notes:
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */
	unsigned int val_sr = USART2->SR;
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <USART2_IRQHandler+0x148>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr = USART2->DR;
 8000938:	4b4e      	ldr	r3, [pc, #312]	; (8000a74 <USART2_IRQHandler+0x148>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	60bb      	str	r3, [r7, #8]
	struct usart_rx_event evt = {
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]

	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */
	if (val_sr & (1 << 5)) {
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f003 0320 	and.w	r3, r3, #32
 8000948:	2b00      	cmp	r3, #0
 800094a:	d036      	beq.n	80009ba <USART2_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr & 0xff);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 8000952:	797b      	ldrb	r3, [r7, #5]
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	717b      	strb	r3, [r7, #5]
		
		// Parity errors can only be detected here.
		if (val_sr & (1 << 1)) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	2b00      	cmp	r3, #0
 800096a:	d015      	beq.n	8000998 <USART2_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr == 0) {
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10e      	bne.n	8000990 <USART2_IRQHandler+0x64>
				evt.is_break = 1;
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	f36f 03c3 	bfc	r3, #3, #1
 8000980:	717b      	strb	r3, [r7, #5]
				USART2->CR1 &= ~(1 << 5);
 8000982:	4b3c      	ldr	r3, [pc, #240]	; (8000a74 <USART2_IRQHandler+0x148>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	4a3b      	ldr	r2, [pc, #236]	; (8000a74 <USART2_IRQHandler+0x148>)
 8000988:	f023 0320 	bic.w	r3, r3, #32
 800098c:	60d3      	str	r3, [r2, #12]
 800098e:	e003      	b.n	8000998 <USART2_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	717b      	strb	r3, [r7, #5]
			}
		}
		if (val_sr & (1 << 0)) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <USART2_IRQHandler+0x8e>
			// Parity error detected (PE bit is set)
			evt.err_parity = 1;
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 80009aa:	797b      	ldrb	r3, [r7, #5]
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	f36f 03c3 	bfc	r3, #3, #1
 80009b8:	717b      	strb	r3, [r7, #5]
	
	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr & (1 << 4)) {
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00d      	beq.n	80009e0 <USART2_IRQHandler+0xb4>
		/*
		 * IDLE line
		 * 
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 80009c4:	797b      	ldrb	r3, [r7, #5]
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	717b      	strb	r3, [r7, #5]
		USART2->CR1 |= (1 << 5);
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <USART2_IRQHandler+0x148>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <USART2_IRQHandler+0x148>)
 80009da:	f043 0320 	orr.w	r3, r3, #32
 80009de:	60d3      	str	r3, [r2, #12]
	}
	
	// Put it into the RX FIFO queue
	if (evt.valid) {
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d018      	beq.n	8000a1e <USART2_IRQHandler+0xf2>
		fifo_rx[idx_rxf_1++] = evt;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <USART2_IRQHandler+0x14c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	4921      	ldr	r1, [pc, #132]	; (8000a78 <USART2_IRQHandler+0x14c>)
 80009f4:	600a      	str	r2, [r1, #0]
 80009f6:	4921      	ldr	r1, [pc, #132]	; (8000a7c <USART2_IRQHandler+0x150>)
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_1 >= RXFIFO_LEN)
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <USART2_IRQHandler+0x14c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b3f      	cmp	r3, #63	; 0x3f
 8000a04:	d902      	bls.n	8000a0c <USART2_IRQHandler+0xe0>
			idx_rxf_1 = 0;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <USART2_IRQHandler+0x14c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
		if (ctr_rxf < RXFIFO_LEN)
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <USART2_IRQHandler+0x154>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b3f      	cmp	r3, #63	; 0x3f
 8000a12:	d804      	bhi.n	8000a1e <USART2_IRQHandler+0xf2>
			++ctr_rxf;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <USART2_IRQHandler+0x154>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <USART2_IRQHandler+0x154>)
 8000a1c:	6013      	str	r3, [r2, #0]
	
	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr & (1 << 7)) {
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01e      	beq.n	8000a66 <USART2_IRQHandler+0x13a>
		 * Because TXE is only cleared by writing to the USART2_DR
		 * register, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len > 0) {
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <USART2_IRQHandler+0x158>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00e      	beq.n	8000a4e <USART2_IRQHandler+0x122>
			// Queue not empty
			USART2->DR = *(fifo_tx_buf++);
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <USART2_IRQHandler+0x15c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	4914      	ldr	r1, [pc, #80]	; (8000a88 <USART2_IRQHandler+0x15c>)
 8000a38:	600a      	str	r2, [r1, #0]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <USART2_IRQHandler+0x148>)
 8000a40:	605a      	str	r2, [r3, #4]
			--fifo_tx_len;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <USART2_IRQHandler+0x158>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <USART2_IRQHandler+0x158>)
 8000a4a:	6013      	str	r3, [r2, #0]
			USART2->CR1 &= ~(1 << 7);
			fifo_tx_len = 0;
			fifo_tx_buf = 0;
		}
	}
}
 8000a4c:	e00b      	b.n	8000a66 <USART2_IRQHandler+0x13a>
			USART2->CR1 &= ~(1 << 7);
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <USART2_IRQHandler+0x148>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <USART2_IRQHandler+0x148>)
 8000a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a58:	60d3      	str	r3, [r2, #12]
			fifo_tx_len = 0;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <USART2_IRQHandler+0x158>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
			fifo_tx_buf = 0;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <USART2_IRQHandler+0x15c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	20000088 	.word	0x20000088
 8000a7c:	20000094 	.word	0x20000094
 8000a80:	20000090 	.word	0x20000090
 8000a84:	20000084 	.word	0x20000084
 8000a88:	20000080 	.word	0x20000080

08000a8c <usart2_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART2
void usart2_init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_1 = 0;
 8000a90:	4b56      	ldr	r3, [pc, #344]	; (8000bec <usart2_init+0x160>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
	idx_rxf_2 = 0;
 8000a96:	4b56      	ldr	r3, [pc, #344]	; (8000bf0 <usart2_init+0x164>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
	ctr_rxf = 0;
 8000a9c:	4b55      	ldr	r3, [pc, #340]	; (8000bf4 <usart2_init+0x168>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	memset(fifo_rx, 0, sizeof(fifo_rx));
 8000aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4853      	ldr	r0, [pc, #332]	; (8000bf8 <usart2_init+0x16c>)
 8000aaa:	f000 fc4b 	bl	8001344 <memset>
	
	// Configure the GPIO first before configuring the USART.
	
	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA2 & PA3
 8000aae:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <usart2_init+0x170>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a52      	ldr	r2, [pc, #328]	; (8000bfc <usart2_init+0x170>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
	
	GPIOA->MODER &= ~(0b11 << 4);	// Set PA2 as input...
 8000aba:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <usart2_init+0x174>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a50      	ldr	r2, [pc, #320]	; (8000c00 <usart2_init+0x174>)
 8000ac0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ac4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 4);	// ... then set it as alternate function.
 8000ac6:	4b4e      	ldr	r3, [pc, #312]	; (8000c00 <usart2_init+0x174>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a4d      	ldr	r2, [pc, #308]	; (8000c00 <usart2_init+0x174>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 6);	// Set PA3 as input...
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <usart2_init+0x174>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a4a      	ldr	r2, [pc, #296]	; (8000c00 <usart2_init+0x174>)
 8000ad8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000adc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 6);	// ... then set it as alternate function.
 8000ade:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <usart2_init+0x174>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <usart2_init+0x174>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6013      	str	r3, [r2, #0]
	 * 
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 2);	// PA2 = push-pull output
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <usart2_init+0x174>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <usart2_init+0x174>)
 8000af0:	f023 0304 	bic.w	r3, r3, #4
 8000af4:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 4);	// High-speed mode
 8000af6:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <usart2_init+0x174>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4a41      	ldr	r2, [pc, #260]	; (8000c00 <usart2_init+0x174>)
 8000afc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000b00:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 * 
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 6);
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <usart2_init+0x174>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <usart2_init+0x174>)
 8000b08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b0c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 6);
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <usart2_init+0x174>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	4a3b      	ldr	r2, [pc, #236]	; (8000c00 <usart2_init+0x174>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 * 
	 * USART2_TX = AF07 @ PA2
	 * USART2_RX = AF07 @ PA3
	 */
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <usart2_init+0x174>)
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <usart2_init+0x174>)
 8000b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b24:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0x00007700);
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <usart2_init+0x174>)
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	4a35      	ldr	r2, [pc, #212]	; (8000c00 <usart2_init+0x174>)
 8000b2c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b30:	6213      	str	r3, [r2, #32]
	
	/////////////////////////////////////////////////////////////////////
	
	RCC->APB1ENR  |= (1 << 17);	// Enable USART2 peripheral
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <usart2_init+0x170>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <usart2_init+0x170>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1RSTR |= (1 << 17);	// Reset the whole peripheral
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <usart2_init+0x170>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <usart2_init+0x170>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~(1 << 17);
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <usart2_init+0x170>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a2b      	ldr	r2, [pc, #172]	; (8000bfc <usart2_init+0x170>)
 8000b50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b54:	6213      	str	r3, [r2, #32]
	
	/*
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */
	USART2->CR1 &= ~(0b11 << 2);
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <usart2_init+0x178>)
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <usart2_init+0x178>)
 8000b5c:	f023 030c 	bic.w	r3, r3, #12
 8000b60:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=  (1 << 13);
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <usart2_init+0x178>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <usart2_init+0x178>)
 8000b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b6c:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART2->BRR &= ~(0x0000FFFF);
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <usart2_init+0x178>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <usart2_init+0x178>)
 8000b74:	0c1b      	lsrs	r3, r3, #16
 8000b76:	041b      	lsls	r3, r3, #16
 8000b78:	6093      	str	r3, [r2, #8]
	USART2->BRR |=  (0x00000023); //23 yung 16mhz 460800baud(From the solution above we'll have 0001 0001 _ 0110) -> 0x0116
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <usart2_init+0x178>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <usart2_init+0x178>)
 8000b80:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8000b84:	6093      	str	r3, [r2, #8]
	USART2->CR1 &= ~(1 << 15);		// OVER8 = 0 //46 yung 16mhz 230400 baud
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <usart2_init+0x178>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <usart2_init+0x178>)
 8000b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b90:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <usart2_init+0x178>)
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <usart2_init+0x178>)
 8000b98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b9c:	6113      	str	r3, [r2, #16]
	USART2->CR1 &= ~(1 << 10);		// No parity
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <usart2_init+0x178>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <usart2_init+0x178>)
 8000ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ba8:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 * 
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART2->CR2 &= ~(1 << 11);
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <usart2_init+0x178>)
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <usart2_init+0x178>)
 8000bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bb4:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 * 
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART2->CR1 &= ~(1 << 12);
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <usart2_init+0x178>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <usart2_init+0x178>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bc0:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 * 
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART2->CR3 &= ~(0b11 << 8);
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <usart2_init+0x178>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <usart2_init+0x178>)
 8000bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bcc:	6153      	str	r3, [r2, #20]
	 * 
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */
	NVIC->IP[38] = (3 << 4);
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <usart2_init+0x17c>)
 8000bd0:	2230      	movs	r2, #48	; 0x30
 8000bd2:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 38 in the NVIC table would be at I{S/C}ER[1][6:6].
	 */
	NVIC->ISER[1] = (1 << 6);	// Note: Writing '0' is a no-op
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <usart2_init+0x17c>)
 8000bd8:	2240      	movs	r2, #64	; 0x40
 8000bda:	605a      	str	r2, [r3, #4]
	
	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART2->CR1 |= (0b1111 << 2);
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <usart2_init+0x178>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <usart2_init+0x178>)
 8000be2:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8000be6:	60d3      	str	r3, [r2, #12]
	return;
 8000be8:	bf00      	nop
}
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000088 	.word	0x20000088
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	20000090 	.word	0x20000090
 8000bf8:	20000094 	.word	0x20000094
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40004400 	.word	0x40004400
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <USART1_IRQHandler>:
static volatile unsigned int idx_rxf_11 = 0;
static volatile unsigned int idx_rxf_21 = 0;
static volatile unsigned int ctr_rxf1 = 0;
static volatile struct usart1_rx_event fifo_rx1[RXFIFO_LEN1];
void USART1_IRQHandler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */

	unsigned int val_sr1 = USART1->SR; // val_sr contains the configuration of status register
 8000c12:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr1 = USART1->DR; // val_dr contains the configuration of data register
 8000c18:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	60bb      	str	r3, [r7, #8]

	struct usart1_rx_event evt = {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */

	if (val_sr1 & (1 << 5)) {
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f003 0320 	and.w	r3, r3, #32
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d036      	beq.n	8000c9a <USART1_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set or bit 5 of SR is 1). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr1 & 0xff); // puts data (lower 8 bits of DR) into the character attribute of evt
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	717b      	strb	r3, [r7, #5]
		
		// Parity errors can only be detected here.
		if (val_sr1 & (1 << 1)) {
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d015      	beq.n	8000c78 <USART1_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr1 == 0 ) {
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10e      	bne.n	8000c70 <USART1_IRQHandler+0x64>
				//if data register is empty
				evt.is_break = 1;
 8000c52:	797b      	ldrb	r3, [r7, #5]
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	f36f 03c3 	bfc	r3, #3, #1
 8000c60:	717b      	strb	r3, [r7, #5]
				USART1->CR1 &= ~(1 << 5); //inhibits interrupt because there is no data yet
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	4a3b      	ldr	r2, [pc, #236]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000c68:	f023 0320 	bic.w	r3, r3, #32
 8000c6c:	60d3      	str	r3, [r2, #12]
 8000c6e:	e003      	b.n	8000c78 <USART1_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8000c70:	797b      	ldrb	r3, [r7, #5]
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	717b      	strb	r3, [r7, #5]
			}
		}
		
		if (val_sr1 & (1 << 0)) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00b      	beq.n	8000c9a <USART1_IRQHandler+0x8e>
			// Parity error detected (PE bit 0 of SR is set)
			evt.err_parity = 1;
 8000c82:	797b      	ldrb	r3, [r7, #5]
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	f36f 03c3 	bfc	r3, #3, #1
 8000c98:	717b      	strb	r3, [r7, #5]
	
	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr1 & (1 << 4)) {
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00d      	beq.n	8000cc0 <USART1_IRQHandler+0xb4>
		/*
		 * IDLE line is detected bit 4 is 1
		 * 
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8000cac:	797b      	ldrb	r3, [r7, #5]
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	717b      	strb	r3, [r7, #5]
		// set bit 5 RXNEIE to 1
		USART1->CR1 |= (1 << 5); // interrupt is generated whenever read data register is not empty and is ready to be read i.e RXNE bit 5 = 1
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4a26      	ldr	r2, [pc, #152]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	60d3      	str	r3, [r2, #12]
	}
	
	// Put it into the RX FIFO queue
	if (evt.valid) {
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d018      	beq.n	8000cfe <USART1_IRQHandler+0xf2>
		fifo_rx1[idx_rxf_11++] = evt; //stores evt at fifo_rx buffer at index 0 then increments indx by 1
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <USART1_IRQHandler+0x14c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	4921      	ldr	r1, [pc, #132]	; (8000d58 <USART1_IRQHandler+0x14c>)
 8000cd4:	600a      	str	r2, [r1, #0]
 8000cd6:	4921      	ldr	r1, [pc, #132]	; (8000d5c <USART1_IRQHandler+0x150>)
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_11 >= RXFIFO_LEN1)
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <USART1_IRQHandler+0x14c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce4:	d902      	bls.n	8000cec <USART1_IRQHandler+0xe0>
			idx_rxf_11 = 0; // meaning buffer is full
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <USART1_IRQHandler+0x14c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
		if (ctr_rxf1 < RXFIFO_LEN1)
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <USART1_IRQHandler+0x154>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf2:	d804      	bhi.n	8000cfe <USART1_IRQHandler+0xf2>
			++ctr_rxf1; // increments counter for receiveing buffer by 1 if buffer is not full
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <USART1_IRQHandler+0x154>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <USART1_IRQHandler+0x154>)
 8000cfc:	6013      	str	r3, [r2, #0]
	
	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr1 & (1 << 7)) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d01e      	beq.n	8000d46 <USART1_IRQHandler+0x13a>
		 * Because TXE bit 7 is only cleared by writing to the USART2_DR
		 * register i.e. not empty, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len1 > 0) {
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <USART1_IRQHandler+0x158>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00e      	beq.n	8000d2e <USART1_IRQHandler+0x122>
			// Queue not empty
			USART1->DR = *(fifo_tx_buf1++); //just iterates through the contents of the transmitter buffer
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <USART1_IRQHandler+0x15c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	4914      	ldr	r1, [pc, #80]	; (8000d68 <USART1_IRQHandler+0x15c>)
 8000d18:	600a      	str	r2, [r1, #0]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000d20:	605a      	str	r2, [r3, #4]
			--fifo_tx_len1; //subtracts the length of buffer
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <USART1_IRQHandler+0x158>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <USART1_IRQHandler+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
			USART1->CR1 &= ~(1 << 7); //disable interrupt
			fifo_tx_len1 = 0;
			fifo_tx_buf1 = 0;
		}
	}
}
 8000d2c:	e00b      	b.n	8000d46 <USART1_IRQHandler+0x13a>
			USART1->CR1 &= ~(1 << 7); //disable interrupt
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <USART1_IRQHandler+0x148>)
 8000d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d38:	60d3      	str	r3, [r2, #12]
			fifo_tx_len1 = 0;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <USART1_IRQHandler+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
			fifo_tx_buf1 = 0;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <USART1_IRQHandler+0x15c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40011000 	.word	0x40011000
 8000d58:	2000019c 	.word	0x2000019c
 8000d5c:	200001a8 	.word	0x200001a8
 8000d60:	200001a4 	.word	0x200001a4
 8000d64:	20000198 	.word	0x20000198
 8000d68:	20000194 	.word	0x20000194

08000d6c <usart1_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART1
void usart1_init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_11 = 0;
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <usart1_init+0x160>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
	idx_rxf_21 = 0;
 8000d76:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <usart1_init+0x164>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
	ctr_rxf1 = 0;
 8000d7c:	4b55      	ldr	r3, [pc, #340]	; (8000ed4 <usart1_init+0x168>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
	memset(fifo_rx1, 0, sizeof(fifo_rx1)); //fills a block with 0, starting address, value, and size of the memory block to be filled i.e. this initializes the buffer
 8000d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d86:	2100      	movs	r1, #0
 8000d88:	4853      	ldr	r0, [pc, #332]	; (8000ed8 <usart1_init+0x16c>)
 8000d8a:	f000 fadb 	bl	8001344 <memset>
	
	// Configure the GPIO first before configuring the USART.
	
	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA10 & PA9
 8000d8e:	4b53      	ldr	r3, [pc, #332]	; (8000edc <usart1_init+0x170>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a52      	ldr	r2, [pc, #328]	; (8000edc <usart1_init+0x170>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
	
	GPIOA->MODER &= ~(0b11 << 20);	// Set PA10 as input...
 8000d9a:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <usart1_init+0x174>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <usart1_init+0x174>)
 8000da0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000da4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 20);	// ... then set it as alternate function.
 8000da6:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <usart1_init+0x174>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <usart1_init+0x174>)
 8000dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 18);	// Set PA9 as input...
 8000db2:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <usart1_init+0x174>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a4a      	ldr	r2, [pc, #296]	; (8000ee0 <usart1_init+0x174>)
 8000db8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000dbc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 18);	// ... then set it as alternate function.
 8000dbe:	4b48      	ldr	r3, [pc, #288]	; (8000ee0 <usart1_init+0x174>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <usart1_init+0x174>)
 8000dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc8:	6013      	str	r3, [r2, #0]
	 * 
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 9);	// PA9 = push-pull output
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <usart1_init+0x174>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	4a44      	ldr	r2, [pc, #272]	; (8000ee0 <usart1_init+0x174>)
 8000dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dd4:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 18);	// High-speed mode
 8000dd6:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <usart1_init+0x174>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4a41      	ldr	r2, [pc, #260]	; (8000ee0 <usart1_init+0x174>)
 8000ddc:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000de0:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 * 
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 20);
 8000de2:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <usart1_init+0x174>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4a3e      	ldr	r2, [pc, #248]	; (8000ee0 <usart1_init+0x174>)
 8000de8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000dec:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 20);
 8000dee:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <usart1_init+0x174>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	4a3b      	ldr	r2, [pc, #236]	; (8000ee0 <usart1_init+0x174>)
 8000df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df8:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 * 
	 * USART1_TX = AF07 @ PA9
	 * USART1_RX = AF07 @ PA10
	 */
	GPIOA->AFR[1] &= ~(0x00000FF0);
 8000dfa:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <usart1_init+0x174>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <usart1_init+0x174>)
 8000e00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000e04:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00000770);
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <usart1_init+0x174>)
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	4a35      	ldr	r2, [pc, #212]	; (8000ee0 <usart1_init+0x174>)
 8000e0c:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000e10:	6253      	str	r3, [r2, #36]	; 0x24
	
	/////////////////////////////////////////////////////////////////////
	
	RCC->APB2ENR  |= (1 << 4);	// Enable USART1 peripheral clock enabled bit 17
 8000e12:	4b32      	ldr	r3, [pc, #200]	; (8000edc <usart1_init+0x170>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <usart1_init+0x170>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 4);	// Reset the whole peripheral resets usart 2
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <usart1_init+0x170>)
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <usart1_init+0x170>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 4);
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <usart1_init+0x170>)
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <usart1_init+0x170>)
 8000e30:	f023 0310 	bic.w	r3, r3, #16
 8000e34:	6253      	str	r3, [r2, #36]	; 0x24
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */

	 //pins 9 and 10 are in usart1 
	USART1->CR1 &= ~(0b11 << 2); //disable receiver
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <usart1_init+0x178>)
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <usart1_init+0x178>)
 8000e3c:	f023 030c 	bic.w	r3, r3, #12
 8000e40:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |=  (1 << 13); // usart enable 
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <usart1_init+0x178>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <usart1_init+0x178>)
 8000e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e4c:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART1->BRR &= ~(0x0000FFFF);
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <usart1_init+0x178>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <usart1_init+0x178>)
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	6093      	str	r3, [r2, #8]
	USART1->BRR |=  (0x0000003F);
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <usart1_init+0x178>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <usart1_init+0x178>)
 8000e60:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e64:	6093      	str	r3, [r2, #8]
	USART1->CR1 &= ~(1 << 15);		// OVER8 = 0
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <usart1_init+0x178>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <usart1_init+0x178>)
 8000e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e70:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <usart1_init+0x178>)
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <usart1_init+0x178>)
 8000e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e7c:	6113      	str	r3, [r2, #16]
	USART1->CR1 &= ~(1 << 10);		// No parity
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <usart1_init+0x178>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <usart1_init+0x178>)
 8000e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e88:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 * 
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART1->CR2 &= ~(1 << 11);
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <usart1_init+0x178>)
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <usart1_init+0x178>)
 8000e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e94:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 * 
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART1->CR1 &= ~(1 << 12);
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <usart1_init+0x178>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <usart1_init+0x178>)
 8000e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ea0:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 * 
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART1->CR3 &= ~(0b11 << 8);
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <usart1_init+0x178>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <usart1_init+0x178>)
 8000ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eac:	6153      	str	r3, [r2, #20]
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */

	NVIC->IP[37] = (3 << 4);
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <usart1_init+0x17c>)
 8000eb0:	2230      	movs	r2, #48	; 0x30
 8000eb2:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 37 in the NVIC table would be at I{S/C}ER[1][5:5].
	 */
	NVIC->ISER[1] = (1 << 5);	// Note: Writing '0' is a no-op
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <usart1_init+0x17c>)
 8000eb8:	2220      	movs	r2, #32
 8000eba:	605a      	str	r2, [r3, #4]
	
	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART1->CR1 |= (0b1111 << 2);
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <usart1_init+0x178>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <usart1_init+0x178>)
 8000ec2:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8000ec6:	60d3      	str	r3, [r2, #12]
	return;
 8000ec8:	bf00      	nop
}
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000019c 	.word	0x2000019c
 8000ed0:	200001a0 	.word	0x200001a0
 8000ed4:	200001a4 	.word	0x200001a4
 8000ed8:	200001a8 	.word	0x200001a8
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <USART6_IRQHandler>:
static volatile unsigned int idx_rxf_16 = 0;
static volatile unsigned int idx_rxf_26 = 0;
static volatile unsigned int ctr_rxf6 = 0;
static volatile struct usart6_rx_event fifo_rx6[RXFIFO_LEN6];
void USART6_IRQHandler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
	 * [1] SR and DR must both be read to clear any interrupt status.
	 * [2] SR must be read *before* DR; otherwise, certain events would be
	 *     lost.
	 */

	unsigned int val_sr6 = USART6->SR; // val_sr contains the configuration of status register
 8000ef2:	4b50      	ldr	r3, [pc, #320]	; (8001034 <USART6_IRQHandler+0x148>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60fb      	str	r3, [r7, #12]
	unsigned int val_dr6 = USART6->DR; // val_dr contains the configuration of data register
 8000ef8:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <USART6_IRQHandler+0x148>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60bb      	str	r3, [r7, #8]

	struct usart6_rx_event evt = {
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
	/*
	 * RX is more-urgent than TX, because we could lose data if we don't
	 * act fast enough. Thus, process it first.
	 */

	if (val_sr6 & (1 << 5)) {
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d036      	beq.n	8000f7a <USART6_IRQHandler+0x8e>
		/*
		 * There is an event for FIFO (RXNE is set or bit 5 of SR is 1). Process it and its
		 * allies.
		 */
		evt.c     = (val_dr6 & 0xff); // puts data (lower 8 bits of DR) into the character attribute of evt
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	713b      	strb	r3, [r7, #4]
		evt.valid = 1;
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	717b      	strb	r3, [r7, #5]
		evt.has_data = 1;
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	717b      	strb	r3, [r7, #5]

		// Parity errors can only be detected here.
		if (val_sr6 & (1 << 1)) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d015      	beq.n	8000f58 <USART6_IRQHandler+0x6c>
			 * Special case: If DR is zero, we assume a break and
			 * thus no further interrupts will occur on reception
			 * until IDLE is detected (which has its own interrupt
			 * line).
			 */
			if (val_dr6 == 0 ) {
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10e      	bne.n	8000f50 <USART6_IRQHandler+0x64>
				//if data register is empty
				evt.is_break = 1;
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	717b      	strb	r3, [r7, #5]
				evt.has_data = 0;
 8000f3a:	797b      	ldrb	r3, [r7, #5]
 8000f3c:	f36f 03c3 	bfc	r3, #3, #1
 8000f40:	717b      	strb	r3, [r7, #5]
				USART6->CR1 &= ~(1 << 5); //inhibits interrupt because there is no data yet
 8000f42:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <USART6_IRQHandler+0x148>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	4a3b      	ldr	r2, [pc, #236]	; (8001034 <USART6_IRQHandler+0x148>)
 8000f48:	f023 0320 	bic.w	r3, r3, #32
 8000f4c:	60d3      	str	r3, [r2, #12]
 8000f4e:	e003      	b.n	8000f58 <USART6_IRQHandler+0x6c>
			} else {
				// Other Frame error
				evt.err_frame = 1;
 8000f50:	797b      	ldrb	r3, [r7, #5]
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	717b      	strb	r3, [r7, #5]
			}
		}

		if (val_sr6 & (1 << 0)) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <USART6_IRQHandler+0x8e>
			// Parity error detected (PE bit 0 of SR is set)
			evt.err_parity = 1;
 8000f62:	797b      	ldrb	r3, [r7, #5]
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	717b      	strb	r3, [r7, #5]
			evt.err_frame = 1;
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	717b      	strb	r3, [r7, #5]
			evt.has_data = 0;
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	f36f 03c3 	bfc	r3, #3, #1
 8000f78:	717b      	strb	r3, [r7, #5]

	/*
	 * Check for any other RX errors/events that may have been detected by
	 * the peripheral.
	 */
	if (val_sr6 & (1 << 4)) {
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00d      	beq.n	8000fa0 <USART6_IRQHandler+0xb4>
		/*
		 * IDLE line is detected bit 4 is 1
		 *
		 * Re-enable the RXNE interrupt.
		 */
		evt.is_idle  = 1;
 8000f84:	797b      	ldrb	r3, [r7, #5]
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	717b      	strb	r3, [r7, #5]
		evt.valid = 1;
 8000f8c:	797b      	ldrb	r3, [r7, #5]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	717b      	strb	r3, [r7, #5]
		// set bit 5 RXNEIE to 1
		USART6->CR1 |= (1 << 5); // interrupt is generated whenever read data register is not empty and is ready to be read i.e RXNE bit 5 = 1
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <USART6_IRQHandler+0x148>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <USART6_IRQHandler+0x148>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	60d3      	str	r3, [r2, #12]
	}

	// Put it into the RX FIFO queue
	if (evt.valid) {
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d018      	beq.n	8000fde <USART6_IRQHandler+0xf2>
		fifo_rx6[idx_rxf_16++] = evt; //stores evt at fifo_rx buffer at index 0 then increments indx by 1
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <USART6_IRQHandler+0x14c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	4921      	ldr	r1, [pc, #132]	; (8001038 <USART6_IRQHandler+0x14c>)
 8000fb4:	600a      	str	r2, [r1, #0]
 8000fb6:	4921      	ldr	r1, [pc, #132]	; (800103c <USART6_IRQHandler+0x150>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (idx_rxf_16 >= RXFIFO_LEN6)
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <USART6_IRQHandler+0x14c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fc4:	d902      	bls.n	8000fcc <USART6_IRQHandler+0xe0>
			idx_rxf_16 = 0; // meaning buffer is full
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <USART6_IRQHandler+0x14c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
		if (ctr_rxf6 < RXFIFO_LEN6)
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <USART6_IRQHandler+0x154>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd2:	d804      	bhi.n	8000fde <USART6_IRQHandler+0xf2>
			++ctr_rxf6; // increments counter for receiveing buffer by 1 if buffer is not full
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <USART6_IRQHandler+0x154>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a19      	ldr	r2, [pc, #100]	; (8001040 <USART6_IRQHandler+0x154>)
 8000fdc:	6013      	str	r3, [r2, #0]

	/*
	 * The interrupt may have been generated as well for transmit events.
	 * Send out the next byte in the queue, if any.
	 */
	if (val_sr6 & (1 << 7)) {
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01e      	beq.n	8001026 <USART6_IRQHandler+0x13a>
		 * Because TXE bit 7 is only cleared by writing to the USART2_DR
		 * register i.e. not empty, the send routine just fills up the FIFO and
		 * enables TXEIE, which causes this routine to pick up the
		 * byte/s.
		 */
		if (fifo_tx_len6 > 0) {
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <USART6_IRQHandler+0x158>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <USART6_IRQHandler+0x122>
			// Queue not empty
			USART6->DR = *(fifo_tx_buf6++); //just iterates through the contents of the transmitter buffer
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <USART6_IRQHandler+0x15c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	4914      	ldr	r1, [pc, #80]	; (8001048 <USART6_IRQHandler+0x15c>)
 8000ff8:	600a      	str	r2, [r1, #0]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <USART6_IRQHandler+0x148>)
 8001000:	605a      	str	r2, [r3, #4]
			--fifo_tx_len6; //subtracts the length of buffer
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <USART6_IRQHandler+0x158>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <USART6_IRQHandler+0x158>)
 800100a:	6013      	str	r3, [r2, #0]
			USART6->CR1 &= ~(1 << 7); //disable interrupt
			fifo_tx_len6 = 0;
			fifo_tx_buf6 = 0;
		}
	}
}
 800100c:	e00b      	b.n	8001026 <USART6_IRQHandler+0x13a>
			USART6->CR1 &= ~(1 << 7); //disable interrupt
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <USART6_IRQHandler+0x148>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <USART6_IRQHandler+0x148>)
 8001014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001018:	60d3      	str	r3, [r2, #12]
			fifo_tx_len6 = 0;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <USART6_IRQHandler+0x158>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
			fifo_tx_buf6 = 0;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <USART6_IRQHandler+0x15c>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40011400 	.word	0x40011400
 8001038:	200002b0 	.word	0x200002b0
 800103c:	200002bc 	.word	0x200002bc
 8001040:	200002b8 	.word	0x200002b8
 8001044:	200002ac 	.word	0x200002ac
 8001048:	200002a8 	.word	0x200002a8

0800104c <usart6_init>:

////////////////////////////////////////////////////////////////////////////

// Initialize USART1
void usart6_init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	// Initialize the variables.
	idx_rxf_16 = 0;
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <usart6_init+0x160>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	idx_rxf_26 = 0;
 8001056:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <usart6_init+0x164>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	ctr_rxf6 =0;
 800105c:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <usart6_init+0x168>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	memset(fifo_rx6, 0, sizeof(fifo_rx6)); //fills a block with 0, starting address, value, and size of the memory block to be filled i.e. this initializes the buffer
 8001062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001066:	2100      	movs	r1, #0
 8001068:	4853      	ldr	r0, [pc, #332]	; (80011b8 <usart6_init+0x16c>)
 800106a:	f000 f96b 	bl	8001344 <memset>

	// Configure the GPIO first before configuring the USART.

	RCC->AHB1ENR |= (1 << 0);	// Enable GPIOA; needed for both PA10 & PA9
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <usart6_init+0x170>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a52      	ldr	r2, [pc, #328]	; (80011bc <usart6_init+0x170>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(0b11 << 22);	// Set PA11 as input...
 800107a:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <usart6_init+0x174>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <usart6_init+0x174>)
 8001080:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001084:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 22);	// ... then set it as alternate function.
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <usart6_init+0x174>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <usart6_init+0x174>)
 800108c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001090:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b11 << 24);	// Set PA12 as input ...
 8001092:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <usart6_init+0x174>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <usart6_init+0x174>)
 8001098:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800109c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 24);	// ... then set it as alternate function.
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <usart6_init+0x174>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <usart6_init+0x174>)
 80010a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a8:	6013      	str	r3, [r2, #0]
	 *
	 * - Push-pull output to get symmetrical drive; and
	 * - High-speed operation to avoid distorting the signal due to slew-
	 *   rate limiting.
	 */
	GPIOA->OTYPER &= ~(1 << 11);	// PA9 = push-pull output
 80010aa:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <usart6_init+0x174>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <usart6_init+0x174>)
 80010b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b4:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (0b11 << 22);	// High-speed mode
 80010b6:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <usart6_init+0x174>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a41      	ldr	r2, [pc, #260]	; (80011c0 <usart6_init+0x174>)
 80010bc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80010c0:	6093      	str	r3, [r2, #8]
	 * (that is, the remote peer is disconnected), activate the pull-down.
	 *
	 * In an USART, the break condition is represented by the 'space' level
	 * (LO) being sent continuously for more than a frame period.
	 */
	GPIOA->PUPDR &= ~(0b11 << 24);
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <usart6_init+0x174>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	4a3e      	ldr	r2, [pc, #248]	; (80011c0 <usart6_init+0x174>)
 80010c8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80010cc:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b10 << 24);
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <usart6_init+0x174>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <usart6_init+0x174>)
 80010d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d8:	60d3      	str	r3, [r2, #12]
	 * Set the AFR values:
	 *
	 * USART6_TX = AF08 @ PA11
	 * USART6_RX = AF08 @ PA12
	 */
	GPIOA->AFR[1] &= ~(0x000FF000);  // Clear bits for PA11
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <usart6_init+0x174>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <usart6_init+0x174>)
 80010e0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 80010e4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00088000);  // Set AF08 for PA11
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <usart6_init+0x174>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <usart6_init+0x174>)
 80010ec:	f443 2308 	orr.w	r3, r3, #557056	; 0x88000
 80010f0:	6253      	str	r3, [r2, #36]	; 0x24
	/////////////////////////////////////////////////////////////////////

	RCC->APB2ENR |= (1 << 5);   // Enable USART6 peripheral clock enabled bit 5
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <usart6_init+0x170>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <usart6_init+0x170>)
 80010f8:	f043 0320 	orr.w	r3, r3, #32
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 5);	// Reset the whole peripheral resets usart 2
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <usart6_init+0x170>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	4a2e      	ldr	r2, [pc, #184]	; (80011bc <usart6_init+0x170>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 5);
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <usart6_init+0x170>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <usart6_init+0x170>)
 8001110:	f023 0320 	bic.w	r3, r3, #32
 8001114:	6253      	str	r3, [r2, #36]	; 0x24
	 * Disable both transmitters and receivers for now, while
	 * (re-)configuration is in progress.
	 */

	 //pins 9 and 10 are in usart1
	USART6->CR1 &= ~(0b11 << 2); //disable receiver
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <usart6_init+0x178>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <usart6_init+0x178>)
 800111c:	f023 030c 	bic.w	r3, r3, #12
 8001120:	60d3      	str	r3, [r2, #12]
	USART6->CR1 |=  (1 << 13); // usart enable
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <usart6_init+0x178>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <usart6_init+0x178>)
 8001128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112c:	60d3      	str	r3, [r2, #12]
	 * effects at higher speeds, which ultimately limits the baud rate of
	 * simple UARTs to the hundred-kBaud range; though there are some
	 * that can reach 1.5Mbaud. Above such speeds, external clock
	 * synchronization must be used.
	 */
	USART6->BRR &= ~(0x0000FFFF);
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <usart6_init+0x178>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <usart6_init+0x178>)
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	6093      	str	r3, [r2, #8]
	USART6->BRR |=  (0x0000008B);   //115200 8bits basta same lang
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <usart6_init+0x178>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <usart6_init+0x178>)
 8001140:	f043 038b 	orr.w	r3, r3, #139	; 0x8b
 8001144:	6093      	str	r3, [r2, #8]
	USART6->CR1 &= ~(1 << 15);		// OVER8 = 0
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <usart6_init+0x178>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <usart6_init+0x178>)
 800114c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001150:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12);		// One (1) stop bit
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <usart6_init+0x178>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <usart6_init+0x178>)
 8001158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115c:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 10);		// No parity
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <usart6_init+0x178>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <usart6_init+0x178>)
 8001164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001168:	60d3      	str	r3, [r2, #12]
	 * (like SPI).
	 *
	 * PC-style UARTs have no such concept; for compatibility, this mode
	 * must be disabled (CLKEN=0).
	 */
	USART6->CR2 &= ~(1 << 11);
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <usart6_init+0x178>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <usart6_init+0x178>)
 8001170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001174:	6113      	str	r3, [r2, #16]
	 * mode, M must be cleared if parity is disabled, or set if parity
	 * is enabled.
	 *
	 * In our configuration, no parity is used; hence, M must be cleared.
	 */
	USART6->CR1 &= ~(1 << 12);
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <usart6_init+0x178>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <usart6_init+0x178>)
 800117c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001180:	60d3      	str	r3, [r2, #12]
	 * (RTS) and Clear-to-send (CTS) -- are used to manage data flow on
	 * the TX/RX lines.
	 *
	 * This system uses no such flow control; thus, disable them both.
	 */
	USART6->CR3 &= ~(0b11 << 8);
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <usart6_init+0x178>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <usart6_init+0x178>)
 8001188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800118c:	6153      	str	r3, [r2, #20]
	 * 	- External events
	 * 	- Timer events
	 * 	- Communications events
	 */

	NVIC->IP[71] = (3 << 4);
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <usart6_init+0x17c>)
 8001190:	2230      	movs	r2, #48	; 0x30
 8001192:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
	 * written '1' to disable the same interrupt. Writing '0' has no
	 * effect.
	 *
	 * Position 71 in the NVIC table would be at I{S/C}ER[2][7:7].
	 */
	NVIC->ISER[2] = (1 << 7);   // Note: Writing '0' is a no-op
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <usart6_init+0x17c>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	609a      	str	r2, [r3, #8]

	/*
	 * THESE NEED TO BE DONE LAST. Enable the interrupts, followed by the
	 * actual receiver and transmitter duo.
	 */
	USART6->CR1 |= (0b1111 << 2);
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <usart6_init+0x178>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <usart6_init+0x178>)
 80011a2:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80011a6:	60d3      	str	r3, [r2, #12]
	return;
 80011a8:	bf00      	nop
}
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002b0 	.word	0x200002b0
 80011b0:	200002b4 	.word	0x200002b4
 80011b4:	200002b8 	.word	0x200002b8
 80011b8:	200002bc 	.word	0x200002bc
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40011400 	.word	0x40011400
 80011c8:	e000e100 	.word	0xe000e100

080011cc <usart6_rx_get_event>:
	return;
}

// Get an event from the RX queue
bool usart6_rx_get_event(struct usart6_rx_event *evt)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (ctr_rxf6 > 0 && evt != 0) {
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <usart6_rx_get_event+0x54>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01a      	beq.n	8001212 <usart6_rx_get_event+0x46>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d017      	beq.n	8001212 <usart6_rx_get_event+0x46>
		*evt = fifo_rx6[idx_rxf_26++];
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <usart6_rx_get_event+0x58>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <usart6_rx_get_event+0x58>)
 80011ea:	600a      	str	r2, [r1, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <usart6_rx_get_event+0x5c>)
 80011f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011f4:	6013      	str	r3, [r2, #0]
		--ctr_rxf6;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <usart6_rx_get_event+0x54>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <usart6_rx_get_event+0x54>)
 80011fe:	6013      	str	r3, [r2, #0]
		if (idx_rxf_26 >= RXFIFO_LEN6)
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <usart6_rx_get_event+0x58>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b3f      	cmp	r3, #63	; 0x3f
 8001206:	d902      	bls.n	800120e <usart6_rx_get_event+0x42>
			idx_rxf_26 = 0;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <usart6_rx_get_event+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
		return true;
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <usart6_rx_get_event+0x48>
	} else {
		return false;
 8001212:	2300      	movs	r3, #0
	}
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	200002b8 	.word	0x200002b8
 8001224:	200002b4 	.word	0x200002b4
 8001228:	200002bc 	.word	0x200002bc

0800122c <usart6_tx_is_busy>:

// Enqueue a buffer to be transmitted
bool usart6_tx_is_busy(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	return (fifo_tx_buf6 != 0 || fifo_tx_len6 > 0);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <usart6_tx_is_busy+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <usart6_tx_is_busy+0x14>
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <usart6_tx_is_busy+0x30>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <usart6_tx_is_busy+0x18>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <usart6_tx_is_busy+0x1a>
 8001244:	2300      	movs	r3, #0
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200002a8 	.word	0x200002a8
 800125c:	200002ac 	.word	0x200002ac

08001260 <usart6_tx_send>:
bool usart6_tx_send(const char *buf, unsigned int len)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	if (fifo_tx_buf6 != 0 || fifo_tx_len6 > 0)
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <usart6_tx_send+0x44>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <usart6_tx_send+0x1a>
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <usart6_tx_send+0x48>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <usart6_tx_send+0x1e>
		return false;
 800127a:	2300      	movs	r3, #0
 800127c:	e00c      	b.n	8001298 <usart6_tx_send+0x38>

	fifo_tx_buf6 = buf;
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <usart6_tx_send+0x44>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
	fifo_tx_len6 = len;
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <usart6_tx_send+0x48>)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6013      	str	r3, [r2, #0]
	USART6->CR1 |= (1 << 7);
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <usart6_tx_send+0x4c>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <usart6_tx_send+0x4c>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	60d3      	str	r3, [r2, #12]
	return true;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200002a8 	.word	0x200002a8
 80012a8:	200002ac 	.word	0x200002ac
 80012ac:	40011400 	.word	0x40011400

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff fb15 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f000 f863 	bl	80013a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff f869 	bl	80003b8 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80012f4:	08001db4 	.word	0x08001db4
  ldr r2, =_sbss
 80012f8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80012fc:	20000504 	.word	0x20000504

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <siprintf>:
 8001304:	b40e      	push	{r1, r2, r3}
 8001306:	b500      	push	{lr}
 8001308:	b09c      	sub	sp, #112	; 0x70
 800130a:	ab1d      	add	r3, sp, #116	; 0x74
 800130c:	9002      	str	r0, [sp, #8]
 800130e:	9006      	str	r0, [sp, #24]
 8001310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <siprintf+0x38>)
 8001316:	9107      	str	r1, [sp, #28]
 8001318:	9104      	str	r1, [sp, #16]
 800131a:	4909      	ldr	r1, [pc, #36]	; (8001340 <siprintf+0x3c>)
 800131c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001320:	9105      	str	r1, [sp, #20]
 8001322:	6800      	ldr	r0, [r0, #0]
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	a902      	add	r1, sp, #8
 8001328:	f000 f9b6 	bl	8001698 <_svfiprintf_r>
 800132c:	9b02      	ldr	r3, [sp, #8]
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	b01c      	add	sp, #112	; 0x70
 8001334:	f85d eb04 	ldr.w	lr, [sp], #4
 8001338:	b003      	add	sp, #12
 800133a:	4770      	bx	lr
 800133c:	2000004c 	.word	0x2000004c
 8001340:	ffff0208 	.word	0xffff0208

08001344 <memset>:
 8001344:	4402      	add	r2, r0
 8001346:	4603      	mov	r3, r0
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <memset+0xa>
 800134c:	4770      	bx	lr
 800134e:	f803 1b01 	strb.w	r1, [r3], #1
 8001352:	e7f9      	b.n	8001348 <memset+0x4>

08001354 <strchr>:
 8001354:	b2c9      	uxtb	r1, r1
 8001356:	4603      	mov	r3, r0
 8001358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800135c:	b11a      	cbz	r2, 8001366 <strchr+0x12>
 800135e:	428a      	cmp	r2, r1
 8001360:	d1f9      	bne.n	8001356 <strchr+0x2>
 8001362:	4618      	mov	r0, r3
 8001364:	4770      	bx	lr
 8001366:	2900      	cmp	r1, #0
 8001368:	bf18      	it	ne
 800136a:	2300      	movne	r3, #0
 800136c:	e7f9      	b.n	8001362 <strchr+0xe>

0800136e <strstr>:
 800136e:	780a      	ldrb	r2, [r1, #0]
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	b96a      	cbnz	r2, 8001390 <strstr+0x22>
 8001374:	bd70      	pop	{r4, r5, r6, pc}
 8001376:	429a      	cmp	r2, r3
 8001378:	d109      	bne.n	800138e <strstr+0x20>
 800137a:	460c      	mov	r4, r1
 800137c:	4605      	mov	r5, r0
 800137e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f6      	beq.n	8001374 <strstr+0x6>
 8001386:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800138a:	429e      	cmp	r6, r3
 800138c:	d0f7      	beq.n	800137e <strstr+0x10>
 800138e:	3001      	adds	r0, #1
 8001390:	7803      	ldrb	r3, [r0, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ef      	bne.n	8001376 <strstr+0x8>
 8001396:	4618      	mov	r0, r3
 8001398:	e7ec      	b.n	8001374 <strstr+0x6>
	...

0800139c <__errno>:
 800139c:	4b01      	ldr	r3, [pc, #4]	; (80013a4 <__errno+0x8>)
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000004c 	.word	0x2000004c

080013a8 <__libc_init_array>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4d0d      	ldr	r5, [pc, #52]	; (80013e0 <__libc_init_array+0x38>)
 80013ac:	4c0d      	ldr	r4, [pc, #52]	; (80013e4 <__libc_init_array+0x3c>)
 80013ae:	1b64      	subs	r4, r4, r5
 80013b0:	10a4      	asrs	r4, r4, #2
 80013b2:	2600      	movs	r6, #0
 80013b4:	42a6      	cmp	r6, r4
 80013b6:	d109      	bne.n	80013cc <__libc_init_array+0x24>
 80013b8:	4d0b      	ldr	r5, [pc, #44]	; (80013e8 <__libc_init_array+0x40>)
 80013ba:	4c0c      	ldr	r4, [pc, #48]	; (80013ec <__libc_init_array+0x44>)
 80013bc:	f000 fc6a 	bl	8001c94 <_init>
 80013c0:	1b64      	subs	r4, r4, r5
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	2600      	movs	r6, #0
 80013c6:	42a6      	cmp	r6, r4
 80013c8:	d105      	bne.n	80013d6 <__libc_init_array+0x2e>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d0:	4798      	blx	r3
 80013d2:	3601      	adds	r6, #1
 80013d4:	e7ee      	b.n	80013b4 <__libc_init_array+0xc>
 80013d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013da:	4798      	blx	r3
 80013dc:	3601      	adds	r6, #1
 80013de:	e7f2      	b.n	80013c6 <__libc_init_array+0x1e>
 80013e0:	08001dac 	.word	0x08001dac
 80013e4:	08001dac 	.word	0x08001dac
 80013e8:	08001dac 	.word	0x08001dac
 80013ec:	08001db0 	.word	0x08001db0

080013f0 <__retarget_lock_acquire_recursive>:
 80013f0:	4770      	bx	lr

080013f2 <__retarget_lock_release_recursive>:
 80013f2:	4770      	bx	lr

080013f4 <_free_r>:
 80013f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013f6:	2900      	cmp	r1, #0
 80013f8:	d044      	beq.n	8001484 <_free_r+0x90>
 80013fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013fe:	9001      	str	r0, [sp, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f1a1 0404 	sub.w	r4, r1, #4
 8001406:	bfb8      	it	lt
 8001408:	18e4      	addlt	r4, r4, r3
 800140a:	f000 f8df 	bl	80015cc <__malloc_lock>
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <_free_r+0x94>)
 8001410:	9801      	ldr	r0, [sp, #4]
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	b933      	cbnz	r3, 8001424 <_free_r+0x30>
 8001416:	6063      	str	r3, [r4, #4]
 8001418:	6014      	str	r4, [r2, #0]
 800141a:	b003      	add	sp, #12
 800141c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001420:	f000 b8da 	b.w	80015d8 <__malloc_unlock>
 8001424:	42a3      	cmp	r3, r4
 8001426:	d908      	bls.n	800143a <_free_r+0x46>
 8001428:	6825      	ldr	r5, [r4, #0]
 800142a:	1961      	adds	r1, r4, r5
 800142c:	428b      	cmp	r3, r1
 800142e:	bf01      	itttt	eq
 8001430:	6819      	ldreq	r1, [r3, #0]
 8001432:	685b      	ldreq	r3, [r3, #4]
 8001434:	1949      	addeq	r1, r1, r5
 8001436:	6021      	streq	r1, [r4, #0]
 8001438:	e7ed      	b.n	8001416 <_free_r+0x22>
 800143a:	461a      	mov	r2, r3
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	b10b      	cbz	r3, 8001444 <_free_r+0x50>
 8001440:	42a3      	cmp	r3, r4
 8001442:	d9fa      	bls.n	800143a <_free_r+0x46>
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	1855      	adds	r5, r2, r1
 8001448:	42a5      	cmp	r5, r4
 800144a:	d10b      	bne.n	8001464 <_free_r+0x70>
 800144c:	6824      	ldr	r4, [r4, #0]
 800144e:	4421      	add	r1, r4
 8001450:	1854      	adds	r4, r2, r1
 8001452:	42a3      	cmp	r3, r4
 8001454:	6011      	str	r1, [r2, #0]
 8001456:	d1e0      	bne.n	800141a <_free_r+0x26>
 8001458:	681c      	ldr	r4, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	6053      	str	r3, [r2, #4]
 800145e:	440c      	add	r4, r1
 8001460:	6014      	str	r4, [r2, #0]
 8001462:	e7da      	b.n	800141a <_free_r+0x26>
 8001464:	d902      	bls.n	800146c <_free_r+0x78>
 8001466:	230c      	movs	r3, #12
 8001468:	6003      	str	r3, [r0, #0]
 800146a:	e7d6      	b.n	800141a <_free_r+0x26>
 800146c:	6825      	ldr	r5, [r4, #0]
 800146e:	1961      	adds	r1, r4, r5
 8001470:	428b      	cmp	r3, r1
 8001472:	bf04      	itt	eq
 8001474:	6819      	ldreq	r1, [r3, #0]
 8001476:	685b      	ldreq	r3, [r3, #4]
 8001478:	6063      	str	r3, [r4, #4]
 800147a:	bf04      	itt	eq
 800147c:	1949      	addeq	r1, r1, r5
 800147e:	6021      	streq	r1, [r4, #0]
 8001480:	6054      	str	r4, [r2, #4]
 8001482:	e7ca      	b.n	800141a <_free_r+0x26>
 8001484:	b003      	add	sp, #12
 8001486:	bd30      	pop	{r4, r5, pc}
 8001488:	200004fc 	.word	0x200004fc

0800148c <sbrk_aligned>:
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	4e0e      	ldr	r6, [pc, #56]	; (80014c8 <sbrk_aligned+0x3c>)
 8001490:	460c      	mov	r4, r1
 8001492:	6831      	ldr	r1, [r6, #0]
 8001494:	4605      	mov	r5, r0
 8001496:	b911      	cbnz	r1, 800149e <sbrk_aligned+0x12>
 8001498:	f000 fba6 	bl	8001be8 <_sbrk_r>
 800149c:	6030      	str	r0, [r6, #0]
 800149e:	4621      	mov	r1, r4
 80014a0:	4628      	mov	r0, r5
 80014a2:	f000 fba1 	bl	8001be8 <_sbrk_r>
 80014a6:	1c43      	adds	r3, r0, #1
 80014a8:	d00a      	beq.n	80014c0 <sbrk_aligned+0x34>
 80014aa:	1cc4      	adds	r4, r0, #3
 80014ac:	f024 0403 	bic.w	r4, r4, #3
 80014b0:	42a0      	cmp	r0, r4
 80014b2:	d007      	beq.n	80014c4 <sbrk_aligned+0x38>
 80014b4:	1a21      	subs	r1, r4, r0
 80014b6:	4628      	mov	r0, r5
 80014b8:	f000 fb96 	bl	8001be8 <_sbrk_r>
 80014bc:	3001      	adds	r0, #1
 80014be:	d101      	bne.n	80014c4 <sbrk_aligned+0x38>
 80014c0:	f04f 34ff 	mov.w	r4, #4294967295
 80014c4:	4620      	mov	r0, r4
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
 80014c8:	20000500 	.word	0x20000500

080014cc <_malloc_r>:
 80014cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014d0:	1ccd      	adds	r5, r1, #3
 80014d2:	f025 0503 	bic.w	r5, r5, #3
 80014d6:	3508      	adds	r5, #8
 80014d8:	2d0c      	cmp	r5, #12
 80014da:	bf38      	it	cc
 80014dc:	250c      	movcc	r5, #12
 80014de:	2d00      	cmp	r5, #0
 80014e0:	4607      	mov	r7, r0
 80014e2:	db01      	blt.n	80014e8 <_malloc_r+0x1c>
 80014e4:	42a9      	cmp	r1, r5
 80014e6:	d905      	bls.n	80014f4 <_malloc_r+0x28>
 80014e8:	230c      	movs	r3, #12
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	2600      	movs	r6, #0
 80014ee:	4630      	mov	r0, r6
 80014f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80015c8 <_malloc_r+0xfc>
 80014f8:	f000 f868 	bl	80015cc <__malloc_lock>
 80014fc:	f8d8 3000 	ldr.w	r3, [r8]
 8001500:	461c      	mov	r4, r3
 8001502:	bb5c      	cbnz	r4, 800155c <_malloc_r+0x90>
 8001504:	4629      	mov	r1, r5
 8001506:	4638      	mov	r0, r7
 8001508:	f7ff ffc0 	bl	800148c <sbrk_aligned>
 800150c:	1c43      	adds	r3, r0, #1
 800150e:	4604      	mov	r4, r0
 8001510:	d155      	bne.n	80015be <_malloc_r+0xf2>
 8001512:	f8d8 4000 	ldr.w	r4, [r8]
 8001516:	4626      	mov	r6, r4
 8001518:	2e00      	cmp	r6, #0
 800151a:	d145      	bne.n	80015a8 <_malloc_r+0xdc>
 800151c:	2c00      	cmp	r4, #0
 800151e:	d048      	beq.n	80015b2 <_malloc_r+0xe6>
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	4631      	mov	r1, r6
 8001524:	4638      	mov	r0, r7
 8001526:	eb04 0903 	add.w	r9, r4, r3
 800152a:	f000 fb5d 	bl	8001be8 <_sbrk_r>
 800152e:	4581      	cmp	r9, r0
 8001530:	d13f      	bne.n	80015b2 <_malloc_r+0xe6>
 8001532:	6821      	ldr	r1, [r4, #0]
 8001534:	1a6d      	subs	r5, r5, r1
 8001536:	4629      	mov	r1, r5
 8001538:	4638      	mov	r0, r7
 800153a:	f7ff ffa7 	bl	800148c <sbrk_aligned>
 800153e:	3001      	adds	r0, #1
 8001540:	d037      	beq.n	80015b2 <_malloc_r+0xe6>
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	442b      	add	r3, r5
 8001546:	6023      	str	r3, [r4, #0]
 8001548:	f8d8 3000 	ldr.w	r3, [r8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d038      	beq.n	80015c2 <_malloc_r+0xf6>
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	42a2      	cmp	r2, r4
 8001554:	d12b      	bne.n	80015ae <_malloc_r+0xe2>
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	e00f      	b.n	800157c <_malloc_r+0xb0>
 800155c:	6822      	ldr	r2, [r4, #0]
 800155e:	1b52      	subs	r2, r2, r5
 8001560:	d41f      	bmi.n	80015a2 <_malloc_r+0xd6>
 8001562:	2a0b      	cmp	r2, #11
 8001564:	d917      	bls.n	8001596 <_malloc_r+0xca>
 8001566:	1961      	adds	r1, r4, r5
 8001568:	42a3      	cmp	r3, r4
 800156a:	6025      	str	r5, [r4, #0]
 800156c:	bf18      	it	ne
 800156e:	6059      	strne	r1, [r3, #4]
 8001570:	6863      	ldr	r3, [r4, #4]
 8001572:	bf08      	it	eq
 8001574:	f8c8 1000 	streq.w	r1, [r8]
 8001578:	5162      	str	r2, [r4, r5]
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	4638      	mov	r0, r7
 800157e:	f104 060b 	add.w	r6, r4, #11
 8001582:	f000 f829 	bl	80015d8 <__malloc_unlock>
 8001586:	f026 0607 	bic.w	r6, r6, #7
 800158a:	1d23      	adds	r3, r4, #4
 800158c:	1af2      	subs	r2, r6, r3
 800158e:	d0ae      	beq.n	80014ee <_malloc_r+0x22>
 8001590:	1b9b      	subs	r3, r3, r6
 8001592:	50a3      	str	r3, [r4, r2]
 8001594:	e7ab      	b.n	80014ee <_malloc_r+0x22>
 8001596:	42a3      	cmp	r3, r4
 8001598:	6862      	ldr	r2, [r4, #4]
 800159a:	d1dd      	bne.n	8001558 <_malloc_r+0x8c>
 800159c:	f8c8 2000 	str.w	r2, [r8]
 80015a0:	e7ec      	b.n	800157c <_malloc_r+0xb0>
 80015a2:	4623      	mov	r3, r4
 80015a4:	6864      	ldr	r4, [r4, #4]
 80015a6:	e7ac      	b.n	8001502 <_malloc_r+0x36>
 80015a8:	4634      	mov	r4, r6
 80015aa:	6876      	ldr	r6, [r6, #4]
 80015ac:	e7b4      	b.n	8001518 <_malloc_r+0x4c>
 80015ae:	4613      	mov	r3, r2
 80015b0:	e7cc      	b.n	800154c <_malloc_r+0x80>
 80015b2:	230c      	movs	r3, #12
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4638      	mov	r0, r7
 80015b8:	f000 f80e 	bl	80015d8 <__malloc_unlock>
 80015bc:	e797      	b.n	80014ee <_malloc_r+0x22>
 80015be:	6025      	str	r5, [r4, #0]
 80015c0:	e7dc      	b.n	800157c <_malloc_r+0xb0>
 80015c2:	605b      	str	r3, [r3, #4]
 80015c4:	deff      	udf	#255	; 0xff
 80015c6:	bf00      	nop
 80015c8:	200004fc 	.word	0x200004fc

080015cc <__malloc_lock>:
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <__malloc_lock+0x8>)
 80015ce:	f7ff bf0f 	b.w	80013f0 <__retarget_lock_acquire_recursive>
 80015d2:	bf00      	nop
 80015d4:	200004f8 	.word	0x200004f8

080015d8 <__malloc_unlock>:
 80015d8:	4801      	ldr	r0, [pc, #4]	; (80015e0 <__malloc_unlock+0x8>)
 80015da:	f7ff bf0a 	b.w	80013f2 <__retarget_lock_release_recursive>
 80015de:	bf00      	nop
 80015e0:	200004f8 	.word	0x200004f8

080015e4 <__ssputs_r>:
 80015e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e8:	688e      	ldr	r6, [r1, #8]
 80015ea:	461f      	mov	r7, r3
 80015ec:	42be      	cmp	r6, r7
 80015ee:	680b      	ldr	r3, [r1, #0]
 80015f0:	4682      	mov	sl, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	4690      	mov	r8, r2
 80015f6:	d82c      	bhi.n	8001652 <__ssputs_r+0x6e>
 80015f8:	898a      	ldrh	r2, [r1, #12]
 80015fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80015fe:	d026      	beq.n	800164e <__ssputs_r+0x6a>
 8001600:	6965      	ldr	r5, [r4, #20]
 8001602:	6909      	ldr	r1, [r1, #16]
 8001604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001608:	eba3 0901 	sub.w	r9, r3, r1
 800160c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001610:	1c7b      	adds	r3, r7, #1
 8001612:	444b      	add	r3, r9
 8001614:	106d      	asrs	r5, r5, #1
 8001616:	429d      	cmp	r5, r3
 8001618:	bf38      	it	cc
 800161a:	461d      	movcc	r5, r3
 800161c:	0553      	lsls	r3, r2, #21
 800161e:	d527      	bpl.n	8001670 <__ssputs_r+0x8c>
 8001620:	4629      	mov	r1, r5
 8001622:	f7ff ff53 	bl	80014cc <_malloc_r>
 8001626:	4606      	mov	r6, r0
 8001628:	b360      	cbz	r0, 8001684 <__ssputs_r+0xa0>
 800162a:	6921      	ldr	r1, [r4, #16]
 800162c:	464a      	mov	r2, r9
 800162e:	f000 faeb 	bl	8001c08 <memcpy>
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	81a3      	strh	r3, [r4, #12]
 800163e:	6126      	str	r6, [r4, #16]
 8001640:	6165      	str	r5, [r4, #20]
 8001642:	444e      	add	r6, r9
 8001644:	eba5 0509 	sub.w	r5, r5, r9
 8001648:	6026      	str	r6, [r4, #0]
 800164a:	60a5      	str	r5, [r4, #8]
 800164c:	463e      	mov	r6, r7
 800164e:	42be      	cmp	r6, r7
 8001650:	d900      	bls.n	8001654 <__ssputs_r+0x70>
 8001652:	463e      	mov	r6, r7
 8001654:	6820      	ldr	r0, [r4, #0]
 8001656:	4632      	mov	r2, r6
 8001658:	4641      	mov	r1, r8
 800165a:	f000 faab 	bl	8001bb4 <memmove>
 800165e:	68a3      	ldr	r3, [r4, #8]
 8001660:	1b9b      	subs	r3, r3, r6
 8001662:	60a3      	str	r3, [r4, #8]
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	4433      	add	r3, r6
 8001668:	6023      	str	r3, [r4, #0]
 800166a:	2000      	movs	r0, #0
 800166c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001670:	462a      	mov	r2, r5
 8001672:	f000 fad7 	bl	8001c24 <_realloc_r>
 8001676:	4606      	mov	r6, r0
 8001678:	2800      	cmp	r0, #0
 800167a:	d1e0      	bne.n	800163e <__ssputs_r+0x5a>
 800167c:	6921      	ldr	r1, [r4, #16]
 800167e:	4650      	mov	r0, sl
 8001680:	f7ff feb8 	bl	80013f4 <_free_r>
 8001684:	230c      	movs	r3, #12
 8001686:	f8ca 3000 	str.w	r3, [sl]
 800168a:	89a3      	ldrh	r3, [r4, #12]
 800168c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001690:	81a3      	strh	r3, [r4, #12]
 8001692:	f04f 30ff 	mov.w	r0, #4294967295
 8001696:	e7e9      	b.n	800166c <__ssputs_r+0x88>

08001698 <_svfiprintf_r>:
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169c:	4698      	mov	r8, r3
 800169e:	898b      	ldrh	r3, [r1, #12]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	b09d      	sub	sp, #116	; 0x74
 80016a4:	4607      	mov	r7, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	d50e      	bpl.n	80016ca <_svfiprintf_r+0x32>
 80016ac:	690b      	ldr	r3, [r1, #16]
 80016ae:	b963      	cbnz	r3, 80016ca <_svfiprintf_r+0x32>
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	f7ff ff0b 	bl	80014cc <_malloc_r>
 80016b6:	6028      	str	r0, [r5, #0]
 80016b8:	6128      	str	r0, [r5, #16]
 80016ba:	b920      	cbnz	r0, 80016c6 <_svfiprintf_r+0x2e>
 80016bc:	230c      	movs	r3, #12
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	e0d0      	b.n	8001868 <_svfiprintf_r+0x1d0>
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	616b      	str	r3, [r5, #20]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9309      	str	r3, [sp, #36]	; 0x24
 80016ce:	2320      	movs	r3, #32
 80016d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80016d8:	2330      	movs	r3, #48	; 0x30
 80016da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001880 <_svfiprintf_r+0x1e8>
 80016de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016e2:	f04f 0901 	mov.w	r9, #1
 80016e6:	4623      	mov	r3, r4
 80016e8:	469a      	mov	sl, r3
 80016ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016ee:	b10a      	cbz	r2, 80016f4 <_svfiprintf_r+0x5c>
 80016f0:	2a25      	cmp	r2, #37	; 0x25
 80016f2:	d1f9      	bne.n	80016e8 <_svfiprintf_r+0x50>
 80016f4:	ebba 0b04 	subs.w	fp, sl, r4
 80016f8:	d00b      	beq.n	8001712 <_svfiprintf_r+0x7a>
 80016fa:	465b      	mov	r3, fp
 80016fc:	4622      	mov	r2, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	4638      	mov	r0, r7
 8001702:	f7ff ff6f 	bl	80015e4 <__ssputs_r>
 8001706:	3001      	adds	r0, #1
 8001708:	f000 80a9 	beq.w	800185e <_svfiprintf_r+0x1c6>
 800170c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800170e:	445a      	add	r2, fp
 8001710:	9209      	str	r2, [sp, #36]	; 0x24
 8001712:	f89a 3000 	ldrb.w	r3, [sl]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80a1 	beq.w	800185e <_svfiprintf_r+0x1c6>
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 32ff 	mov.w	r2, #4294967295
 8001722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001726:	f10a 0a01 	add.w	sl, sl, #1
 800172a:	9304      	str	r3, [sp, #16]
 800172c:	9307      	str	r3, [sp, #28]
 800172e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001732:	931a      	str	r3, [sp, #104]	; 0x68
 8001734:	4654      	mov	r4, sl
 8001736:	2205      	movs	r2, #5
 8001738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800173c:	4850      	ldr	r0, [pc, #320]	; (8001880 <_svfiprintf_r+0x1e8>)
 800173e:	f7fe fd57 	bl	80001f0 <memchr>
 8001742:	9a04      	ldr	r2, [sp, #16]
 8001744:	b9d8      	cbnz	r0, 800177e <_svfiprintf_r+0xe6>
 8001746:	06d0      	lsls	r0, r2, #27
 8001748:	bf44      	itt	mi
 800174a:	2320      	movmi	r3, #32
 800174c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001750:	0711      	lsls	r1, r2, #28
 8001752:	bf44      	itt	mi
 8001754:	232b      	movmi	r3, #43	; 0x2b
 8001756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800175a:	f89a 3000 	ldrb.w	r3, [sl]
 800175e:	2b2a      	cmp	r3, #42	; 0x2a
 8001760:	d015      	beq.n	800178e <_svfiprintf_r+0xf6>
 8001762:	9a07      	ldr	r2, [sp, #28]
 8001764:	4654      	mov	r4, sl
 8001766:	2000      	movs	r0, #0
 8001768:	f04f 0c0a 	mov.w	ip, #10
 800176c:	4621      	mov	r1, r4
 800176e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001772:	3b30      	subs	r3, #48	; 0x30
 8001774:	2b09      	cmp	r3, #9
 8001776:	d94d      	bls.n	8001814 <_svfiprintf_r+0x17c>
 8001778:	b1b0      	cbz	r0, 80017a8 <_svfiprintf_r+0x110>
 800177a:	9207      	str	r2, [sp, #28]
 800177c:	e014      	b.n	80017a8 <_svfiprintf_r+0x110>
 800177e:	eba0 0308 	sub.w	r3, r0, r8
 8001782:	fa09 f303 	lsl.w	r3, r9, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	9304      	str	r3, [sp, #16]
 800178a:	46a2      	mov	sl, r4
 800178c:	e7d2      	b.n	8001734 <_svfiprintf_r+0x9c>
 800178e:	9b03      	ldr	r3, [sp, #12]
 8001790:	1d19      	adds	r1, r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	9103      	str	r1, [sp, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	bfbb      	ittet	lt
 800179a:	425b      	neglt	r3, r3
 800179c:	f042 0202 	orrlt.w	r2, r2, #2
 80017a0:	9307      	strge	r3, [sp, #28]
 80017a2:	9307      	strlt	r3, [sp, #28]
 80017a4:	bfb8      	it	lt
 80017a6:	9204      	strlt	r2, [sp, #16]
 80017a8:	7823      	ldrb	r3, [r4, #0]
 80017aa:	2b2e      	cmp	r3, #46	; 0x2e
 80017ac:	d10c      	bne.n	80017c8 <_svfiprintf_r+0x130>
 80017ae:	7863      	ldrb	r3, [r4, #1]
 80017b0:	2b2a      	cmp	r3, #42	; 0x2a
 80017b2:	d134      	bne.n	800181e <_svfiprintf_r+0x186>
 80017b4:	9b03      	ldr	r3, [sp, #12]
 80017b6:	1d1a      	adds	r2, r3, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	9203      	str	r2, [sp, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bfb8      	it	lt
 80017c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80017c4:	3402      	adds	r4, #2
 80017c6:	9305      	str	r3, [sp, #20]
 80017c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001890 <_svfiprintf_r+0x1f8>
 80017cc:	7821      	ldrb	r1, [r4, #0]
 80017ce:	2203      	movs	r2, #3
 80017d0:	4650      	mov	r0, sl
 80017d2:	f7fe fd0d 	bl	80001f0 <memchr>
 80017d6:	b138      	cbz	r0, 80017e8 <_svfiprintf_r+0x150>
 80017d8:	9b04      	ldr	r3, [sp, #16]
 80017da:	eba0 000a 	sub.w	r0, r0, sl
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	4082      	lsls	r2, r0
 80017e2:	4313      	orrs	r3, r2
 80017e4:	3401      	adds	r4, #1
 80017e6:	9304      	str	r3, [sp, #16]
 80017e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ec:	4825      	ldr	r0, [pc, #148]	; (8001884 <_svfiprintf_r+0x1ec>)
 80017ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017f2:	2206      	movs	r2, #6
 80017f4:	f7fe fcfc 	bl	80001f0 <memchr>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d038      	beq.n	800186e <_svfiprintf_r+0x1d6>
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <_svfiprintf_r+0x1f0>)
 80017fe:	bb1b      	cbnz	r3, 8001848 <_svfiprintf_r+0x1b0>
 8001800:	9b03      	ldr	r3, [sp, #12]
 8001802:	3307      	adds	r3, #7
 8001804:	f023 0307 	bic.w	r3, r3, #7
 8001808:	3308      	adds	r3, #8
 800180a:	9303      	str	r3, [sp, #12]
 800180c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800180e:	4433      	add	r3, r6
 8001810:	9309      	str	r3, [sp, #36]	; 0x24
 8001812:	e768      	b.n	80016e6 <_svfiprintf_r+0x4e>
 8001814:	fb0c 3202 	mla	r2, ip, r2, r3
 8001818:	460c      	mov	r4, r1
 800181a:	2001      	movs	r0, #1
 800181c:	e7a6      	b.n	800176c <_svfiprintf_r+0xd4>
 800181e:	2300      	movs	r3, #0
 8001820:	3401      	adds	r4, #1
 8001822:	9305      	str	r3, [sp, #20]
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0c0a 	mov.w	ip, #10
 800182a:	4620      	mov	r0, r4
 800182c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001830:	3a30      	subs	r2, #48	; 0x30
 8001832:	2a09      	cmp	r2, #9
 8001834:	d903      	bls.n	800183e <_svfiprintf_r+0x1a6>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0c6      	beq.n	80017c8 <_svfiprintf_r+0x130>
 800183a:	9105      	str	r1, [sp, #20]
 800183c:	e7c4      	b.n	80017c8 <_svfiprintf_r+0x130>
 800183e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001842:	4604      	mov	r4, r0
 8001844:	2301      	movs	r3, #1
 8001846:	e7f0      	b.n	800182a <_svfiprintf_r+0x192>
 8001848:	ab03      	add	r3, sp, #12
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	462a      	mov	r2, r5
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <_svfiprintf_r+0x1f4>)
 8001850:	a904      	add	r1, sp, #16
 8001852:	4638      	mov	r0, r7
 8001854:	f3af 8000 	nop.w
 8001858:	1c42      	adds	r2, r0, #1
 800185a:	4606      	mov	r6, r0
 800185c:	d1d6      	bne.n	800180c <_svfiprintf_r+0x174>
 800185e:	89ab      	ldrh	r3, [r5, #12]
 8001860:	065b      	lsls	r3, r3, #25
 8001862:	f53f af2d 	bmi.w	80016c0 <_svfiprintf_r+0x28>
 8001866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001868:	b01d      	add	sp, #116	; 0x74
 800186a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800186e:	ab03      	add	r3, sp, #12
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	462a      	mov	r2, r5
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <_svfiprintf_r+0x1f4>)
 8001876:	a904      	add	r1, sp, #16
 8001878:	4638      	mov	r0, r7
 800187a:	f000 f879 	bl	8001970 <_printf_i>
 800187e:	e7eb      	b.n	8001858 <_svfiprintf_r+0x1c0>
 8001880:	08001d77 	.word	0x08001d77
 8001884:	08001d81 	.word	0x08001d81
 8001888:	00000000 	.word	0x00000000
 800188c:	080015e5 	.word	0x080015e5
 8001890:	08001d7d 	.word	0x08001d7d

08001894 <_printf_common>:
 8001894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001898:	4616      	mov	r6, r2
 800189a:	4699      	mov	r9, r3
 800189c:	688a      	ldr	r2, [r1, #8]
 800189e:	690b      	ldr	r3, [r1, #16]
 80018a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bfb8      	it	lt
 80018a8:	4613      	movlt	r3, r2
 80018aa:	6033      	str	r3, [r6, #0]
 80018ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018b0:	4607      	mov	r7, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	b10a      	cbz	r2, 80018ba <_printf_common+0x26>
 80018b6:	3301      	adds	r3, #1
 80018b8:	6033      	str	r3, [r6, #0]
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	0699      	lsls	r1, r3, #26
 80018be:	bf42      	ittt	mi
 80018c0:	6833      	ldrmi	r3, [r6, #0]
 80018c2:	3302      	addmi	r3, #2
 80018c4:	6033      	strmi	r3, [r6, #0]
 80018c6:	6825      	ldr	r5, [r4, #0]
 80018c8:	f015 0506 	ands.w	r5, r5, #6
 80018cc:	d106      	bne.n	80018dc <_printf_common+0x48>
 80018ce:	f104 0a19 	add.w	sl, r4, #25
 80018d2:	68e3      	ldr	r3, [r4, #12]
 80018d4:	6832      	ldr	r2, [r6, #0]
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	42ab      	cmp	r3, r5
 80018da:	dc26      	bgt.n	800192a <_printf_common+0x96>
 80018dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018e0:	1e13      	subs	r3, r2, #0
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	bf18      	it	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	0692      	lsls	r2, r2, #26
 80018ea:	d42b      	bmi.n	8001944 <_printf_common+0xb0>
 80018ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018f0:	4649      	mov	r1, r9
 80018f2:	4638      	mov	r0, r7
 80018f4:	47c0      	blx	r8
 80018f6:	3001      	adds	r0, #1
 80018f8:	d01e      	beq.n	8001938 <_printf_common+0xa4>
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	6922      	ldr	r2, [r4, #16]
 80018fe:	f003 0306 	and.w	r3, r3, #6
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf02      	ittt	eq
 8001906:	68e5      	ldreq	r5, [r4, #12]
 8001908:	6833      	ldreq	r3, [r6, #0]
 800190a:	1aed      	subeq	r5, r5, r3
 800190c:	68a3      	ldr	r3, [r4, #8]
 800190e:	bf0c      	ite	eq
 8001910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001914:	2500      	movne	r5, #0
 8001916:	4293      	cmp	r3, r2
 8001918:	bfc4      	itt	gt
 800191a:	1a9b      	subgt	r3, r3, r2
 800191c:	18ed      	addgt	r5, r5, r3
 800191e:	2600      	movs	r6, #0
 8001920:	341a      	adds	r4, #26
 8001922:	42b5      	cmp	r5, r6
 8001924:	d11a      	bne.n	800195c <_printf_common+0xc8>
 8001926:	2000      	movs	r0, #0
 8001928:	e008      	b.n	800193c <_printf_common+0xa8>
 800192a:	2301      	movs	r3, #1
 800192c:	4652      	mov	r2, sl
 800192e:	4649      	mov	r1, r9
 8001930:	4638      	mov	r0, r7
 8001932:	47c0      	blx	r8
 8001934:	3001      	adds	r0, #1
 8001936:	d103      	bne.n	8001940 <_printf_common+0xac>
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001940:	3501      	adds	r5, #1
 8001942:	e7c6      	b.n	80018d2 <_printf_common+0x3e>
 8001944:	18e1      	adds	r1, r4, r3
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	2030      	movs	r0, #48	; 0x30
 800194a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800194e:	4422      	add	r2, r4
 8001950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001958:	3302      	adds	r3, #2
 800195a:	e7c7      	b.n	80018ec <_printf_common+0x58>
 800195c:	2301      	movs	r3, #1
 800195e:	4622      	mov	r2, r4
 8001960:	4649      	mov	r1, r9
 8001962:	4638      	mov	r0, r7
 8001964:	47c0      	blx	r8
 8001966:	3001      	adds	r0, #1
 8001968:	d0e6      	beq.n	8001938 <_printf_common+0xa4>
 800196a:	3601      	adds	r6, #1
 800196c:	e7d9      	b.n	8001922 <_printf_common+0x8e>
	...

08001970 <_printf_i>:
 8001970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001974:	7e0f      	ldrb	r7, [r1, #24]
 8001976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001978:	2f78      	cmp	r7, #120	; 0x78
 800197a:	4691      	mov	r9, r2
 800197c:	4680      	mov	r8, r0
 800197e:	460c      	mov	r4, r1
 8001980:	469a      	mov	sl, r3
 8001982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001986:	d807      	bhi.n	8001998 <_printf_i+0x28>
 8001988:	2f62      	cmp	r7, #98	; 0x62
 800198a:	d80a      	bhi.n	80019a2 <_printf_i+0x32>
 800198c:	2f00      	cmp	r7, #0
 800198e:	f000 80d4 	beq.w	8001b3a <_printf_i+0x1ca>
 8001992:	2f58      	cmp	r7, #88	; 0x58
 8001994:	f000 80c0 	beq.w	8001b18 <_printf_i+0x1a8>
 8001998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800199c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019a0:	e03a      	b.n	8001a18 <_printf_i+0xa8>
 80019a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019a6:	2b15      	cmp	r3, #21
 80019a8:	d8f6      	bhi.n	8001998 <_printf_i+0x28>
 80019aa:	a101      	add	r1, pc, #4	; (adr r1, 80019b0 <_printf_i+0x40>)
 80019ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019b0:	08001a09 	.word	0x08001a09
 80019b4:	08001a1d 	.word	0x08001a1d
 80019b8:	08001999 	.word	0x08001999
 80019bc:	08001999 	.word	0x08001999
 80019c0:	08001999 	.word	0x08001999
 80019c4:	08001999 	.word	0x08001999
 80019c8:	08001a1d 	.word	0x08001a1d
 80019cc:	08001999 	.word	0x08001999
 80019d0:	08001999 	.word	0x08001999
 80019d4:	08001999 	.word	0x08001999
 80019d8:	08001999 	.word	0x08001999
 80019dc:	08001b21 	.word	0x08001b21
 80019e0:	08001a49 	.word	0x08001a49
 80019e4:	08001adb 	.word	0x08001adb
 80019e8:	08001999 	.word	0x08001999
 80019ec:	08001999 	.word	0x08001999
 80019f0:	08001b43 	.word	0x08001b43
 80019f4:	08001999 	.word	0x08001999
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001999 	.word	0x08001999
 8001a00:	08001999 	.word	0x08001999
 8001a04:	08001ae3 	.word	0x08001ae3
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	1d1a      	adds	r2, r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	602a      	str	r2, [r5, #0]
 8001a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e09f      	b.n	8001b5c <_printf_i+0x1ec>
 8001a1c:	6820      	ldr	r0, [r4, #0]
 8001a1e:	682b      	ldr	r3, [r5, #0]
 8001a20:	0607      	lsls	r7, r0, #24
 8001a22:	f103 0104 	add.w	r1, r3, #4
 8001a26:	6029      	str	r1, [r5, #0]
 8001a28:	d501      	bpl.n	8001a2e <_printf_i+0xbe>
 8001a2a:	681e      	ldr	r6, [r3, #0]
 8001a2c:	e003      	b.n	8001a36 <_printf_i+0xc6>
 8001a2e:	0646      	lsls	r6, r0, #25
 8001a30:	d5fb      	bpl.n	8001a2a <_printf_i+0xba>
 8001a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001a36:	2e00      	cmp	r6, #0
 8001a38:	da03      	bge.n	8001a42 <_printf_i+0xd2>
 8001a3a:	232d      	movs	r3, #45	; 0x2d
 8001a3c:	4276      	negs	r6, r6
 8001a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a42:	485a      	ldr	r0, [pc, #360]	; (8001bac <_printf_i+0x23c>)
 8001a44:	230a      	movs	r3, #10
 8001a46:	e012      	b.n	8001a6e <_printf_i+0xfe>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	1d19      	adds	r1, r3, #4
 8001a4e:	6029      	str	r1, [r5, #0]
 8001a50:	0605      	lsls	r5, r0, #24
 8001a52:	d501      	bpl.n	8001a58 <_printf_i+0xe8>
 8001a54:	681e      	ldr	r6, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <_printf_i+0xee>
 8001a58:	0641      	lsls	r1, r0, #25
 8001a5a:	d5fb      	bpl.n	8001a54 <_printf_i+0xe4>
 8001a5c:	881e      	ldrh	r6, [r3, #0]
 8001a5e:	4853      	ldr	r0, [pc, #332]	; (8001bac <_printf_i+0x23c>)
 8001a60:	2f6f      	cmp	r7, #111	; 0x6f
 8001a62:	bf0c      	ite	eq
 8001a64:	2308      	moveq	r3, #8
 8001a66:	230a      	movne	r3, #10
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a6e:	6865      	ldr	r5, [r4, #4]
 8001a70:	60a5      	str	r5, [r4, #8]
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	bfa2      	ittt	ge
 8001a76:	6821      	ldrge	r1, [r4, #0]
 8001a78:	f021 0104 	bicge.w	r1, r1, #4
 8001a7c:	6021      	strge	r1, [r4, #0]
 8001a7e:	b90e      	cbnz	r6, 8001a84 <_printf_i+0x114>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d04b      	beq.n	8001b1c <_printf_i+0x1ac>
 8001a84:	4615      	mov	r5, r2
 8001a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8001a8e:	5dc7      	ldrb	r7, [r0, r7]
 8001a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a94:	4637      	mov	r7, r6
 8001a96:	42bb      	cmp	r3, r7
 8001a98:	460e      	mov	r6, r1
 8001a9a:	d9f4      	bls.n	8001a86 <_printf_i+0x116>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d10b      	bne.n	8001ab8 <_printf_i+0x148>
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	07de      	lsls	r6, r3, #31
 8001aa4:	d508      	bpl.n	8001ab8 <_printf_i+0x148>
 8001aa6:	6923      	ldr	r3, [r4, #16]
 8001aa8:	6861      	ldr	r1, [r4, #4]
 8001aaa:	4299      	cmp	r1, r3
 8001aac:	bfde      	ittt	le
 8001aae:	2330      	movle	r3, #48	; 0x30
 8001ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ab8:	1b52      	subs	r2, r2, r5
 8001aba:	6122      	str	r2, [r4, #16]
 8001abc:	f8cd a000 	str.w	sl, [sp]
 8001ac0:	464b      	mov	r3, r9
 8001ac2:	aa03      	add	r2, sp, #12
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	f7ff fee4 	bl	8001894 <_printf_common>
 8001acc:	3001      	adds	r0, #1
 8001ace:	d14a      	bne.n	8001b66 <_printf_i+0x1f6>
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	b004      	add	sp, #16
 8001ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	4833      	ldr	r0, [pc, #204]	; (8001bb0 <_printf_i+0x240>)
 8001ae4:	2778      	movs	r7, #120	; 0x78
 8001ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	6829      	ldr	r1, [r5, #0]
 8001aee:	061f      	lsls	r7, r3, #24
 8001af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001af4:	d402      	bmi.n	8001afc <_printf_i+0x18c>
 8001af6:	065f      	lsls	r7, r3, #25
 8001af8:	bf48      	it	mi
 8001afa:	b2b6      	uxthmi	r6, r6
 8001afc:	07df      	lsls	r7, r3, #31
 8001afe:	bf48      	it	mi
 8001b00:	f043 0320 	orrmi.w	r3, r3, #32
 8001b04:	6029      	str	r1, [r5, #0]
 8001b06:	bf48      	it	mi
 8001b08:	6023      	strmi	r3, [r4, #0]
 8001b0a:	b91e      	cbnz	r6, 8001b14 <_printf_i+0x1a4>
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	f023 0320 	bic.w	r3, r3, #32
 8001b12:	6023      	str	r3, [r4, #0]
 8001b14:	2310      	movs	r3, #16
 8001b16:	e7a7      	b.n	8001a68 <_printf_i+0xf8>
 8001b18:	4824      	ldr	r0, [pc, #144]	; (8001bac <_printf_i+0x23c>)
 8001b1a:	e7e4      	b.n	8001ae6 <_printf_i+0x176>
 8001b1c:	4615      	mov	r5, r2
 8001b1e:	e7bd      	b.n	8001a9c <_printf_i+0x12c>
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	6826      	ldr	r6, [r4, #0]
 8001b24:	6961      	ldr	r1, [r4, #20]
 8001b26:	1d18      	adds	r0, r3, #4
 8001b28:	6028      	str	r0, [r5, #0]
 8001b2a:	0635      	lsls	r5, r6, #24
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	d501      	bpl.n	8001b34 <_printf_i+0x1c4>
 8001b30:	6019      	str	r1, [r3, #0]
 8001b32:	e002      	b.n	8001b3a <_printf_i+0x1ca>
 8001b34:	0670      	lsls	r0, r6, #25
 8001b36:	d5fb      	bpl.n	8001b30 <_printf_i+0x1c0>
 8001b38:	8019      	strh	r1, [r3, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6123      	str	r3, [r4, #16]
 8001b3e:	4615      	mov	r5, r2
 8001b40:	e7bc      	b.n	8001abc <_printf_i+0x14c>
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	1d1a      	adds	r2, r3, #4
 8001b46:	602a      	str	r2, [r5, #0]
 8001b48:	681d      	ldr	r5, [r3, #0]
 8001b4a:	6862      	ldr	r2, [r4, #4]
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f7fe fb4e 	bl	80001f0 <memchr>
 8001b54:	b108      	cbz	r0, 8001b5a <_printf_i+0x1ea>
 8001b56:	1b40      	subs	r0, r0, r5
 8001b58:	6060      	str	r0, [r4, #4]
 8001b5a:	6863      	ldr	r3, [r4, #4]
 8001b5c:	6123      	str	r3, [r4, #16]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b64:	e7aa      	b.n	8001abc <_printf_i+0x14c>
 8001b66:	6923      	ldr	r3, [r4, #16]
 8001b68:	462a      	mov	r2, r5
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	47d0      	blx	sl
 8001b70:	3001      	adds	r0, #1
 8001b72:	d0ad      	beq.n	8001ad0 <_printf_i+0x160>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	079b      	lsls	r3, r3, #30
 8001b78:	d413      	bmi.n	8001ba2 <_printf_i+0x232>
 8001b7a:	68e0      	ldr	r0, [r4, #12]
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	bfb8      	it	lt
 8001b82:	4618      	movlt	r0, r3
 8001b84:	e7a6      	b.n	8001ad4 <_printf_i+0x164>
 8001b86:	2301      	movs	r3, #1
 8001b88:	4632      	mov	r2, r6
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	47d0      	blx	sl
 8001b90:	3001      	adds	r0, #1
 8001b92:	d09d      	beq.n	8001ad0 <_printf_i+0x160>
 8001b94:	3501      	adds	r5, #1
 8001b96:	68e3      	ldr	r3, [r4, #12]
 8001b98:	9903      	ldr	r1, [sp, #12]
 8001b9a:	1a5b      	subs	r3, r3, r1
 8001b9c:	42ab      	cmp	r3, r5
 8001b9e:	dcf2      	bgt.n	8001b86 <_printf_i+0x216>
 8001ba0:	e7eb      	b.n	8001b7a <_printf_i+0x20a>
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	f104 0619 	add.w	r6, r4, #25
 8001ba8:	e7f5      	b.n	8001b96 <_printf_i+0x226>
 8001baa:	bf00      	nop
 8001bac:	08001d88 	.word	0x08001d88
 8001bb0:	08001d99 	.word	0x08001d99

08001bb4 <memmove>:
 8001bb4:	4288      	cmp	r0, r1
 8001bb6:	b510      	push	{r4, lr}
 8001bb8:	eb01 0402 	add.w	r4, r1, r2
 8001bbc:	d902      	bls.n	8001bc4 <memmove+0x10>
 8001bbe:	4284      	cmp	r4, r0
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	d807      	bhi.n	8001bd4 <memmove+0x20>
 8001bc4:	1e43      	subs	r3, r0, #1
 8001bc6:	42a1      	cmp	r1, r4
 8001bc8:	d008      	beq.n	8001bdc <memmove+0x28>
 8001bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001bd2:	e7f8      	b.n	8001bc6 <memmove+0x12>
 8001bd4:	4402      	add	r2, r0
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	428a      	cmp	r2, r1
 8001bda:	d100      	bne.n	8001bde <memmove+0x2a>
 8001bdc:	bd10      	pop	{r4, pc}
 8001bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001be6:	e7f7      	b.n	8001bd8 <memmove+0x24>

08001be8 <_sbrk_r>:
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4d06      	ldr	r5, [pc, #24]	; (8001c04 <_sbrk_r+0x1c>)
 8001bec:	2300      	movs	r3, #0
 8001bee:	4604      	mov	r4, r0
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	602b      	str	r3, [r5, #0]
 8001bf4:	f7fe fe52 	bl	800089c <_sbrk>
 8001bf8:	1c43      	adds	r3, r0, #1
 8001bfa:	d102      	bne.n	8001c02 <_sbrk_r+0x1a>
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	b103      	cbz	r3, 8001c02 <_sbrk_r+0x1a>
 8001c00:	6023      	str	r3, [r4, #0]
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
 8001c04:	200004f4 	.word	0x200004f4

08001c08 <memcpy>:
 8001c08:	440a      	add	r2, r1
 8001c0a:	4291      	cmp	r1, r2
 8001c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c10:	d100      	bne.n	8001c14 <memcpy+0xc>
 8001c12:	4770      	bx	lr
 8001c14:	b510      	push	{r4, lr}
 8001c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c1e:	4291      	cmp	r1, r2
 8001c20:	d1f9      	bne.n	8001c16 <memcpy+0xe>
 8001c22:	bd10      	pop	{r4, pc}

08001c24 <_realloc_r>:
 8001c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c28:	4680      	mov	r8, r0
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	460e      	mov	r6, r1
 8001c2e:	b921      	cbnz	r1, 8001c3a <_realloc_r+0x16>
 8001c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c34:	4611      	mov	r1, r2
 8001c36:	f7ff bc49 	b.w	80014cc <_malloc_r>
 8001c3a:	b92a      	cbnz	r2, 8001c48 <_realloc_r+0x24>
 8001c3c:	f7ff fbda 	bl	80013f4 <_free_r>
 8001c40:	4625      	mov	r5, r4
 8001c42:	4628      	mov	r0, r5
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c48:	f000 f81b 	bl	8001c82 <_malloc_usable_size_r>
 8001c4c:	4284      	cmp	r4, r0
 8001c4e:	4607      	mov	r7, r0
 8001c50:	d802      	bhi.n	8001c58 <_realloc_r+0x34>
 8001c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001c56:	d812      	bhi.n	8001c7e <_realloc_r+0x5a>
 8001c58:	4621      	mov	r1, r4
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	f7ff fc36 	bl	80014cc <_malloc_r>
 8001c60:	4605      	mov	r5, r0
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0ed      	beq.n	8001c42 <_realloc_r+0x1e>
 8001c66:	42bc      	cmp	r4, r7
 8001c68:	4622      	mov	r2, r4
 8001c6a:	4631      	mov	r1, r6
 8001c6c:	bf28      	it	cs
 8001c6e:	463a      	movcs	r2, r7
 8001c70:	f7ff ffca 	bl	8001c08 <memcpy>
 8001c74:	4631      	mov	r1, r6
 8001c76:	4640      	mov	r0, r8
 8001c78:	f7ff fbbc 	bl	80013f4 <_free_r>
 8001c7c:	e7e1      	b.n	8001c42 <_realloc_r+0x1e>
 8001c7e:	4635      	mov	r5, r6
 8001c80:	e7df      	b.n	8001c42 <_realloc_r+0x1e>

08001c82 <_malloc_usable_size_r>:
 8001c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c86:	1f18      	subs	r0, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bfbc      	itt	lt
 8001c8c:	580b      	ldrlt	r3, [r1, r0]
 8001c8e:	18c0      	addlt	r0, r0, r3
 8001c90:	4770      	bx	lr
	...

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
